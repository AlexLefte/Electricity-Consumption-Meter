;    /*******************************************************
;This program was created by the CodeWizardAVR V3.49a
;Automatic Program Generator
;© Copyright 1998-2022 Pavel Haiduc, HP InfoTech S.R.L.
;http://www.hpinfotech.ro
;Project :
;Version :
;Date    : 3/11/2023
;Author  :
;Company :
;Comments:
;Chip type               : ATmega164A
;Program type            : Application
;AVR Core Clock frequency: 10.000000 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 256
;*******************************************************/
;// I/O Registers definitions
;#include <mega164a.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x01
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x0E
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x04
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x06
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x0C
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x0E
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x02
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=smcr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;// #include <util/delay.h>
;// Useful definitions
;// Numar perioade necesare duratei unui
;// puls intreg (100 ms)
;
;#define T 5
;
;// Numar de perioade necesare
;// duratei unui puls pozitiv (cu durata 20 ms)
;
;#define DP 1
;
;/// CLS definitions ///
;
;char S1 = 0; // CLS state
;const long int H1 = 8;
;const long int H2 = 16;
;
;const long int Ter = 0x10000000;
;long int A0[]={0x00000000+H1<<16, 1, 0x01000000+H1<<16, 1, 0x02000000+H1<<16, 1, 0x03000000+H1<<16, 1, 0x04000000+H1<<16, 1, Ter, 0};

	.DSEG
;long int A1[]={0x00000000+H2<<16, 2, 0x01000000+H2<<16, 2, 0x02000000+H2<<16, 2, 0x03000000+H2<<16, 2, 0x04000000+H2<<16, 2, Ter, 1};
;long int A2[]={0x01000000, 0, 0x02000000, 0, 0x03000000, 0, 0x04000000, 0, 0x05000000, 3, Ter, 2};
;long int A3[]={0x00000000, 0, Ter, 3};
;
;
;
;long int *TABA[] = {A0, A1, A2, A3};
;///////////////////////
;/// Time variables ///
;long int Z = 0; //day
;long int H = 0; //hour
;long int M = 0; //minutes
;long int S = 0; //seconds
;/////////////////////
;char cnt_time = 0; //contor de timp
;char T_SEC; // numar de perioade necesare pentru a acoperi 1 sec
;char S2; //starea de contorizare a PS-ului
;
;////// Global variables ////////
;// PULSE
;char PULSE;
;char S_PULSE;
;
;    // Working mode ///
;// 0 -> range on
;// 1 -> range off
;char MODE = 0;
;// Flag (1 -> mode not set yet)
;char modeFlag = 1;
;///////////////////
;
;// State variables ( Q -> consumption range,
;// Q1 -> consumption counting state,
;// S3 -> display state)
;char Q,Q1,S3;
;/// Consumption array
;//            0 - H1   H1 - H2   H2 - 0   Sat - Sun   Total
;//              ^         ^         ^         ^         ^
;int CONSUM[] = {21,       0,       0,        0,        0};
;
;    // Digits
;char C4, C3, C2, C1;
;// CA
;char CA;
;//Power Level
;//char PowerLevel = 0;
;// Digit patterns (CLC)
;const char DIGITS[] = {
;   0b11000000, // 0
;    0b11111001, // 1
;    0b10100100, // 2
;    0b10110000, // 3
;    0b10011001, // 4
;    0b10010010, // 5
;    0b10000010, // 6
;    0b11111000, // 7
;    0b10000000, // 8
;    0b10010000  // 9
;};
;
;char outPower ;
;char pulsesNumber;
;///////////////////////////////
;
;// Power Level (CLC) ///
;// char CLC_LEVEL[] = {0x00, 0x10, 0x30, 0x70, 0xF0};  // 4 levels
;//char CLC_LEVEL[] = {0x00, 0x20, 0x60, 0xE0};           // 3 levels
;////////////////////////
;// Consumption range output (CLC) //
;char CLC_RANGE_OUTPUT[] = {0x01, 0x02, 0x03, 0x00};
;///////////////////////////////////
;// Pulses contor
;char cntP = 0;
;
;     //// Function headers ////
;void Init();
;void UpdateConsumption();
;void DisplayConsumption();
;void DisplayDigit(char currentDisplay, char digit);
;void UpdateTime();
;void CLS();
;//void DisplayPowerLevel();
;void DisplayConsumptionDisplayMode();
;//void DisplayInfo();
;
;/////////////////////////
;
;////// SCI ///////
;// Timer 0 overflow interrupt service routine
;interrupt [TIM0_OVF] void timer0_ovf_isr(void)
; 0000 0083 {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 0084     // Reinitialize Timer 0 value
; 0000 0085     TCNT0=0x3C;
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
; 0000 0086     //Update current time
; 0000 0087     UpdateTime();
;PCODE: $00000011 VOL: 0
; 0000 0088 
; 0000 0089     // Update CA
; 0000 008A     CA = (PIND & 0x80) >> 7;
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
; 0000 008B 
; 0000 008C     //DisplayInfo
; 0000 008D     //DisplayInfo();
; 0000 008E 
; 0000 008F 
; 0000 0090     //power from ADSP
; 0000 0091     outPower = (PINA & 0x38)<<2;
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
; 0000 0092     // Delete PB7-PB5
; 0000 0093    PORTB &= 0x1f;
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
; 0000 0094 
; 0000 0095    // Display out on PB7-PB5
; 0000 0096    PORTB = (PORTB) | (outPower);
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
; 0000 0097 
; 0000 0098    DisplayConsumptionDisplayMode();
;PCODE: $00000023 VOL: 0
; 0000 0099 
; 0000 009A 
; 0000 009B     // Update mock pulse
; 0000 009C     // MockPULSE();
; 0000 009D     CLS();
;PCODE: $00000024 VOL: 0
; 0000 009E     // Check for pulses coming from ADSP
; 0000 009F     UpdateConsumption();
;PCODE: $00000025 VOL: 0
; 0000 00A0 
; 0000 00A1 }
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;///////////////////
;
;void main(void)
; 0000 00A5 {
;PCODE: $00000029 VOL: 0
; 0000 00A6 // Declare your local variables here
; 0000 00A7 // Crystal Oscillator division factor: 1
; 0000 00A8 #pragma optsize-
; 0000 00A9 CLKPR=(1<<CLKPCE);
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
; 0000 00AA CLKPR=(0<<CLKPCE) | (0<<CLKPS3) | (0<<CLKPS2) | (0<<CLKPS1) | (0<<CLKPS0);
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
; 0000 00AB #ifdef _OPTIMIZE_SIZE_
; 0000 00AC #pragma optsize+
; 0000 00AD #endif
; 0000 00AE // Input/Output Ports initialization
; 0000 00AF // Port A initialization
; 0000 00B0 // Function: Bit7=Out Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 00B1 DDRA=(1<<DDA7) | (0<<DDA6) | (0<<DDA5) | (0<<DDA4) | (0<<DDA3) | (0<<DDA2) | (0<<DDA1) | (0<<DDA0);
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
; 0000 00B2 // State: Bit7=1 Bit6=P Bit5=P Bit4=P Bit3=P Bit2=P Bit1=P Bit0=P
; 0000 00B3 PORTA=(1<<PORTA7) | (1<<PORTA6) | (1<<PORTA5) | (1<<PORTA4) | (1<<PORTA3) | (1<<PORTA2) | (1<<PORTA1) | (1<<PORTA0);
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
; 0000 00B4 // Port B initialization
; 0000 00B5 // Function: Bit7=Out Bit6=Out Bit5=Out Bit4=Out Bit3=Out Bit2=Out Bit1=Out Bit0=Out
; 0000 00B6 DDRB=(1<<DDB7) | (1<<DDB6) | (1<<DDB5) | (1<<DDB4) | (1<<DDB3) | (1<<DDB2) | (1<<DDB1) | (1<<DDB0);
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
; 0000 00B7 // State: Bit7=1 Bit6=1 Bit5=1 Bit4=1 Bit3=1 Bit2=1 Bit1=1 Bit0=1
; 0000 00B8 PORTB=(1<<PORTB7) | (1<<PORTB6) | (1<<PORTB5) | (1<<PORTB4) | (1<<PORTB3) | (1<<PORTB2) | (1<<PORTB1) | (1<<PORTB0);
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
; 0000 00B9 // Port C initialization
; 0000 00BA // Function: Bit7=Out Bit6=Out Bit5=Out Bit4=Out Bit3=Out Bit2=Out Bit1=Out Bit0=Out
; 0000 00BB DDRC=(1<<DDC7) | (1<<DDC6) | (1<<DDC5) | (1<<DDC4) | (1<<DDC3) | (1<<DDC2) | (1<<DDC1) | (1<<DDC0);
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
; 0000 00BC // State: Bit7=1 Bit6=1 Bit5=1 Bit4=1 Bit3=1 Bit2=1 Bit1=1 Bit0=1
; 0000 00BD PORTC=(1<<PORTC7) | (1<<PORTC6) | (1<<PORTC5) | (1<<PORTC4) | (1<<PORTC3) | (1<<PORTC2) | (1<<PORTC1) | (1<<PORTC0);
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
; 0000 00BE // Port D initialization
; 0000 00BF // Function: Bit7=In Bit6=In Bit5=Out Bit4=Out Bit3=Out Bit2=Out Bit1=Out Bit0=Out
; 0000 00C0 DDRD=(0<<DDD7) | (0<<DDD6) | (1<<DDD5) | (1<<DDD4) | (1<<DDD3) | (1<<DDD2) | (1<<DDD1) | (1<<DDD0);
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
; 0000 00C1 // State: Bit7=T Bit6=T Bit5=1 Bit4=1 Bit3=1 Bit2=1 Bit1=1 Bit0=1
; 0000 00C2 PORTD=(0<<PORTD7) | (0<<PORTD6) | (1<<PORTD5) | (1<<PORTD4) | (1<<PORTD3) | (1<<PORTD2) | (1<<PORTD1) | (1<<PORTD0);
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
; 0000 00C3 // Timer/Counter 0 initialization
; 0000 00C4 // Clock source: System Clock
; 0000 00C5 // Clock value: 9.766 kHz
; 0000 00C6 // Mode: Normal top=0xFF
; 0000 00C7 // OC0A output: Disconnected
; 0000 00C8 // OC0B output: Disconnected
; 0000 00C9 // Timer Period: 20.07 ms
; 0000 00CA TCCR0A=(0<<COM0A1) | (0<<COM0A0) | (0<<COM0B1) | (0<<COM0B0) | (0<<WGM01) | (0<<WGM00);
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
; 0000 00CB TCCR0B=(0<<WGM02) | (1<<CS02) | (0<<CS01) | (1<<CS00);
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
; 0000 00CC TCNT0=0x3C;
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
; 0000 00CD OCR0A=0x00;
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
; 0000 00CE OCR0B=0x00;
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
; 0000 00CF // Timer/Counter 1 initialization
; 0000 00D0 // Clock source: System Clock
; 0000 00D1 // Clock value: Timer1 Stopped
; 0000 00D2 // Mode: Normal top=0xFFFF
; 0000 00D3 // OC1A output: Disconnected
; 0000 00D4 // OC1B output: Disconnected
; 0000 00D5 // Noise Canceler: Off
; 0000 00D6 // Input Capture on Falling Edge
; 0000 00D7 // Timer1 Overflow Interrupt: Off
; 0000 00D8 // Input Capture Interrupt: Off
; 0000 00D9 // Compare A Match Interrupt: Off
; 0000 00DA // Compare B Match Interrupt: Off
; 0000 00DB TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
; 0000 00DC TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (0<<CS11) | (0<<CS10);
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
; 0000 00DD TCNT1H=0x00;
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
; 0000 00DE TCNT1L=0x00;
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
; 0000 00DF ICR1H=0x00;
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
; 0000 00E0 ICR1L=0x00;
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
; 0000 00E1 OCR1AH=0x00;
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
; 0000 00E2 OCR1AL=0x00;
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
; 0000 00E3 OCR1BH=0x00;
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
; 0000 00E4 OCR1BL=0x00;
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
; 0000 00E5 
; 0000 00E6 // Timer/Counter 2 initialization
; 0000 00E7 // Clock source: System Clock
; 0000 00E8 // Clock value: Timer2 Stopped
; 0000 00E9 // Mode: Normal top=0xFF
; 0000 00EA // OC2A output: Disconnected
; 0000 00EB // OC2B output: Disconnected
; 0000 00EC ASSR=(0<<EXCLK) | (0<<AS2);
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
; 0000 00ED TCCR2A=(0<<COM2A1) | (0<<COM2A0) | (0<<COM2B1) | (0<<COM2B0) | (0<<WGM21) | (0<<WGM20);
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
; 0000 00EE TCCR2B=(0<<WGM22) | (0<<CS22) | (0<<CS21) | (0<<CS20);
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
; 0000 00EF TCNT2=0x00;
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
; 0000 00F0 OCR2A=0x00;
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
; 0000 00F1 OCR2B=0x00;
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
; 0000 00F2 // Timer/Counter 0 Interrupt(s) initialization
; 0000 00F3 TIMSK0=(0<<OCIE0B) | (0<<OCIE0A) | (1<<TOIE0);
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
; 0000 00F4 // Timer/Counter 1 Interrupt(s) initialization
; 0000 00F5 TIMSK1=(0<<ICIE1) | (0<<OCIE1B) | (0<<OCIE1A) | (0<<TOIE1);
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
; 0000 00F6 // Timer/Counter 2 Interrupt(s) initialization
; 0000 00F7 TIMSK2=(0<<OCIE2B) | (0<<OCIE2A) | (0<<TOIE2);
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
; 0000 00F8 // External Interrupt(s) initialization
; 0000 00F9 // INT0: Off
; 0000 00FA // INT1: Off
; 0000 00FB // INT2: Off
; 0000 00FC // Interrupt on any change on pins PCINT0-7: Off
; 0000 00FD // Interrupt on any change on pins PCINT8-15: Off
; 0000 00FE // Interrupt on any change on pins PCINT16-23: Off
; 0000 00FF // Interrupt on any change on pins PCINT24-31: Off
; 0000 0100 EICRA=(0<<ISC21) | (0<<ISC20) | (0<<ISC11) | (0<<ISC10) | (0<<ISC01) | (0<<ISC00);
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
; 0000 0101 EIMSK=(0<<INT2) | (0<<INT1) | (0<<INT0);
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
; 0000 0102 PCICR=(0<<PCIE3) | (0<<PCIE2) | (0<<PCIE1) | (0<<PCIE0);
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
; 0000 0103 // USART0 initialization
; 0000 0104 // USART0 disabled
; 0000 0105 UCSR0B=(0<<RXCIE0) | (0<<TXCIE0) | (0<<UDRIE0) | (0<<RXEN0) | (0<<TXEN0) | (0<<UCSZ02) | (0<<RXB80) | (0<<TXB80);
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
; 0000 0106 
; 0000 0107 // USART1 initialization
; 0000 0108 // USART1 disabled
; 0000 0109 UCSR1B=(0<<RXCIE1) | (0<<TXCIE1) | (0<<UDRIE1) | (0<<RXEN1) | (0<<TXEN1) | (0<<UCSZ12) | (0<<RXB81) | (0<<TXB81);
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
; 0000 010A // Analog Comparator initialization
; 0000 010B // Analog Comparator: Off
; 0000 010C // The Analog Comparator's positive input is
; 0000 010D // connected to the AIN0 pin
; 0000 010E // The Analog Comparator's negative input is
; 0000 010F // connected to the AIN1 pin
; 0000 0110 ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
; 0000 0111 ADCSRB=(0<<ACME);
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
; 0000 0112 // Digital input buffer on AIN0: On
; 0000 0113 // Digital input buffer on AIN1: On
; 0000 0114 DIDR1=(0<<AIN0D) | (0<<AIN1D);
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
; 0000 0115 // ADC initialization
; 0000 0116 // ADC disabled
; 0000 0117 ADCSRA=(0<<ADEN) | (0<<ADSC) | (0<<ADATE) | (0<<ADIF) | (0<<ADIE) | (0<<ADPS2) | (0<<ADPS1) | (0<<ADPS0);
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
; 0000 0118 // SPI initialization
; 0000 0119 // SPI disabled
; 0000 011A SPCR=(0<<SPIE) | (0<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
; 0000 011B // TWI initialization
; 0000 011C // TWI disabled
; 0000 011D TWCR=(0<<TWEA) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWEN) | (0<<TWIE);
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
; 0000 011E 
; 0000 011F // Globally enable interrupts
; 0000 0120 #asm("sei")
;PCODE: $00000084 VOL: 0
	sei
;PCODE: $00000085 VOL: 0
; 0000 0121 
; 0000 0122 // Initialize the device
; 0000 0123 Init();
;PCODE: $00000086 VOL: 0
; 0000 0124 while (1)
;PCODE: $00000087 VOL: 0
; 0000 0125       {
; 0000 0126       // Display the consumption
; 0000 0127       DisplayConsumption();
;PCODE: $00000088 VOL: 0
; 0000 0128       // Wait for interruptions
; 0000 0129       }
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
; 0000 012A }
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;///// Function definitions /////
;void Init()
; 0000 012D {
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
; 0000 012E     // Setting initial states = 0
; 0000 012F     Q = Q1 = S1 = S2 = S3 = S_PULSE =  0;
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
; 0000 0130 
; 0000 0131     // Turn off displays
; 0000 0132     PORTC = 0xff;
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
; 0000 0133     PORTD = 0xff;
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
; 0000 0134     PORTB = 0xff;
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
; 0000 0135 }
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
;
;void UpdateConsumption()
; 0000 0138 {
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
; 0000 0139    // Reading the power level
; 0000 013A     //PowerLevel = (PINA & 0x1C) >> 2;
; 0000 013B     PULSE = PINA & 0x01;
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
; 0000 013C 
; 0000 013D      switch(S2)
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
; 0000 013E     {
; 0000 013F         case 0:
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
; 0000 0140         {
; 0000 0141             // If PULSE is on, start counting
; 0000 0142             if (PULSE)
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
; 0000 0143             {
; 0000 0144                 // Increment cntP
; 0000 0145                 cntP += 1;
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
; 0000 0146 
; 0000 0147                 // Reset reading flag
; 0000 0148                 // PORTD &= 0x7f;
; 0000 0149 
; 0000 014A                 if (modeFlag)
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
; 0000 014B                 {
; 0000 014C                     MODE = (PINA & 0x02) >> 2;
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
; 0000 014D                     //modeFlag = 0;
; 0000 014E                 }
; 0000 014F 
; 0000 0150                 // Go further if the pulse period has passed,
; 0000 0151                 // otherwise go back wait for sensding ack again.
; 0000 0152                 S2 = (cntP == DP) ? 1 : 0;
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
; 0000 0153             }
; 0000 0154             break;
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
; 0000 0155         }
; 0000 0156         case 1:
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
; 0000 0157         {
; 0000 0158             if (PULSE == 0)
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
; 0000 0159             {
; 0000 015A                 // Update current consumption range
; 0000 015B                 //CLS();
; 0000 015C                 if (modeFlag)
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
; 0000 015D                 {
; 0000 015E                     pulsesNumber = (PINA & 0x06)>>1;
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
; 0000 015F                     modeFlag = 0;
;PCODE: $000000CD VOL: 0
; 0000 0160                 }
; 0000 0161 
; 0000 0162 
; 0000 0163                 // Increment consumption
; 0000 0164                 if (MODE == 0)
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
; 0000 0165                 {
; 0000 0166                     CONSUM[Q] += 1;    // Working range on
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
; 0000 0167 
; 0000 0168                    // if(CONSUM[Q]%6 == 0 && CONSUM[4]%8 == 0) CONSUM[Q] +=1;
; 0000 0169                 }
; 0000 016A                 else
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
; 0000 016B                 {
; 0000 016C                     CONSUM[4] += 1;    // Working range off
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
; 0000 016D 
; 0000 016E 
; 0000 016F                    // if(CONSUM[4]%6 == 0 && CONSUM[4]%8 == 0)   CONSUM[4] +=1;
; 0000 0170 
; 0000 0171 
; 0000 0172                 }
;PCODE: $000000E0 VOL: 0
; 0000 0173 
; 0000 0174                 // Wait for another pulse
; 0000 0175                 S2 = 0;
;PCODE: $000000E1 VOL: 0
; 0000 0176                 cntP = 0;
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
; 0000 0177             }
; 0000 0178             break;
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
; 0000 0179         }
; 0000 017A     }
;PCODE: $000000E6 VOL: 0
; 0000 017B }
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
;
;void DisplayConsumption()
; 0000 017E {
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
; 0000 017F     // We assume:
; 0000 0180     // PORTC: PC0 - PC6 -> 7 segments (A-G)
; 0000 0181     // PORTD: PD0 - PD3 -> select the common cathode for each digit (multiplexing)
; 0000 0182               // PD3 - C4, PD2 - C3, PD1 - C2, PD0 - C1
; 0000 0183     // Q - consumption range:
; 0000 0184         // 0 -> 00:00 - H1:00
; 0000 0185         // 1 -> H1:00 - H2:00               (MON - FRI)
; 0000 0186         // 2 -> H2:00 - 00:00 (next day)
; 0000 0187         // 3 -> SAT - SUN
; 0000 0188 
; 0000 0189     // The actual approach:
; 0000 018A     // Each main loop iteration we multiplex the digits and display one at a time
; 0000 018B 
; 0000 018C     // If MODE = 1 -> display total consumption,
; 0000 018D     // else -> display consumption based on current range.
; 0000 018E     int cons = (MODE) ?  CONSUM[4] : CONSUM[Q1];
; 0000 018F 
; 0000 0190     if (modeFlag) return; //daca nu s-a trimis primul puls nu se afiseaza nimic
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
;	cons -> R16,R17
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
; 0000 0191      // Compute and display C4
; 0000 0192     C4 = cons / 1000;
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
; 0000 0193     cons %= 1000;
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
; 0000 0194     DisplayDigit(4, C4);
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
; 0000 0195 
; 0000 0196     // Compute and display C3
; 0000 0197     C3 = cons / 100;
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
;PCODE: $00000112 VOL: 0
; 0000 0198     cons %= 100;
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
; 0000 0199     DisplayDigit(3, C3);
;PCODE: $00000117 VOL: 0
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
; 0000 019A 
; 0000 019B     // Compute and display C2
; 0000 019C     C2 = cons / 10;
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 0
; 0000 019D     DisplayDigit(2, C2);
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
; 0000 019E 
; 0000 019F     // Compute and display C1
; 0000 01A0     C1 = cons % 10;
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
; 0000 01A1     DisplayDigit(1, C1);
;PCODE: $00000127 VOL: 0
;PCODE: $00000128 VOL: 0
;PCODE: $00000129 VOL: 0
;PCODE: $0000012A VOL: 0
; 0000 01A2 }
;PCODE: $0000012B VOL: 0
;PCODE: $0000012C VOL: 0
;PCODE: $0000012D VOL: 0
;
;void DisplayDigit(char currentDisplay, char digit)
; 0000 01A5 {
;PCODE: $0000012E VOL: 0
;PCODE: $0000012F VOL: 0
; 0000 01A6     // Set PORTC pins to the corresponding digit
; 0000 01A7    // PORTC = DIGITS[digit];
; 0000 01A8 
; 0000 01A9     // Select the desired display (turn on the pin
; 0000 01AA     // corresponding to the desired digit (C4/C3/C2/C1)
; 0000 01AB     // char output = 0xff;
; 0000 01AC     char output;
; 0000 01AD 
; 0000 01AE     switch (currentDisplay)
;PCODE: $00000130 VOL: 0
;PCODE: $00000131 VOL: 0
;	currentDisplay -> Y+2
;	digit -> Y+1
;	output -> R17
;PCODE: $00000132 VOL: 0
;PCODE: $00000133 VOL: 0
; 0000 01AF     {
; 0000 01B0         case 4:
;PCODE: $00000134 VOL: 0
;PCODE: $00000135 VOL: 0
; 0000 01B1             // Turn PD3 on
; 0000 01B2             //output &= 0b00000111;
; 0000 01B3             output = 0x08;
;PCODE: $00000136 VOL: 0
;PCODE: $00000137 VOL: 0
; 0000 01B4             break;
;PCODE: $00000138 VOL: 0
; 0000 01B5         case 3:
;PCODE: $00000139 VOL: 0
;PCODE: $0000013A VOL: 0
;PCODE: $0000013B VOL: 0
; 0000 01B6             // Turn PD2 on
; 0000 01B7             // output &= 0b00001011;
; 0000 01B8             output = 0x04;
;PCODE: $0000013C VOL: 0
;PCODE: $0000013D VOL: 0
; 0000 01B9             break;
;PCODE: $0000013E VOL: 0
; 0000 01BA         case 2:
;PCODE: $0000013F VOL: 0
;PCODE: $00000140 VOL: 0
;PCODE: $00000141 VOL: 0
; 0000 01BB             // Turn PD1 on
; 0000 01BC             output = 0x02;
;PCODE: $00000142 VOL: 0
;PCODE: $00000143 VOL: 0
; 0000 01BD             break;
;PCODE: $00000144 VOL: 0
; 0000 01BE         case 1:
;PCODE: $00000145 VOL: 0
;PCODE: $00000146 VOL: 0
;PCODE: $00000147 VOL: 0
; 0000 01BF             // Turn PD0 on
; 0000 01C0             output = 0x01;
;PCODE: $00000148 VOL: 0
;PCODE: $00000149 VOL: 0
; 0000 01C1             break;
;PCODE: $0000014A VOL: 0
; 0000 01C2     }
;PCODE: $0000014B VOL: 0
; 0000 01C3 
; 0000 01C4     // Delete PD0-3
; 0000 01C5     PORTD &= 0xF0;
;PCODE: $0000014C VOL: 0
;PCODE: $0000014D VOL: 0
;PCODE: $0000014E VOL: 0
; 0000 01C6 
; 0000 01C7     // Assign output to PORTC in order to select the desired display;
; 0000 01C8     PORTD |= output;
;PCODE: $0000014F VOL: 0
;PCODE: $00000150 VOL: 0
;PCODE: $00000151 VOL: 0
; 0000 01C9 
; 0000 01CA     // Set PORTC pins to the corresponding digit
; 0000 01CB     PORTC = DIGITS[digit];
;PCODE: $00000152 VOL: 0
;PCODE: $00000153 VOL: 0
;PCODE: $00000154 VOL: 0
;PCODE: $00000155 VOL: 0
;PCODE: $00000156 VOL: 0
; 0000 01CC 
; 0000 01CD     // Add delay (10 us)
; 0000 01CE     //_display_us(10);
; 0000 01CF }
;PCODE: $00000157 VOL: 0
;PCODE: $00000158 VOL: 0
;PCODE: $00000159 VOL: 0
;PCODE: $0000015A VOL: 0
;PCODE: $0000015B VOL: 0
;
;
;void UpdateTime(){
; 0000 01D2 void UpdateTime(){
;PCODE: $0000015C VOL: 0
;PCODE: $0000015D VOL: 0
; 0000 01D3     cnt_time += 1; //incrementare contor de timp
;PCODE: $0000015E VOL: 0
; 0000 01D4     if(cnt_time != T_SEC) return;
;PCODE: $0000015F VOL: 0
;PCODE: $00000160 VOL: 0
;PCODE: $00000161 VOL: 0
;PCODE: $00000162 VOL: 0
; 0000 01D5 
; 0000 01D6     cnt_time = 0; // se reseteaza contorul
;PCODE: $00000163 VOL: 0
;PCODE: $00000164 VOL: 0
; 0000 01D7     S+=1;  //incrementeaza contor secunde
;PCODE: $00000165 VOL: 0
;PCODE: $00000166 VOL: 0
;PCODE: $00000167 VOL: 0
; 0000 01D8 
; 0000 01D9     if(S!=60) return;
;PCODE: $00000168 VOL: 0
;PCODE: $00000169 VOL: 0
;PCODE: $0000016A VOL: 0
;PCODE: $0000016B VOL: 0
; 0000 01DA     S = 0;//se reseteaza nr de secunde
;PCODE: $0000016C VOL: 0
;PCODE: $0000016D VOL: 0
;PCODE: $0000016E VOL: 0
; 0000 01DB     M += 1; //incrementeaza contor minute
;PCODE: $0000016F VOL: 0
;PCODE: $00000170 VOL: 0
;PCODE: $00000171 VOL: 0
; 0000 01DC 
; 0000 01DD     if(M!=60) return;
;PCODE: $00000172 VOL: 0
;PCODE: $00000173 VOL: 0
;PCODE: $00000174 VOL: 0
;PCODE: $00000175 VOL: 0
; 0000 01DE     M = 0;
;PCODE: $00000176 VOL: 0
;PCODE: $00000177 VOL: 0
;PCODE: $00000178 VOL: 0
; 0000 01DF     H += 1;
;PCODE: $00000179 VOL: 0
;PCODE: $0000017A VOL: 0
;PCODE: $0000017B VOL: 0
; 0000 01E0 
; 0000 01E1     if(H!=24) return;
;PCODE: $0000017C VOL: 0
;PCODE: $0000017D VOL: 0
;PCODE: $0000017E VOL: 0
;PCODE: $0000017F VOL: 0
; 0000 01E2     H = 0;
;PCODE: $00000180 VOL: 0
;PCODE: $00000181 VOL: 0
;PCODE: $00000182 VOL: 0
; 0000 01E3     Z += 1;
;PCODE: $00000183 VOL: 0
;PCODE: $00000184 VOL: 0
;PCODE: $00000185 VOL: 0
; 0000 01E4 
; 0000 01E5     if (Z == 7) Z = 0;
;PCODE: $00000186 VOL: 0
;PCODE: $00000187 VOL: 0
;PCODE: $00000188 VOL: 0
;PCODE: $00000189 VOL: 0
;PCODE: $0000018A VOL: 0
; 0000 01E6     return;
;PCODE: $0000018B VOL: 0
;PCODE: $0000018C VOL: 0
; 0000 01E7 }
;PCODE: $0000018D VOL: 0
;
;void CLS()
; 0000 01EA {
;PCODE: $0000018E VOL: 0
;PCODE: $0000018F VOL: 0
; 0000 01EB     //exemplu
; 0000 01EC     // Ziua 3, ora 8, min 6, sec 3
; 0000 01ED     //0x03080603
; 0000 01EE     long int now = (Z<<24) | (H<<16) | (M<<8) | S;
; 0000 01EF     long int *adr = TABA[Q];
; 0000 01F0     char ready = 0;
; 0000 01F1     int i = 0;
; 0000 01F2 
; 0000 01F3     while (!ready)
;PCODE: $00000190 VOL: 0
;PCODE: $00000191 VOL: 0
;	now -> Y+6
;	*adr -> R16,R17
;	ready -> R19
;	i -> R20,R21
;PCODE: $00000192 VOL: 0
;PCODE: $00000193 VOL: 0
;PCODE: $00000194 VOL: 0
;PCODE: $00000195 VOL: 0
;PCODE: $00000196 VOL: 0
;PCODE: $00000197 VOL: 0
;PCODE: $00000198 VOL: 0
;PCODE: $00000199 VOL: 0
;PCODE: $0000019A VOL: 0
;PCODE: $0000019B VOL: 0
;PCODE: $0000019C VOL: 0
;PCODE: $0000019D VOL: 0
;PCODE: $0000019E VOL: 0
;PCODE: $0000019F VOL: 0
;PCODE: $000001A0 VOL: 0
;PCODE: $000001A1 VOL: 0
;PCODE: $000001A2 VOL: 0
;PCODE: $000001A3 VOL: 0
;PCODE: $000001A4 VOL: 0
;PCODE: $000001A5 VOL: 0
;PCODE: $000001A6 VOL: 0
;PCODE: $000001A7 VOL: 0
;PCODE: $000001A8 VOL: 0
;PCODE: $000001A9 VOL: 0
;PCODE: $000001AA VOL: 0
;PCODE: $000001AB VOL: 0
;PCODE: $000001AC VOL: 0
;PCODE: $000001AD VOL: 0
;PCODE: $000001AE VOL: 0
;PCODE: $000001AF VOL: 0
; 0000 01F4     {
; 0000 01F5         if (now == adr[i]) {
;PCODE: $000001B0 VOL: 0
;PCODE: $000001B1 VOL: 0
;PCODE: $000001B2 VOL: 0
;PCODE: $000001B3 VOL: 0
;PCODE: $000001B4 VOL: 0
;PCODE: $000001B5 VOL: 0
;PCODE: $000001B6 VOL: 0
;PCODE: $000001B7 VOL: 0
; 0000 01F6             Q = adr[i + 1];
;PCODE: $000001B8 VOL: 0
;PCODE: $000001B9 VOL: 0
;PCODE: $000001BA VOL: 0
;PCODE: $000001BB VOL: 0
;PCODE: $000001BC VOL: 0
;PCODE: $000001BD VOL: 0
; 0000 01F7             ready = 1;  // Stop iterating through while
;PCODE: $000001BE VOL: 0
;PCODE: $000001BF VOL: 0
; 0000 01F8         }
; 0000 01F9         else if (adr[i] == Ter) ready = 1;
;PCODE: $000001C0 VOL: 0
;PCODE: $000001C1 VOL: 0
;PCODE: $000001C2 VOL: 0
;PCODE: $000001C3 VOL: 0
;PCODE: $000001C4 VOL: 0
;PCODE: $000001C5 VOL: 0
;PCODE: $000001C6 VOL: 0
;PCODE: $000001C7 VOL: 0
;PCODE: $000001C8 VOL: 0
;PCODE: $000001C9 VOL: 0
;PCODE: $000001CA VOL: 0
; 0000 01FA         else i = i+2;
;PCODE: $000001CB VOL: 0
;PCODE: $000001CC VOL: 0
;PCODE: $000001CD VOL: 0
;PCODE: $000001CE VOL: 0
; 0000 01FB     }
;PCODE: $000001CF VOL: 0
;PCODE: $000001D0 VOL: 0
;PCODE: $000001D1 VOL: 0
;PCODE: $000001D2 VOL: 0
; 0000 01FC }
;PCODE: $000001D3 VOL: 0
;PCODE: $000001D4 VOL: 0
;PCODE: $000001D5 VOL: 0
;PCODE: $000001D6 VOL: 0
;
;//void DisplayInfo()
;//{
;//    DisplayConsumptionDisplayMode();
;//    DisplayPowerLevel();  //de sters asta
;//}
;
;//void DisplayPowerLevel()
;//{
;//   char out;
;
;//   if (!PowerLevel)          PowerLevel = 0 kW
;//   {
;//        out = CLC_LEVEL[0];
;//   }
;//   else if (PowerLevel < 2.5)    0 < PowerLevel < 2.5 kW
;//   {
;//        out = CLC_LEVEL[1];
;//   }
;//   else if (PowerLevel < 5)      2.5 <= PowerLevel < 5 kW
;//   {
;//        out = CLC_LEVEL[2];
;//   }
;//   else if (PowerLevel < 7.5)    5 <= PowerLevel < 7.5 kW
;//   {
;//        out = CLC_LEVEL[3];
;//   }
;//   else                          PowerLvel >= 7.5 kW
;//   {
;//        out = CLC_LEVEL[4];
;//   }
;
; //  if (!PowerLevel)         // PowerLevel = 0 kW
; //  {
; //       out = CLC_LEVEL[0];
; //  }
; //  else if (PowerLevel < 3)   // 0 < PowerLevel < 3 kW
; //  {
; //       out = CLC_LEVEL[1];
; //  }
; //  else if (PowerLevel < 6)     // 3 <= PowerLevel < 6 kW
; //  {
; //       out = CLC_LEVEL[2];
; //  }
; //  else                         // PowerLvel >= 6 kW
; //  {
; //       out = CLC_LEVEL[3];
; //  }
;
;   // Delete PB7-PB5
; //  PORTB &= 0x1f;
;
;   // Display out on PB7-PB5
;  // PORTB |= out;
;//}
;
;void DisplayConsumptionDisplayMode()
; 0000 0236 {
;PCODE: $000001D7 VOL: 0
;PCODE: $000001D8 VOL: 0
; 0000 0237     char out;
; 0000 0238 
; 0000 0239     if (MODE == 1)  // Working without ranges
;PCODE: $000001D9 VOL: 0
;	out -> R17
;PCODE: $000001DA VOL: 0
;PCODE: $000001DB VOL: 0
;PCODE: $000001DC VOL: 0
; 0000 023A     {
; 0000 023B 
; 0000 023C         // Clear PB4-0
; 0000 023D         PORTB &= 0xE0;
;PCODE: $000001DD VOL: 0
;PCODE: $000001DE VOL: 0
;PCODE: $000001DF VOL: 0
; 0000 023E 
; 0000 023F         // Display on PB4
; 0000 0240         PORTB |= 0x10;
;PCODE: $000001E0 VOL: 0
;PCODE: $000001E1 VOL: 0
; 0000 0241 
; 0000 0242         return;
;PCODE: $000001E2 VOL: 0
;PCODE: $000001E3 VOL: 0
; 0000 0243     }
; 0000 0244 
; 0000 0245     switch(S3)
;PCODE: $000001E4 VOL: 0
;PCODE: $000001E5 VOL: 0
;PCODE: $000001E6 VOL: 0
; 0000 0246     {
; 0000 0247         case 0:
;PCODE: $000001E7 VOL: 0
;PCODE: $000001E8 VOL: 0
; 0000 0248         {
; 0000 0249             if (CA == 0)            // Pressed CA
;PCODE: $000001E9 VOL: 0
;PCODE: $000001EA VOL: 0
;PCODE: $000001EB VOL: 0
; 0000 024A             {
; 0000 024B                 S3 = 1;
;PCODE: $000001EC VOL: 0
;PCODE: $000001ED VOL: 0
; 0000 024C             }
; 0000 024D             break;
;PCODE: $000001EE VOL: 0
;PCODE: $000001EF VOL: 0
; 0000 024E         }
; 0000 024F         case 1:                 // Released CA
;PCODE: $000001F0 VOL: 0
;PCODE: $000001F1 VOL: 0
;PCODE: $000001F2 VOL: 0
; 0000 0250         {
; 0000 0251             if (CA)
;PCODE: $000001F3 VOL: 0
;PCODE: $000001F4 VOL: 0
;PCODE: $000001F5 VOL: 0
; 0000 0252             {
; 0000 0253                 S3 = 2;
;PCODE: $000001F6 VOL: 0
;PCODE: $000001F7 VOL: 0
; 0000 0254                 Q1 = 1;
;PCODE: $000001F8 VOL: 0
;PCODE: $000001F9 VOL: 0
; 0000 0255             }
; 0000 0256             break;
;PCODE: $000001FA VOL: 0
;PCODE: $000001FB VOL: 0
; 0000 0257         }
; 0000 0258         case 2:                //  Pressed CA
;PCODE: $000001FC VOL: 0
;PCODE: $000001FD VOL: 0
;PCODE: $000001FE VOL: 0
; 0000 0259         {
; 0000 025A             if (CA == 0)
;PCODE: $000001FF VOL: 0
;PCODE: $00000200 VOL: 0
;PCODE: $00000201 VOL: 0
; 0000 025B             {
; 0000 025C                 S3 = 3;
;PCODE: $00000202 VOL: 0
;PCODE: $00000203 VOL: 0
; 0000 025D             }
; 0000 025E             break;
;PCODE: $00000204 VOL: 0
;PCODE: $00000205 VOL: 0
; 0000 025F         }
; 0000 0260         case 3:                // Released CA
;PCODE: $00000206 VOL: 0
;PCODE: $00000207 VOL: 0
;PCODE: $00000208 VOL: 0
; 0000 0261         {
; 0000 0262             if (CA)
;PCODE: $00000209 VOL: 0
;PCODE: $0000020A VOL: 0
;PCODE: $0000020B VOL: 0
; 0000 0263             {
; 0000 0264                 S3 = 4;
;PCODE: $0000020C VOL: 0
;PCODE: $0000020D VOL: 0
; 0000 0265                 Q1 = 2;
;PCODE: $0000020E VOL: 0
;PCODE: $0000020F VOL: 0
; 0000 0266             }
; 0000 0267             break;
;PCODE: $00000210 VOL: 0
;PCODE: $00000211 VOL: 0
; 0000 0268         }
; 0000 0269         case 4:
;PCODE: $00000212 VOL: 0
;PCODE: $00000213 VOL: 0
;PCODE: $00000214 VOL: 0
; 0000 026A         {
; 0000 026B             if (CA == 0)
;PCODE: $00000215 VOL: 0
;PCODE: $00000216 VOL: 0
;PCODE: $00000217 VOL: 0
; 0000 026C             {
; 0000 026D                 S3 = 5;
;PCODE: $00000218 VOL: 0
;PCODE: $00000219 VOL: 0
; 0000 026E             }
; 0000 026F             break;
;PCODE: $0000021A VOL: 0
;PCODE: $0000021B VOL: 0
; 0000 0270         }
; 0000 0271         case 5:
;PCODE: $0000021C VOL: 0
;PCODE: $0000021D VOL: 0
;PCODE: $0000021E VOL: 0
; 0000 0272         {
; 0000 0273             if (CA)
;PCODE: $0000021F VOL: 0
;PCODE: $00000220 VOL: 0
;PCODE: $00000221 VOL: 0
; 0000 0274             {
; 0000 0275                 S3 = 6;
;PCODE: $00000222 VOL: 0
;PCODE: $00000223 VOL: 0
; 0000 0276                 Q1 = 3;
;PCODE: $00000224 VOL: 0
;PCODE: $00000225 VOL: 0
; 0000 0277             }
; 0000 0278             break;
;PCODE: $00000226 VOL: 0
;PCODE: $00000227 VOL: 0
; 0000 0279         }
; 0000 027A         case 6:
;PCODE: $00000228 VOL: 0
;PCODE: $00000229 VOL: 0
;PCODE: $0000022A VOL: 0
; 0000 027B         {
; 0000 027C             if (CA == 0)
;PCODE: $0000022B VOL: 0
;PCODE: $0000022C VOL: 0
;PCODE: $0000022D VOL: 0
; 0000 027D             {
; 0000 027E                 S3 = 7;
;PCODE: $0000022E VOL: 0
;PCODE: $0000022F VOL: 0
; 0000 027F             }
; 0000 0280             break;
;PCODE: $00000230 VOL: 0
;PCODE: $00000231 VOL: 0
; 0000 0281         }
; 0000 0282         case 7:
;PCODE: $00000232 VOL: 0
;PCODE: $00000233 VOL: 0
;PCODE: $00000234 VOL: 0
; 0000 0283         {
; 0000 0284             if (CA)
;PCODE: $00000235 VOL: 0
;PCODE: $00000236 VOL: 0
;PCODE: $00000237 VOL: 0
; 0000 0285             {
; 0000 0286                 S3 = 0;
;PCODE: $00000238 VOL: 0
; 0000 0287                 Q1 = 0;
;PCODE: $00000239 VOL: 0
; 0000 0288             }
; 0000 0289             break;
;PCODE: $0000023A VOL: 0
;PCODE: $0000023B VOL: 0
; 0000 028A         }
; 0000 028B     }
;PCODE: $0000023C VOL: 0
; 0000 028C 
; 0000 028D      out = CLC_RANGE_OUTPUT[Q1] | (CLC_RANGE_OUTPUT[Q] << 2);
;PCODE: $0000023D VOL: 0
;PCODE: $0000023E VOL: 0
;PCODE: $0000023F VOL: 0
;PCODE: $00000240 VOL: 0
;PCODE: $00000241 VOL: 0
;PCODE: $00000242 VOL: 0
;PCODE: $00000243 VOL: 0
;PCODE: $00000244 VOL: 0
;PCODE: $00000245 VOL: 0
;PCODE: $00000246 VOL: 0
;PCODE: $00000247 VOL: 0
; 0000 028E     // out = 0x0A;
; 0000 028F 
; 0000 0290     // Delete PB4-PB0
; 0000 0291     PORTB &= 0xE0;
;PCODE: $00000248 VOL: 0
;PCODE: $00000249 VOL: 0
;PCODE: $0000024A VOL: 0
; 0000 0292 
; 0000 0293     // Display out on PB3-PB0
; 0000 0294     PORTB |= out;
;PCODE: $0000024B VOL: 0
;PCODE: $0000024C VOL: 0
;PCODE: $0000024D VOL: 0
; 0000 0295 }
;PCODE: $0000024E VOL: 0
;PCODE: $0000024F VOL: 0
;PCODE: $00000250 VOL: 0
;////////////////////////////////////////
;
;
