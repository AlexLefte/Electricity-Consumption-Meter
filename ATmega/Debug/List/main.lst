
AVRASM ver. 2.1.30  F:\AN 3 SEM 2\P2-ZOICAN\chestii alexutu\Electricity-Consumption-Meter\ATmega\Debug\List\main.asm Sun Mar 26 19:24:14 2023

F:\AN 3 SEM 2\P2-ZOICAN\chestii alexutu\Electricity-Consumption-Meter\ATmega\Debug\List\main.asm(1420): warning: Register r4 already defined by the .DEF directive
F:\AN 3 SEM 2\P2-ZOICAN\chestii alexutu\Electricity-Consumption-Meter\ATmega\Debug\List\main.asm(1421): warning: Register r3 already defined by the .DEF directive
F:\AN 3 SEM 2\P2-ZOICAN\chestii alexutu\Electricity-Consumption-Meter\ATmega\Debug\List\main.asm(1422): warning: Register r6 already defined by the .DEF directive
F:\AN 3 SEM 2\P2-ZOICAN\chestii alexutu\Electricity-Consumption-Meter\ATmega\Debug\List\main.asm(1423): warning: Register r5 already defined by the .DEF directive
F:\AN 3 SEM 2\P2-ZOICAN\chestii alexutu\Electricity-Consumption-Meter\ATmega\Debug\List\main.asm(1424): warning: Register r8 already defined by the .DEF directive
F:\AN 3 SEM 2\P2-ZOICAN\chestii alexutu\Electricity-Consumption-Meter\ATmega\Debug\List\main.asm(1425): warning: Register r7 already defined by the .DEF directive
F:\AN 3 SEM 2\P2-ZOICAN\chestii alexutu\Electricity-Consumption-Meter\ATmega\Debug\List\main.asm(1426): warning: Register r10 already defined by the .DEF directive
F:\AN 3 SEM 2\P2-ZOICAN\chestii alexutu\Electricity-Consumption-Meter\ATmega\Debug\List\main.asm(1427): warning: Register r9 already defined by the .DEF directive
F:\AN 3 SEM 2\P2-ZOICAN\chestii alexutu\Electricity-Consumption-Meter\ATmega\Debug\List\main.asm(1428): warning: Register r12 already defined by the .DEF directive
F:\AN 3 SEM 2\P2-ZOICAN\chestii alexutu\Electricity-Consumption-Meter\ATmega\Debug\List\main.asm(1429): warning: Register r11 already defined by the .DEF directive
F:\AN 3 SEM 2\P2-ZOICAN\chestii alexutu\Electricity-Consumption-Meter\ATmega\Debug\List\main.asm(1430): warning: Register r14 already defined by the .DEF directive
F:\AN 3 SEM 2\P2-ZOICAN\chestii alexutu\Electricity-Consumption-Meter\ATmega\Debug\List\main.asm(1431): warning: Register r13 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.49a 
                 ;(C) Copyright 1998-2022 Pavel Haiduc, HP InfoTech S.R.L.
                 ;http://www.hpinfotech.ro
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega164A
                 ;Program type           : Application
                 ;Clock frequency        : 10.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 256 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Mode 2
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega164A
                 	#pragma AVRPART MEMORY PROG_FLASH 16384
                 	#pragma AVRPART MEMORY EEPROM 512
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 1024
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x100
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU EECR=0x1F
                 	.EQU EEDR=0x20
                 	.EQU EEARL=0x21
                 	.EQU EEARH=0x22
                 	.EQU SPSR=0x2D
                 	.EQU SPDR=0x2E
                 	.EQU SMCR=0x33
                 	.EQU MCUSR=0x34
                 	.EQU MCUCR=0x35
                 	.EQU WDTCSR=0x60
                 	.EQU UCSR0A=0xC0
                 	.EQU UDR0=0xC6
                 	.EQU SPMCSR=0x37
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 	.EQU GPIOR0=0x1E
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0100
                 	.EQU __SRAM_END=0x04FF
                 	.EQU __DSTACK_SIZE=0x0100
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.EQU __FLASH_PAGE_SIZE=0x40
                 	.EQU __EEPROM_PAGE_SIZE=0x04
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETW1P
                 	LD   R30,X+
                 	LD   R31,X
                 	SBIW R26,1
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD1P_INC
                 	LD   R30,X+
                 	LD   R31,X+
                 	LD   R22,X+
                 	LD   R23,X+
                 	.ENDM
                 
                 	.MACRO __GETD1P_DEC
                 	LD   R23,-X
                 	LD   R22,-X
                 	LD   R31,-X
                 	LD   R30,-X
                 	.ENDM
                 
                 	.MACRO __PUTDP1
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTDP1_DEC
                 	ST   -X,R23
                 	ST   -X,R22
                 	ST   -X,R31
                 	ST   -X,R30
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __CPD10
                 	SBIW R30,0
                 	SBCI R22,0
                 	SBCI R23,0
                 	.ENDM
                 
                 	.MACRO __CPD20
                 	SBIW R26,0
                 	SBCI R24,0
                 	SBCI R25,0
                 	.ENDM
                 
                 	.MACRO __ADDD12
                 	ADD  R30,R26
                 	ADC  R31,R27
                 	ADC  R22,R24
                 	ADC  R23,R25
                 	.ENDM
                 
                 	.MACRO __ADDD21
                 	ADD  R26,R30
                 	ADC  R27,R31
                 	ADC  R24,R22
                 	ADC  R25,R23
                 	.ENDM
                 
                 	.MACRO __SUBD12
                 	SUB  R30,R26
                 	SBC  R31,R27
                 	SBC  R22,R24
                 	SBC  R23,R25
                 	.ENDM
                 
                 	.MACRO __SUBD21
                 	SUB  R26,R30
                 	SBC  R27,R31
                 	SBC  R24,R22
                 	SBC  R25,R23
                 	.ENDM
                 
                 	.MACRO __ANDD12
                 	AND  R30,R26
                 	AND  R31,R27
                 	AND  R22,R24
                 	AND  R23,R25
                 	.ENDM
                 
                 	.MACRO __ORD12
                 	OR   R30,R26
                 	OR   R31,R27
                 	OR   R22,R24
                 	OR   R23,R25
                 	.ENDM
                 
                 	.MACRO __XORD12
                 	EOR  R30,R26
                 	EOR  R31,R27
                 	EOR  R22,R24
                 	EOR  R23,R25
                 	.ENDM
                 
                 	.MACRO __XORD21
                 	EOR  R26,R30
                 	EOR  R27,R31
                 	EOR  R24,R22
                 	EOR  R25,R23
                 	.ENDM
                 
                 	.MACRO __COMD1
                 	COM  R30
                 	COM  R31
                 	COM  R22
                 	COM  R23
                 	.ENDM
                 
                 	.MACRO __MULD2_2
                 	LSL  R26
                 	ROL  R27
                 	ROL  R24
                 	ROL  R25
                 	.ENDM
                 
                 	.MACRO __LSRD1
                 	LSR  R23
                 	ROR  R22
                 	ROR  R31
                 	ROR  R30
                 	.ENDM
                 
                 	.MACRO __LSLD1
                 	LSL  R30
                 	ROL  R31
                 	ROL  R22
                 	ROL  R23
                 	.ENDM
                 
                 	.MACRO __ASRB4
                 	ASR  R30
                 	ASR  R30
                 	ASR  R30
                 	ASR  R30
                 	.ENDM
                 
                 	.MACRO __ASRW8
                 	MOV  R30,R31
                 	CLR  R31
                 	SBRC R30,7
                 	SER  R31
                 	.ENDM
                 
                 	.MACRO __LSRD16
                 	MOV  R30,R22
                 	MOV  R31,R23
                 	LDI  R22,0
                 	LDI  R23,0
                 	.ENDM
                 
                 	.MACRO __LSLD16
                 	MOV  R22,R30
                 	MOV  R23,R31
                 	LDI  R30,0
                 	LDI  R31,0
                 	.ENDM
                 
                 	.MACRO __CWD1
                 	MOV  R22,R31
                 	ADD  R22,R22
                 	SBC  R22,R22
                 	MOV  R23,R22
                 	.ENDM
                 
                 	.MACRO __CWD2
                 	MOV  R24,R27
                 	ADD  R24,R24
                 	SBC  R24,R24
                 	MOV  R25,R24
                 	.ENDM
                 
                 	.MACRO __SETMSD1
                 	SER  R31
                 	SER  R22
                 	SER  R23
                 	.ENDM
                 
                 	.MACRO __ADDW1R15
                 	CLR  R0
                 	ADD  R30,R15
                 	ADC  R31,R0
                 	.ENDM
                 
                 	.MACRO __ADDW2R15
                 	CLR  R0
                 	ADD  R26,R15
                 	ADC  R27,R0
                 	.ENDM
                 
                 	.MACRO __EQB12
                 	CP   R30,R26
                 	LDI  R30,1
                 	BREQ PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __NEB12
                 	CP   R30,R26
                 	LDI  R30,1
                 	BRNE PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __LEB12
                 	CP   R30,R26
                 	LDI  R30,1
                 	BRGE PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __GEB12
                 	CP   R26,R30
                 	LDI  R30,1
                 	BRGE PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __LTB12
                 	CP   R26,R30
                 	LDI  R30,1
                 	BRLT PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __GTB12
                 	CP   R30,R26
                 	LDI  R30,1
                 	BRLT PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __LEB12U
                 	CP   R30,R26
                 	LDI  R30,1
                 	BRSH PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __GEB12U
                 	CP   R26,R30
                 	LDI  R30,1
                 	BRSH PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __LTB12U
                 	CP   R26,R30
                 	LDI  R30,1
                 	BRLO PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __GTB12U
                 	CP   R30,R26
                 	LDI  R30,1
                 	BRLO PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __CPW01
                 	CLR  R0
                 	CP   R0,R30
                 	CPC  R0,R31
                 	.ENDM
                 
                 	.MACRO __CPW02
                 	CLR  R0
                 	CP   R0,R26
                 	CPC  R0,R27
                 	.ENDM
                 
                 	.MACRO __CPD12
                 	CP   R30,R26
                 	CPC  R31,R27
                 	CPC  R22,R24
                 	CPC  R23,R25
                 	.ENDM
                 
                 	.MACRO __CPD21
                 	CP   R26,R30
                 	CPC  R27,R31
                 	CPC  R24,R22
                 	CPC  R25,R23
                 	.ENDM
                 
                 	.MACRO __BSTB1
                 	CLT
                 	TST  R30
                 	BREQ PC+2
                 	SET
                 	.ENDM
                 
                 	.MACRO __LNEGB1
                 	TST  R30
                 	LDI  R30,1
                 	BREQ PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __LNEGW1
                 	OR   R30,R31
                 	LDI  R30,1
                 	BREQ PC+2
                 	LDI  R30,0
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2M
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	CALL __GETW1Z
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	CALL __GETD1Z
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __GETW2X
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __GETD2X
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _S1=R4
                 	.DEF _Z=R3
                 	.DEF _H=R6
                 	.DEF _M=R5
                 	.DEF _S=R8
                 	.DEF _cnt_time=R7
                 	.DEF _T_SEC=R10
                 	.DEF _S2=R9
                 	.DEF _PULSE=R12
                 	.DEF _MODE=R11
                 	.DEF _modeFlag=R14
                 	.DEF _Q=R13
                 
                 ;GPIOR0 INITIALIZATION VALUE
                 	.EQU __GPIOR0_INIT=0x00
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 00b7 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 00e6 	JMP  _timer0_ovf_isr
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
00002a 940c 0000 	JMP  0x00
00002c 940c 0000 	JMP  0x00
00002e 940c 0000 	JMP  0x00
000030 940c 0000 	JMP  0x00
000032 940c 0000 	JMP  0x00
000034 940c 0000 	JMP  0x00
000036 940c 0000 	JMP  0x00
000038 940c 0000 	JMP  0x00
00003a 940c 0000 	JMP  0x00
00003c 940c 0000 	JMP  0x00
                 
                 _DIGITS:
00003e f9c0
00003f b0a4
000040 9299
000041 f882      	.DB  0xC0,0xF9,0xA4,0xB0,0x99,0x92,0x82,0xF8
000042 9080      	.DB  0x80,0x90
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
000043 0000
000044 0000      	.DB  0x0,0x0,0x0,0x0
000045 0000
000046 0000      	.DB  0x0,0x0,0x0,0x0
000047 0000
000048 0100      	.DB  0x0,0x0,0x0,0x1
                 
                 _0x3:
000049 0000
00004a 0008
00004b 0001
00004c 0000      	.DB  0x0,0x0,0x8,0x0,0x1,0x0,0x0,0x0
00004d 0000
00004e 0008
00004f 0001
000050 0000      	.DB  0x0,0x0,0x8,0x0,0x1,0x0,0x0,0x0
000051 0000
000052 0008
000053 0001
000054 0000      	.DB  0x0,0x0,0x8,0x0,0x1,0x0,0x0,0x0
000055 0000
000056 0008
000057 0001
000058 0000      	.DB  0x0,0x0,0x8,0x0,0x1,0x0,0x0,0x0
000059 0000
00005a 0008
00005b 0001
00005c 0000      	.DB  0x0,0x0,0x8,0x0,0x1,0x0,0x0,0x0
00005d 0000
00005e 1000      	.DB  0x0,0x0,0x0,0x10
                 _0x4:
00005f 0000
000060 0010
000061 0002
000062 0000      	.DB  0x0,0x0,0x10,0x0,0x2,0x0,0x0,0x0
000063 0000
000064 0010
000065 0002
000066 0000      	.DB  0x0,0x0,0x10,0x0,0x2,0x0,0x0,0x0
000067 0000
000068 0010
000069 0002
00006a 0000      	.DB  0x0,0x0,0x10,0x0,0x2,0x0,0x0,0x0
00006b 0000
00006c 0010
00006d 0002
00006e 0000      	.DB  0x0,0x0,0x10,0x0,0x2,0x0,0x0,0x0
00006f 0000
000070 0010
000071 0002
000072 0000      	.DB  0x0,0x0,0x10,0x0,0x2,0x0,0x0,0x0
000073 0000
000074 1000
F:\AN 3 SEM 2\P2-ZOICAN\chestii alexutu\Electricity-Consumption-Meter\ATmega\Debug\List\main.asm(1498): warning: .cseg .db misalignment - padding zero byte
000075 0001      	.DB  0x0,0x0,0x0,0x10,0x1
                 _0x5:
000076 0000
000077 0100
000078 0000
000079 0000      	.DB  0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0
00007a 0000
00007b 0200
00007c 0000
00007d 0000      	.DB  0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x0
00007e 0000
00007f 0300
000080 0000
000081 0000      	.DB  0x0,0x0,0x0,0x3,0x0,0x0,0x0,0x0
000082 0000
000083 0400
000084 0000
000085 0000      	.DB  0x0,0x0,0x0,0x4,0x0,0x0,0x0,0x0
000086 0000
000087 0500
000088 0003
000089 0000      	.DB  0x0,0x0,0x0,0x5,0x3,0x0,0x0,0x0
00008a 0000
00008b 1000
F:\AN 3 SEM 2\P2-ZOICAN\chestii alexutu\Electricity-Consumption-Meter\ATmega\Debug\List\main.asm(1505): warning: .cseg .db misalignment - padding zero byte
00008c 0002      	.DB  0x0,0x0,0x0,0x10,0x2
                 _0x6:
00008d 0000
00008e 0000
00008f 0000
000090 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000091 0000
000092 1000
F:\AN 3 SEM 2\P2-ZOICAN\chestii alexutu\Electricity-Consumption-Meter\ATmega\Debug\List\main.asm(1508): warning: .cseg .db misalignment - padding zero byte
000093 0003      	.DB  0x0,0x0,0x0,0x10,0x3
                 _0x7:
000094 0100
000095 0302      	.DB  0x0,0x1,0x2,0x3
                 _0x8:
000096 0200
000097 0230
000098 0260
000099 0290      	.DB  LOW(_A0),HIGH(_A0),LOW(_A1),HIGH(_A1),LOW(_A2),HIGH(_A2),LOW(_A3),HIGH(_A3)
                 _0x9:
00009a 2000
00009b e060      	.DB  0x0,0x20,0x60,0xE0
                 _0xA:
00009c 0201
F:\AN 3 SEM 2\P2-ZOICAN\chestii alexutu\Electricity-Consumption-Meter\ATmega\Debug\List\main.asm(1516): warning: .cseg .db misalignment - padding zero byte
00009d 0003      	.DB  0x1,0x2,0x3
                 
                 __GLOBAL_INI_TBL:
00009e 000c      	.DW  0x0C
00009f 0003      	.DW  0x03
0000a0 0086      	.DW  __REG_VARS*2
                 
0000a1 002c      	.DW  0x2C
0000a2 0200      	.DW  _A0
0000a3 0092      	.DW  _0x3*2
                 
0000a4 002d      	.DW  0x2D
0000a5 0230      	.DW  _A1
0000a6 00be      	.DW  _0x4*2
                 
0000a7 002d      	.DW  0x2D
0000a8 0260      	.DW  _A2
0000a9 00ec      	.DW  _0x5*2
                 
0000aa 000d      	.DW  0x0D
0000ab 0290      	.DW  _A3
0000ac 011a      	.DW  _0x6*2
                 
0000ad 0008      	.DW  0x08
0000ae 02a0      	.DW  _TABA
0000af 012c      	.DW  _0x8*2
                 
0000b0 0004      	.DW  0x04
0000b1 02ba      	.DW  _CLC_LEVEL
0000b2 0134      	.DW  _0x9*2
                 
0000b3 0003      	.DW  0x03
0000b4 02be      	.DW  _CLC_RANGE_OUTPUT
0000b5 0138      	.DW  _0xA*2
                 
                 _0xFFFFFFFF:
0000b6 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
0000b7 94f8      	CLI
0000b8 27ee      	CLR  R30
0000b9 bbef      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
0000ba e0f1      	LDI  R31,1
0000bb bff5      	OUT  MCUCR,R31
0000bc bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
0000bd e08d      	LDI  R24,(14-2)+1
0000be e0a2      	LDI  R26,2
0000bf 27bb      	CLR  R27
                 __CLEAR_REG:
0000c0 93ed      	ST   X+,R30
0000c1 958a      	DEC  R24
0000c2 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
0000c3 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
0000c4 e094      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
0000c5 e0a0      	LDI  R26,LOW(__SRAM_START)
0000c6 e0b1      	LDI  R27,HIGH(__SRAM_START)
                 __CLEAR_SRAM:
0000c7 93ed      	ST   X+,R30
0000c8 9701      	SBIW R24,1
0000c9 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
0000ca e3ec      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
0000cb e0f1      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
0000cc 9185      	LPM  R24,Z+
0000cd 9195      	LPM  R25,Z+
0000ce 9700      	SBIW R24,0
0000cf f061      	BREQ __GLOBAL_INI_END
0000d0 91a5      	LPM  R26,Z+
0000d1 91b5      	LPM  R27,Z+
0000d2 9005      	LPM  R0,Z+
0000d3 9015      	LPM  R1,Z+
0000d4 01bf      	MOVW R22,R30
0000d5 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
0000d6 9005      	LPM  R0,Z+
0000d7 920d      	ST   X+,R0
0000d8 9701      	SBIW R24,1
0000d9 f7e1      	BRNE __GLOBAL_INI_LOOP
0000da 01fb      	MOVW R30,R22
0000db cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;GPIOR0 INITIALIZATION
0000dc e0e0      	LDI  R30,__GPIOR0_INIT
0000dd bbee      	OUT  GPIOR0,R30
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
0000de efef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
0000df bfed      	OUT  SPL,R30
0000e0 e0e4      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
0000e1 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
0000e2 e0c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
0000e3 e0d2      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
0000e4 940c 010e 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0x00
                 
                 	.DSEG
                 	.ORG 0x200
                 
                 	.CSEG
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x01
                 	.EQU __sm_mask=0x0E
                 	.EQU __sm_powerdown=0x04
                 	.EQU __sm_powersave=0x06
                 	.EQU __sm_standby=0x0C
                 	.EQU __sm_ext_standby=0x0E
                 	.EQU __sm_adc_noise_red=0x02
                 	.SET power_ctrl_reg=smcr
                 	#endif
                 
                 	.DSEG
                 ;void Init();
                 ;void UpdateConsumption();
                 ;void DisplayConsumption();
                 ;void DisplayDigit(char currentDisplay, char digit);
                 ;void UpdateTime();
                 ;void CLS();
                 ;void DisplayPowerLevel();
                 ;void DisplayConsumptionDisplayMode();
                 ;void DisplayInfo();
                 ;interrupt [19] void timer0_ovf_isr(void)
                 ; 0000 008C {
                 
                 	.CSEG
                 _timer0_ovf_isr:
                 ; .FSTART _timer0_ovf_isr
0000e6 920a      	ST   -Y,R0
0000e7 921a      	ST   -Y,R1
0000e8 92fa      	ST   -Y,R15
0000e9 936a      	ST   -Y,R22
0000ea 937a      	ST   -Y,R23
0000eb 938a      	ST   -Y,R24
0000ec 939a      	ST   -Y,R25
0000ed 93aa      	ST   -Y,R26
0000ee 93ba      	ST   -Y,R27
0000ef 93ea      	ST   -Y,R30
0000f0 93fa      	ST   -Y,R31
0000f1 b7ef      	IN   R30,SREG
0000f2 93ea      	ST   -Y,R30
                 ; 0000 008D // Reinitialize Timer 0 value
                 ; 0000 008E TCNT0=0x3C;
0000f3 e3ec      	LDI  R30,LOW(60)
0000f4 bde6      	OUT  0x26,R30
                 ; 0000 008F //Update current time
                 ; 0000 0090 UpdateTime();
0000f5 d127      	RCALL _UpdateTime
                 ; 0000 0091 
                 ; 0000 0092 // Update CA
                 ; 0000 0093 CA = (PORTD & 0x20) >> 5;
0000f6 b1eb      	IN   R30,0xB
0000f7 72e0      	ANDI R30,LOW(0x20)
0000f8 e0f0      	LDI  R31,0
0000f9 95f5      	ASR  R31
0000fa 95e7      	ROR  R30
0000fb d270      	RCALL __ASRW4
0000fc 93e0 02b8 	STS  _CA,R30
                 ; 0000 0094 
                 ; 0000 0095 //DisplayInfo
                 ; 0000 0096 DisplayInfo();
0000fe d18f      	RCALL _DisplayInfo
                 ; 0000 0097 
                 ; 0000 0098 // Check for pulses coming from ADSP
                 ; 0000 0099 UpdateConsumption();
0000ff d077      	RCALL _UpdateConsumption
                 ; 0000 009A }
000100 91e9      	LD   R30,Y+
000101 bfef      	OUT  SREG,R30
000102 91f9      	LD   R31,Y+
000103 91e9      	LD   R30,Y+
000104 91b9      	LD   R27,Y+
000105 91a9      	LD   R26,Y+
000106 9199      	LD   R25,Y+
000107 9189      	LD   R24,Y+
000108 9179      	LD   R23,Y+
000109 9169      	LD   R22,Y+
00010a 90f9      	LD   R15,Y+
00010b 9019      	LD   R1,Y+
00010c 9009      	LD   R0,Y+
00010d 9518      	RETI
                 ; .FEND
                 ;void main(void)
                 ; 0000 009E {
                 _main:
                 ; .FSTART _main
                 ; 0000 009F // Declare your local variables here
                 ; 0000 00A0 
                 ; 0000 00A1 // Crystal Oscillator division factor: 1
                 ; 0000 00A2 #pragma optsize-
                 ; 0000 00A3 CLKPR=(1<<CLKPCE);
00010e e8e0      	LDI  R30,LOW(128)
00010f 93e0 0061 	STS  97,R30
                 ; 0000 00A4 CLKPR=(0<<CLKPCE) | (0<<CLKPS3) | (0<<CLKPS2) | (0<<CLKPS1) | (0<<CLKPS0);
000111 e0e0      	LDI  R30,LOW(0)
000112 93e0 0061 	STS  97,R30
                 ; 0000 00A5 #ifdef _OPTIMIZE_SIZE_
                 ; 0000 00A6 #pragma optsize+
                 ; 0000 00A7 #endif
                 ; 0000 00A8 
                 ; 0000 00A9 // Input/Output Ports initialization
                 ; 0000 00AA // Port A initialization
                 ; 0000 00AB // Function: Bit7=Out Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 00AC DDRA=(1<<DDA7) | (0<<DDA6) | (0<<DDA5) | (0<<DDA4) | (0<<DDA3) | (0<<DDA2) | (0<<DDA1) | (0<<DDA0);
000114 e8e0      	LDI  R30,LOW(128)
000115 b9e1      	OUT  0x1,R30
                 ; 0000 00AD // State: Bit7=1 Bit6=P Bit5=P Bit4=P Bit3=P Bit2=P Bit1=P Bit0=P
                 ; 0000 00AE PORTA=(1<<PORTA7) | (1<<PORTA6) | (1<<PORTA5) | (1<<PORTA4) | (1<<PORTA3) | (1<<PORTA2) | (1<<PORTA1) | (1<<PORTA0);
000116 efef      	LDI  R30,LOW(255)
000117 b9e2      	OUT  0x2,R30
                 ; 0000 00AF 
                 ; 0000 00B0 // Port B initialization
                 ; 0000 00B1 // Function: Bit7=Out Bit6=Out Bit5=Out Bit4=Out Bit3=Out Bit2=Out Bit1=Out Bit0=Out
                 ; 0000 00B2 DDRB=(1<<DDB7) | (1<<DDB6) | (1<<DDB5) | (1<<DDB4) | (1<<DDB3) | (1<<DDB2) | (1<<DDB1) | (1<<DDB0);
000118 b9e4      	OUT  0x4,R30
                 ; 0000 00B3 // State: Bit7=1 Bit6=1 Bit5=1 Bit4=1 Bit3=1 Bit2=1 Bit1=1 Bit0=1
                 ; 0000 00B4 PORTB=(1<<PORTB7) | (1<<PORTB6) | (1<<PORTB5) | (1<<PORTB4) | (1<<PORTB3) | (1<<PORTB2) | (1<<PORTB1) | (1<<PORTB0);
000119 b9e5      	OUT  0x5,R30
                 ; 0000 00B5 
                 ; 0000 00B6 // Port C initialization
                 ; 0000 00B7 // Function: Bit7=Out Bit6=Out Bit5=Out Bit4=Out Bit3=Out Bit2=Out Bit1=Out Bit0=Out
                 ; 0000 00B8 DDRC=(1<<DDC7) | (1<<DDC6) | (1<<DDC5) | (1<<DDC4) | (1<<DDC3) | (1<<DDC2) | (1<<DDC1) | (1<<DDC0);
00011a b9e7      	OUT  0x7,R30
                 ; 0000 00B9 // State: Bit7=1 Bit6=1 Bit5=1 Bit4=1 Bit3=1 Bit2=1 Bit1=1 Bit0=1
                 ; 0000 00BA PORTC=(1<<PORTC7) | (1<<PORTC6) | (1<<PORTC5) | (1<<PORTC4) | (1<<PORTC3) | (1<<PORTC2) | (1<<PORTC1) | (1<<PORTC0);
00011b b9e8      	OUT  0x8,R30
                 ; 0000 00BB 
                 ; 0000 00BC // Port D initialization
                 ; 0000 00BD // Function: Bit7=In Bit6=In Bit5=Out Bit4=Out Bit3=Out Bit2=Out Bit1=Out Bit0=Out
                 ; 0000 00BE DDRD=(0<<DDD7) | (0<<DDD6) | (1<<DDD5) | (1<<DDD4) | (1<<DDD3) | (1<<DDD2) | (1<<DDD1) | (1<<DDD0);
00011c e3ef      	LDI  R30,LOW(63)
00011d b9ea      	OUT  0xA,R30
                 ; 0000 00BF // State: Bit7=T Bit6=T Bit5=1 Bit4=1 Bit3=1 Bit2=1 Bit1=1 Bit0=1
                 ; 0000 00C0 PORTD=(0<<PORTD7) | (0<<PORTD6) | (1<<PORTD5) | (1<<PORTD4) | (1<<PORTD3) | (1<<PORTD2) | (1<<PORTD1) | (1<<PORTD0);
00011e b9eb      	OUT  0xB,R30
                 ; 0000 00C1 
                 ; 0000 00C2 // Timer/Counter 0 initialization
                 ; 0000 00C3 // Clock source: System Clock
                 ; 0000 00C4 // Clock value: 9.766 kHz
                 ; 0000 00C5 // Mode: Normal top=0xFF
                 ; 0000 00C6 // OC0A output: Disconnected
                 ; 0000 00C7 // OC0B output: Disconnected
                 ; 0000 00C8 // Timer Period: 20.07 ms
                 ; 0000 00C9 TCCR0A=(0<<COM0A1) | (0<<COM0A0) | (0<<COM0B1) | (0<<COM0B0) | (0<<WGM01) | (0<<WGM00);
00011f e0e0      	LDI  R30,LOW(0)
000120 bde4      	OUT  0x24,R30
                 ; 0000 00CA TCCR0B=(0<<WGM02) | (1<<CS02) | (0<<CS01) | (1<<CS00);
000121 e0e5      	LDI  R30,LOW(5)
000122 bde5      	OUT  0x25,R30
                 ; 0000 00CB TCNT0=0x3C;
000123 e3ec      	LDI  R30,LOW(60)
000124 bde6      	OUT  0x26,R30
                 ; 0000 00CC OCR0A=0x00;
000125 e0e0      	LDI  R30,LOW(0)
000126 bde7      	OUT  0x27,R30
                 ; 0000 00CD OCR0B=0x00;
000127 bde8      	OUT  0x28,R30
                 ; 0000 00CE 
                 ; 0000 00CF // Timer/Counter 1 initialization
                 ; 0000 00D0 // Clock source: System Clock
                 ; 0000 00D1 // Clock value: Timer1 Stopped
                 ; 0000 00D2 // Mode: Normal top=0xFFFF
                 ; 0000 00D3 // OC1A output: Disconnected
                 ; 0000 00D4 // OC1B output: Disconnected
                 ; 0000 00D5 // Noise Canceler: Off
                 ; 0000 00D6 // Input Capture on Falling Edge
                 ; 0000 00D7 // Timer1 Overflow Interrupt: Off
                 ; 0000 00D8 // Input Capture Interrupt: Off
                 ; 0000 00D9 // Compare A Match Interrupt: Off
                 ; 0000 00DA // Compare B Match Interrupt: Off
                 ; 0000 00DB TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
000128 93e0 0080 	STS  128,R30
                 ; 0000 00DC TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (0<<CS11) | (0<<CS10);
00012a 93e0 0081 	STS  129,R30
                 ; 0000 00DD TCNT1H=0x00;
00012c 93e0 0085 	STS  133,R30
                 ; 0000 00DE TCNT1L=0x00;
00012e 93e0 0084 	STS  132,R30
                 ; 0000 00DF ICR1H=0x00;
000130 93e0 0087 	STS  135,R30
                 ; 0000 00E0 ICR1L=0x00;
000132 93e0 0086 	STS  134,R30
                 ; 0000 00E1 OCR1AH=0x00;
000134 93e0 0089 	STS  137,R30
                 ; 0000 00E2 OCR1AL=0x00;
000136 93e0 0088 	STS  136,R30
                 ; 0000 00E3 OCR1BH=0x00;
000138 93e0 008b 	STS  139,R30
                 ; 0000 00E4 OCR1BL=0x00;
00013a 93e0 008a 	STS  138,R30
                 ; 0000 00E5 
                 ; 0000 00E6 // Timer/Counter 2 initialization
                 ; 0000 00E7 // Clock source: System Clock
                 ; 0000 00E8 // Clock value: Timer2 Stopped
                 ; 0000 00E9 // Mode: Normal top=0xFF
                 ; 0000 00EA // OC2A output: Disconnected
                 ; 0000 00EB // OC2B output: Disconnected
                 ; 0000 00EC ASSR=(0<<EXCLK) | (0<<AS2);
00013c 93e0 00b6 	STS  182,R30
                 ; 0000 00ED TCCR2A=(0<<COM2A1) | (0<<COM2A0) | (0<<COM2B1) | (0<<COM2B0) | (0<<WGM21) | (0<<WGM20);
00013e 93e0 00b0 	STS  176,R30
                 ; 0000 00EE TCCR2B=(0<<WGM22) | (0<<CS22) | (0<<CS21) | (0<<CS20);
000140 93e0 00b1 	STS  177,R30
                 ; 0000 00EF TCNT2=0x00;
000142 93e0 00b2 	STS  178,R30
                 ; 0000 00F0 OCR2A=0x00;
000144 93e0 00b3 	STS  179,R30
                 ; 0000 00F1 OCR2B=0x00;
000146 93e0 00b4 	STS  180,R30
                 ; 0000 00F2 
                 ; 0000 00F3 // Timer/Counter 0 Interrupt(s) initialization
                 ; 0000 00F4 TIMSK0=(0<<OCIE0B) | (0<<OCIE0A) | (1<<TOIE0);
000148 e0e1      	LDI  R30,LOW(1)
000149 93e0 006e 	STS  110,R30
                 ; 0000 00F5 
                 ; 0000 00F6 // Timer/Counter 1 Interrupt(s) initialization
                 ; 0000 00F7 TIMSK1=(0<<ICIE1) | (0<<OCIE1B) | (0<<OCIE1A) | (0<<TOIE1);
00014b e0e0      	LDI  R30,LOW(0)
00014c 93e0 006f 	STS  111,R30
                 ; 0000 00F8 
                 ; 0000 00F9 // Timer/Counter 2 Interrupt(s) initialization
                 ; 0000 00FA TIMSK2=(0<<OCIE2B) | (0<<OCIE2A) | (0<<TOIE2);
00014e 93e0 0070 	STS  112,R30
                 ; 0000 00FB 
                 ; 0000 00FC // External Interrupt(s) initialization
                 ; 0000 00FD // INT0: Off
                 ; 0000 00FE // INT1: Off
                 ; 0000 00FF // INT2: Off
                 ; 0000 0100 // Interrupt on any change on pins PCINT0-7: Off
                 ; 0000 0101 // Interrupt on any change on pins PCINT8-15: Off
                 ; 0000 0102 // Interrupt on any change on pins PCINT16-23: Off
                 ; 0000 0103 // Interrupt on any change on pins PCINT24-31: Off
                 ; 0000 0104 EICRA=(0<<ISC21) | (0<<ISC20) | (0<<ISC11) | (0<<ISC10) | (0<<ISC01) | (0<<ISC00);
000150 93e0 0069 	STS  105,R30
                 ; 0000 0105 EIMSK=(0<<INT2) | (0<<INT1) | (0<<INT0);
000152 bbed      	OUT  0x1D,R30
                 ; 0000 0106 PCICR=(0<<PCIE3) | (0<<PCIE2) | (0<<PCIE1) | (0<<PCIE0);
000153 93e0 0068 	STS  104,R30
                 ; 0000 0107 
                 ; 0000 0108 // USART0 initialization
                 ; 0000 0109 // USART0 disabled
                 ; 0000 010A UCSR0B=(0<<RXCIE0) | (0<<TXCIE0) | (0<<UDRIE0) | (0<<RXEN0) | (0<<TXEN0) | (0<<UCSZ02) | (0<<RXB80) | (0<<TXB80);
000155 93e0 00c1 	STS  193,R30
                 ; 0000 010B 
                 ; 0000 010C // USART1 initialization
                 ; 0000 010D // USART1 disabled
                 ; 0000 010E UCSR1B=(0<<RXCIE1) | (0<<TXCIE1) | (0<<UDRIE1) | (0<<RXEN1) | (0<<TXEN1) | (0<<UCSZ12) | (0<<RXB81) | (0<<TXB81);
000157 93e0 00c9 	STS  201,R30
                 ; 0000 010F 
                 ; 0000 0110 // Analog Comparator initialization
                 ; 0000 0111 // Analog Comparator: Off
                 ; 0000 0112 // The Analog Comparator's positive input is
                 ; 0000 0113 // connected to the AIN0 pin
                 ; 0000 0114 // The Analog Comparator's negative input is
                 ; 0000 0115 // connected to the AIN1 pin
                 ; 0000 0116 ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
000159 e8e0      	LDI  R30,LOW(128)
00015a bfe0      	OUT  0x30,R30
                 ; 0000 0117 ADCSRB=(0<<ACME);
00015b e0e0      	LDI  R30,LOW(0)
00015c 93e0 007b 	STS  123,R30
                 ; 0000 0118 // Digital input buffer on AIN0: On
                 ; 0000 0119 // Digital input buffer on AIN1: On
                 ; 0000 011A DIDR1=(0<<AIN0D) | (0<<AIN1D);
00015e 93e0 007f 	STS  127,R30
                 ; 0000 011B 
                 ; 0000 011C // ADC initialization
                 ; 0000 011D // ADC disabled
                 ; 0000 011E ADCSRA=(0<<ADEN) | (0<<ADSC) | (0<<ADATE) | (0<<ADIF) | (0<<ADIE) | (0<<ADPS2) | (0<<ADPS1) | (0<<ADPS0);
000160 93e0 007a 	STS  122,R30
                 ; 0000 011F 
                 ; 0000 0120 // SPI initialization
                 ; 0000 0121 // SPI disabled
                 ; 0000 0122 SPCR=(0<<SPIE) | (0<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
000162 bdec      	OUT  0x2C,R30
                 ; 0000 0123 
                 ; 0000 0124 // TWI initialization
                 ; 0000 0125 // TWI disabled
                 ; 0000 0126 TWCR=(0<<TWEA) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWEN) | (0<<TWIE);
000163 93e0 00bc 	STS  188,R30
                 ; 0000 0127 
                 ; 0000 0128 // Globally enable interrupts
                 ; 0000 0129 #asm("sei")
000165 9478      	SEI
                 ; 0000 012A 
                 ; 0000 012B // Initialize the device
                 ; 0000 012C Init();
000166 d003      	RCALL _Init
                 ; 0000 012D 
                 ; 0000 012E while (1)
                 _0xB:
                 ; 0000 012F {
                 ; 0000 0130 // Display the consumption
                 ; 0000 0131 DisplayConsumption();
000167 d04f      	RCALL _DisplayConsumption
                 ; 0000 0132 
                 ; 0000 0133 // Wait for interruptions
                 ; 0000 0134 }
000168 cffe      	RJMP _0xB
                 ; 0000 0135 }
                 _0xE:
000169 cfff      	RJMP _0xE
                 ; .FEND
                 ;void Init()
                 ; 0000 0139 {
                 _Init:
                 ; .FSTART _Init
                 ; 0000 013A // Setting initial states = 0
                 ; 0000 013B Q = Q1 = S1 = S2 = S3 = 0;
00016a e0e0      	LDI  R30,LOW(0)
00016b 93e0 02a9 	STS  _S3,R30
00016d 2e9e      	MOV  R9,R30
00016e 2e4e      	MOV  R4,R30
00016f 93e0 02a8 	STS  _Q1,R30
000171 2ede      	MOV  R13,R30
                 ; 0000 013C 
                 ; 0000 013D // Turn off displays
                 ; 0000 013E PORTC = 0xff;
000172 efef      	LDI  R30,LOW(255)
000173 b9e8      	OUT  0x8,R30
                 ; 0000 013F PORTD = 0xff;
000174 b9eb      	OUT  0xB,R30
                 ; 0000 0140 PORTB = 0xff;
000175 b9e5      	OUT  0x5,R30
                 ; 0000 0141 }
000176 9508      	RET
                 ; .FEND
                 ;void UpdateConsumption()
                 ; 0000 0144 {
                 _UpdateConsumption:
                 ; .FSTART _UpdateConsumption
                 ; 0000 0145 // Identify PULSE
                 ; 0000 0146 /*
                 ; 0000 0147 PULSE = PINA & 0x01;
                 ; 0000 0148 
                 ; 0000 0149 switch(S2)
                 ; 0000 014A {
                 ; 0000 014B case 0:
                 ; 0000 014C {
                 ; 0000 014D char cntP = 0;
                 ; 0000 014E 
                 ; 0000 014F // PD6 -> Sending request from ADSP
                 ; 0000 0150 // PD7 -> Reading ack from ATmega164A
                 ; 0000 0151 
                 ; 0000 0152 // Check if sending request flag is up
                 ; 0000 0153 // (Receiving sending request on PD6)
                 ; 0000 0154 if (PORTD && 0x40)
                 ; 0000 0155 {
                 ; 0000 0156 // Send reading ack
                 ; 0000 0157 // (Sending ack on PD7)
                 ; 0000 0158 PORTD |= 0x80;
                 ; 0000 0159 
                 ; 0000 015A // Going further to reading the pulses
                 ; 0000 015B S2 = 1;
                 ; 0000 015C }
                 ; 0000 015D break;
                 ; 0000 015E }
                 ; 0000 015F case 1:
                 ; 0000 0160 {
                 ; 0000 0161 // If PULSE is on, start counting
                 ; 0000 0162 if (PULSE)
                 ; 0000 0163 {
                 ; 0000 0164 // Increment cntP
                 ; 0000 0165 cntP += 1;
                 ; 0000 0166 
                 ; 0000 0167 // Reset reading flag
                 ; 0000 0168 PORTD &= 0x7f;
                 ; 0000 0169 
                 ; 0000 016A // Go further if the pulse period has passed,
                 ; 0000 016B // otherwise go back wait for sensding ack again.
                 ; 0000 016C S2 = (cntP == DP) ? 2 : 1;
                 ; 0000 016D }
                 ; 0000 016E break;
                 ; 0000 016F }
                 ; 0000 0170 case 2:
                 ; 0000 0171 {
                 ; 0000 0172 if (~PULSE)
                 ; 0000 0173 {
                 ; 0000 0174 // Update current consumption range
                 ; 0000 0175 Q = CLS();
                 ; 0000 0176 
                 ; 0000 0177 // Increment consumption
                 ; 0000 0178 CONS[Q] += 1;
                 ; 0000 0179 
                 ; 0000 017A // Wait for another pulse
                 ; 0000 017B S2 = 0;
                 ; 0000 017C }
                 ; 0000 017D break;
                 ; 0000 017E }
                 ; 0000 017F } */
                 ; 0000 0180 
                 ; 0000 0181 ///// PORT F /////////////
                 ; 0000 0182 // _   _ _ _ : _ _ _  _ //
                 ; 0000 0183 // M   P O W   E E R PU //
                 ; 0000 0184 
                 ; 0000 0185 // Reading the power level
                 ; 0000 0186 PowerLevel = (PINA & 0x7E) >> 1;
000177 b1e0      	IN   R30,0x0
000178 77ee      	ANDI R30,LOW(0x7E)
000179 e0f0      	LDI  R31,0
00017a 95f5      	ASR  R31
00017b 95e7      	ROR  R30
00017c 93e0 02b9 	STS  _PowerLevel,R30
                 ; 0000 0187 
                 ; 0000 0188 switch(S2)
00017e 2de9      	MOV  R30,R9
00017f e0f0      	LDI  R31,0
                 ; 0000 0189 {
                 ; 0000 018A case 0:
000180 9730      	SBIW R30,0
000181 f4c9      	BRNE _0x12
                 ; 0000 018B {
                 ; 0000 018C // If PULSE is on, start counting
                 ; 0000 018D if (PULSE)
000182 20cc      	TST  R12
000183 f0b1      	BREQ _0x13
                 ; 0000 018E {
                 ; 0000 018F // Increment cntP
                 ; 0000 0190 cntP += 1;
000184 91e0 02c2 	LDS  R30,_cntP
000186 5fef      	SUBI R30,-LOW(1)
000187 93e0 02c2 	STS  _cntP,R30
                 ; 0000 0191 
                 ; 0000 0192 // Reset reading flag
                 ; 0000 0193 // PORTD &= 0x7f;
                 ; 0000 0194 
                 ; 0000 0195 if (modeFlag)
000189 20ee      	TST  R14
00018a f039      	BREQ _0x14
                 ; 0000 0196 {
                 ; 0000 0197 MODE = (PINA & 0x80) >> 7;
00018b b1e0      	IN   R30,0x0
00018c 78e0      	ANDI R30,LOW(0x80)
00018d e0f0      	LDI  R31,0
00018e d1df      	RCALL __ASRW3
00018f d1dc      	RCALL __ASRW4
000190 2ebe      	MOV  R11,R30
                 ; 0000 0198 modeFlag = 0;
000191 24ee      	CLR  R14
                 ; 0000 0199 }
                 ; 0000 019A 
                 ; 0000 019B // Go further if the pulse period has passed,
                 ; 0000 019C // otherwise go back wait for sensding ack again.
                 ; 0000 019D S2 = (cntP == DP) ? 1 : 0;
                 _0x14:
000192 91a0 02c2 	LDS  R26,_cntP
000194 30a1      	CPI  R26,LOW(0x1)
000195 f411      	BRNE _0x15
000196 e0e1      	LDI  R30,LOW(1)
000197 c001      	RJMP _0x16
                 _0x15:
000198 e0e0      	LDI  R30,LOW(0)
                 _0x16:
000199 2e9e      	MOV  R9,R30
                 ; 0000 019E }
                 ; 0000 019F break;
                 _0x13:
00019a c01b      	RJMP _0x11
                 ; 0000 01A0 }
                 ; 0000 01A1 case 1:
                 _0x12:
00019b 30e1      	CPI  R30,LOW(0x1)
00019c e0a0      	LDI  R26,HIGH(0x1)
00019d 07fa      	CPC  R31,R26
00019e f4b9      	BRNE _0x11
                 ; 0000 01A2 {
                 ; 0000 01A3 if (~PULSE)
00019f 2dec      	MOV  R30,R12
0001a0 95e0      	COM  R30
0001a1 30e0      	CPI  R30,0
0001a2 f099      	BREQ _0x19
                 ; 0000 01A4 {
                 ; 0000 01A5 // Update current consumption range
                 ; 0000 01A6 CLS();
0001a3 d096      	RCALL _CLS
                 ; 0000 01A7 
                 ; 0000 01A8 // Increment consumption
                 ; 0000 01A9 if (MODE == 0)
0001a4 20bb      	TST  R11
0001a5 f431      	BRNE _0x1A
                 ; 0000 01AA {
                 ; 0000 01AB CONSUM[Q] += 1;    // Working range on
0001a6 2ded      	MOV  R30,R13
0001a7 d18f      	RCALL SUBOPT_0x0
0001a8 9631      	ADIW R30,1
0001a9 93fe      	ST   -X,R31
0001aa 93ee      	ST   -X,R30
                 ; 0000 01AC }
                 ; 0000 01AD else
0001ab c006      	RJMP _0x1B
                 _0x1A:
                 ; 0000 01AE {
                 ; 0000 01AF CONSUM[4] += 1;    // Working range off
0001ac d194      	RCALL SUBOPT_0x1
0001ad 9631      	ADIW R30,1
                +
0001ae 93e0 02b2+STS _CONSUM + ( 8 ) , R30
0001b0 93f0 02b3+STS _CONSUM + ( 8 ) + 1 , R31
                 	__PUTW1MN _CONSUM,8
                 ; 0000 01B0 }
                 _0x1B:
                 ; 0000 01B1 
                 ; 0000 01B2 // Wait for another pulse
                 ; 0000 01B3 S2 = 0;
0001b2 2499      	CLR  R9
                 ; 0000 01B4 cntP = 0;
0001b3 e0e0      	LDI  R30,LOW(0)
0001b4 93e0 02c2 	STS  _cntP,R30
                 ; 0000 01B5 }
                 ; 0000 01B6 break;
                 _0x19:
                 ; 0000 01B7 }
                 ; 0000 01B8 }
                 _0x11:
                 ; 0000 01B9 }
0001b6 9508      	RET
                 ; .FEND
                 ;void DisplayConsumption()
                 ; 0000 01BD {
                 _DisplayConsumption:
                 ; .FSTART _DisplayConsumption
                 ; 0000 01BE // We assume:
                 ; 0000 01BF // PORTC: PC0 - PC6 -> 7 segments (A-G)
                 ; 0000 01C0 // PORTD: PD0 - PD3 -> select the common cathode for each digit (multiplexing)
                 ; 0000 01C1 // PD3 - C4, PD2 - C3, PD1 - C2, PD0 - C1
                 ; 0000 01C2 // Q - consumption range:
                 ; 0000 01C3 // 0 -> 00:00 - H1:00
                 ; 0000 01C4 // 1 -> H1:00 - H2:00               (MON - FRI)
                 ; 0000 01C5 // 2 -> H2:00 - 00:00 (next day)
                 ; 0000 01C6 // 3 -> SAT - SUN
                 ; 0000 01C7 
                 ; 0000 01C8 // The actual approach:
                 ; 0000 01C9 // Each main loop iteration we multiplex the digits and display one at a time
                 ; 0000 01CA 
                 ; 0000 01CB // If MODE = 1 -> display total consumption,
                 ; 0000 01CC // else -> display consumption based on current range.
                 ; 0000 01CD int cons = (MODE) ?  CONSUM[4] : CONSUM[Q1];
                 ; 0000 01CE 
                 ; 0000 01CF // Compute and display C4
                 ; 0000 01D0 C4 = cons / 1000;
0001b7 931a      	ST   -Y,R17
0001b8 930a      	ST   -Y,R16
                 ;	cons -> R16,R17
0001b9 2deb      	MOV  R30,R11
0001ba e0f0      	LDI  R31,0
0001bb 9730      	SBIW R30,0
0001bc f011      	BREQ _0x1C
0001bd d183      	RCALL SUBOPT_0x1
0001be c003      	RJMP _0x1D
                 _0x1C:
0001bf 91e0 02a8 	LDS  R30,_Q1
0001c1 d175      	RCALL SUBOPT_0x0
                 _0x1D:
0001c2 018f      	MOVW R16,R30
0001c3 01d8      	MOVW R26,R16
0001c4 eee8      	LDI  R30,LOW(1000)
0001c5 e0f3      	LDI  R31,HIGH(1000)
0001c6 d1c1      	RCALL __DIVW21
0001c7 93e0 02b4 	STS  _C4,R30
                 ; 0000 01D1 cons %= 1000;
0001c9 01d8      	MOVW R26,R16
0001ca eee8      	LDI  R30,LOW(1000)
0001cb e0f3      	LDI  R31,HIGH(1000)
0001cc d1c0      	RCALL __MODW21
0001cd 018f      	MOVW R16,R30
                 ; 0000 01D2 DisplayDigit(4, C4);
0001ce e0e4      	LDI  R30,LOW(4)
0001cf 93ea      	ST   -Y,R30
0001d0 91a0 02b4 	LDS  R26,_C4
0001d2 d023      	RCALL _DisplayDigit
                 ; 0000 01D3 
                 ; 0000 01D4 // Compute and display C3
                 ; 0000 01D5 C3 = cons / 100;
0001d3 01d8      	MOVW R26,R16
0001d4 e6e4      	LDI  R30,LOW(100)
0001d5 e0f0      	LDI  R31,HIGH(100)
0001d6 d1b1      	RCALL __DIVW21
0001d7 93e0 02b5 	STS  _C3,R30
                 ; 0000 01D6 cons %= 100;
0001d9 01d8      	MOVW R26,R16
0001da e6e4      	LDI  R30,LOW(100)
0001db e0f0      	LDI  R31,HIGH(100)
0001dc d1b0      	RCALL __MODW21
0001dd 018f      	MOVW R16,R30
                 ; 0000 01D7 DisplayDigit(3, C3);
0001de e0e3      	LDI  R30,LOW(3)
0001df 93ea      	ST   -Y,R30
0001e0 91a0 02b5 	LDS  R26,_C3
0001e2 d163      	RCALL SUBOPT_0x2
                 ; 0000 01D8 
                 ; 0000 01D9 // Compute and display C2
                 ; 0000 01DA C2 = cons / 10;
0001e3 d1a4      	RCALL __DIVW21
0001e4 93e0 02b6 	STS  _C2,R30
                 ; 0000 01DB DisplayDigit(2, C2);
0001e6 e0e2      	LDI  R30,LOW(2)
0001e7 93ea      	ST   -Y,R30
0001e8 91a0 02b6 	LDS  R26,_C2
0001ea d15b      	RCALL SUBOPT_0x2
                 ; 0000 01DC 
                 ; 0000 01DD // Compute and display C1
                 ; 0000 01DE C1 = cons % 10;
0001eb d1a1      	RCALL __MODW21
0001ec 93e0 02b7 	STS  _C1,R30
                 ; 0000 01DF DisplayDigit(1, C1);
0001ee e0e1      	LDI  R30,LOW(1)
0001ef 93ea      	ST   -Y,R30
0001f0 91a0 02b7 	LDS  R26,_C1
0001f2 d003      	RCALL _DisplayDigit
                 ; 0000 01E0 }
0001f3 9109      	LD   R16,Y+
0001f4 9119      	LD   R17,Y+
0001f5 9508      	RET
                 ; .FEND
                 ;void DisplayDigit(char currentDisplay, char digit)
                 ; 0000 01E3 {
                 _DisplayDigit:
                 ; .FSTART _DisplayDigit
                 ; 0000 01E4 // Set PORTC pins to the corresponding digit
                 ; 0000 01E5 // PORTC = DIGITS[digit];
                 ; 0000 01E6 
                 ; 0000 01E7 // Select the desired display (turn on the pin
                 ; 0000 01E8 // corresponding to the desired digit (C4/C3/C2/C1)
                 ; 0000 01E9 char output = 0xff;
                 ; 0000 01EA 
                 ; 0000 01EB switch (currentDisplay)
0001f6 d160      	RCALL __SAVELOCR4
0001f7 2f0a      	MOV  R16,R26
0001f8 813c      	LDD  R19,Y+4
                 ;	currentDisplay -> R19
                 ;	digit -> R16
                 ;	output -> R17
0001f9 ef1f      	LDI  R17,255
0001fa 2fe3      	MOV  R30,R19
0001fb e0f0      	LDI  R31,0
                 ; 0000 01EC {
                 ; 0000 01ED case 4:
0001fc 30e4      	CPI  R30,LOW(0x4)
0001fd e0a0      	LDI  R26,HIGH(0x4)
0001fe 07fa      	CPC  R31,R26
0001ff f411      	BRNE _0x22
                 ; 0000 01EE // Turn PD3 on
                 ; 0000 01EF //output &= 0b00000111;
                 ; 0000 01F0 output = 0x08;
000200 e018      	LDI  R17,LOW(8)
                 ; 0000 01F1 break;
000201 c011      	RJMP _0x21
                 ; 0000 01F2 case 3:
                 _0x22:
000202 30e3      	CPI  R30,LOW(0x3)
000203 e0a0      	LDI  R26,HIGH(0x3)
000204 07fa      	CPC  R31,R26
000205 f411      	BRNE _0x23
                 ; 0000 01F3 // Turn PD2 on
                 ; 0000 01F4 // output &= 0b00001011;
                 ; 0000 01F5 output = 0x04;
000206 e014      	LDI  R17,LOW(4)
                 ; 0000 01F6 break;
000207 c00b      	RJMP _0x21
                 ; 0000 01F7 case 2:
                 _0x23:
000208 30e2      	CPI  R30,LOW(0x2)
000209 e0a0      	LDI  R26,HIGH(0x2)
00020a 07fa      	CPC  R31,R26
00020b f411      	BRNE _0x24
                 ; 0000 01F8 // Turn PD1 on
                 ; 0000 01F9 output = 0x02;
00020c e012      	LDI  R17,LOW(2)
                 ; 0000 01FA break;
00020d c005      	RJMP _0x21
                 ; 0000 01FB case 1:
                 _0x24:
00020e 30e1      	CPI  R30,LOW(0x1)
00020f e0a0      	LDI  R26,HIGH(0x1)
000210 07fa      	CPC  R31,R26
000211 f409      	BRNE _0x21
                 ; 0000 01FC // Turn PD0 on
                 ; 0000 01FD output = 0x01;
000212 e011      	LDI  R17,LOW(1)
                 ; 0000 01FE break;
                 ; 0000 01FF }
                 _0x21:
                 ; 0000 0200 
                 ; 0000 0201 // Assign output to PORTC in order to select the desired display;
                 ; 0000 0202 PORTD = output;
000213 b91b      	OUT  0xB,R17
                 ; 0000 0203 
                 ; 0000 0204 // Set PORTC pins to the corresponding digit
                 ; 0000 0205 PORTC = DIGITS[digit];
000214 2fe0      	MOV  R30,R16
000215 e0f0      	LDI  R31,0
000216 58e4      	SUBI R30,LOW(-_DIGITS*2)
000217 4fff      	SBCI R31,HIGH(-_DIGITS*2)
000218 9004      	LPM  R0,Z
000219 b808      	OUT  0x8,R0
                 ; 0000 0206 
                 ; 0000 0207 // Add delay (10 us)
                 ; 0000 0208 //_display_us(10);
                 ; 0000 0209 }
00021a d143      	RCALL __LOADLOCR4
00021b 9625      	ADIW R28,5
00021c 9508      	RET
                 ; .FEND
                 ;void UpdateTime(){
                 ; 0000 020C void UpdateTime(){
                 _UpdateTime:
                 ; .FSTART _UpdateTime
                 ; 0000 020D cnt_time += 1; //incrementare contor de timp
00021d 9473      	INC  R7
                 ; 0000 020E if(cnt_time != T_SEC) return;
00021e 14a7      	CP   R10,R7
00021f f009      	BREQ _0x26
000220 9508      	RET
                 ; 0000 020F 
                 ; 0000 0210 cnt_time = 0; // se reseteaza contorul
                 _0x26:
000221 2477      	CLR  R7
                 ; 0000 0211 S+=1;  //incrementeaza contor secunde
000222 9483      	INC  R8
                 ; 0000 0212 
                 ; 0000 0213 if(S!=60) return;
000223 e3ec      	LDI  R30,LOW(60)
000224 15e8      	CP   R30,R8
000225 f009      	BREQ _0x27
000226 9508      	RET
                 ; 0000 0214 S = 0;//se reseteaza nr de secunde
                 _0x27:
000227 2488      	CLR  R8
                 ; 0000 0215 M += 1; //incrementeaza contor minute
000228 9453      	INC  R5
                 ; 0000 0216 
                 ; 0000 0217 if(M!=60) return;
000229 e3ec      	LDI  R30,LOW(60)
00022a 15e5      	CP   R30,R5
00022b f009      	BREQ _0x28
00022c 9508      	RET
                 ; 0000 0218 M = 0;
                 _0x28:
00022d 2455      	CLR  R5
                 ; 0000 0219 H += 1;
00022e 9463      	INC  R6
                 ; 0000 021A 
                 ; 0000 021B if(H!=24) return;
00022f e1e8      	LDI  R30,LOW(24)
000230 15e6      	CP   R30,R6
000231 f009      	BREQ _0x29
000232 9508      	RET
                 ; 0000 021C H = 0;
                 _0x29:
000233 2466      	CLR  R6
                 ; 0000 021D Z += 1;
000234 9433      	INC  R3
                 ; 0000 021E 
                 ; 0000 021F if (Z == 7) Z = 0;
000235 e0e7      	LDI  R30,LOW(7)
000236 15e3      	CP   R30,R3
000237 f409      	BRNE _0x2A
000238 2433      	CLR  R3
                 ; 0000 0220 return;
                 _0x2A:
000239 9508      	RET
                 ; 0000 0221 }
                 ; .FEND
                 ;void CLS()
                 ; 0000 0226 {
                 _CLS:
                 ; .FSTART _CLS
                 ; 0000 0227 //exemplu
                 ; 0000 0228 // Ziua 3, ora 8, min 6, sec 3
                 ; 0000 0229 //0x03080603
                 ; 0000 022A long int now = (Z<<24) | (H<<16) | (M<<8) | S;
                 ; 0000 022B 
                 ; 0000 022C long int *adr = TABA[Q];
                 ; 0000 022D char ready = 0;
                 ; 0000 022E int i = 0;
                 ; 0000 022F long int out = 0;
                 ; 0000 0230 
                 ; 0000 0231 while (!ready)
00023a 9728      	SBIW R28,8
00023b e0e0      	LDI  R30,LOW(0)
00023c 83e8      	ST   Y,R30
00023d 83e9      	STD  Y+1,R30
00023e 83ea      	STD  Y+2,R30
00023f 83eb      	STD  Y+3,R30
000240 d114      	RCALL __SAVELOCR6
                 ;	now -> Y+10
                 ;	*adr -> R16,R17
                 ;	ready -> R19
                 ;	i -> R20,R21
                 ;	out -> Y+6
000241 2de3      	MOV  R30,R3
000242 e0f0      	LDI  R31,0
000243 2de6      	MOV  R30,R6
000244 e0f0      	LDI  R31,0
000245 e0e0      	LDI  R30,LOW(0)
000246 e0f0      	LDI  R31,HIGH(0)
000247 01df      	MOVW R26,R30
000248 2df5      	MOV  R31,R5
000249 e0e0      	LDI  R30,LOW(0)
00024a 2bea      	OR   R30,R26
00024b 2bfb      	OR   R31,R27
00024c 01df      	MOVW R26,R30
00024d 2de8      	MOV  R30,R8
00024e e0f0      	LDI  R31,0
00024f 2bea      	OR   R30,R26
000250 2bfb      	OR   R31,R27
                +
000251 2f6f     +MOV R22 , R31
000252 0f66     +ADD R22 , R22
000253 0b66     +SBC R22 , R22
000254 2f76     +MOV R23 , R22
                 	__CWD1
                +
000255 87ea     +STD Y + 10 , R30
000256 87fb     +STD Y + 10 + 1 , R31
000257 876c     +STD Y + 10 + 2 , R22
000258 877d     +STD Y + 10 + 3 , R23
                 	__PUTD1S 10
000259 2ded      	MOV  R30,R13
00025a eaa0      	LDI  R26,LOW(_TABA)
00025b e0b2      	LDI  R27,HIGH(_TABA)
00025c e0f0      	LDI  R31,0
00025d 0fee      	LSL  R30
00025e 1fff      	ROL  R31
00025f 0fae      	ADD  R26,R30
000260 1fbf      	ADC  R27,R31
                +
000261 91ed     +LD R30 , X +
000262 91fc     +LD R31 , X
000263 9711     +SBIW R26 , 1
                 	__GETW1P
000264 018f      	MOVW R16,R30
000265 e030      	LDI  R19,0
                +
000266 e040     +LDI R20 , LOW ( 0 )
000267 e050     +LDI R21 , HIGH ( 0 )
                 	__GETWRN 20,21,0
                 _0x2B:
000268 3030      	CPI  R19,0
000269 f509      	BRNE _0x2D
                 ; 0000 0232 {
                 ; 0000 0233 if (now == adr[i]) {
00026a d0e0      	RCALL SUBOPT_0x3
                +
00026b 85aa     +LDD R26 , Y + 10
00026c 85bb     +LDD R27 , Y + 10 + 1
00026d 858c     +LDD R24 , Y + 10 + 2
00026e 859d     +LDD R25 , Y + 10 + 3
                 	__GETD2S 10
                +
00026f 17ea     +CP R30 , R26
000270 07fb     +CPC R31 , R27
000271 0768     +CPC R22 , R24
000272 0779     +CPC R23 , R25
                 	__CPD12
000273 f449      	BRNE _0x2E
                 ; 0000 0234 S1 = adr[i + 1];
000274 01fa      	MOVW R30,R20
000275 9631      	ADIW R30,1
000276 01d8      	MOVW R26,R16
000277 d0ef      	RCALL __LSLW2
000278 0fae      	ADD  R26,R30
000279 1fbf      	ADC  R27,R31
00027a 904c      	LD   R4,X
                 ; 0000 0235 ready = 1;  // Stop iterating through while
00027b e031      	LDI  R19,LOW(1)
                 ; 0000 0236 }
                 ; 0000 0237 else if (adr[i] == T) ready = 1;
00027c c00d      	RJMP _0x2F
                 _0x2E:
00027d d0cd      	RCALL SUBOPT_0x3
                +
00027e 30e5     +CPI R30 , LOW ( 0x5 )
00027f e0a0     +LDI R26 , HIGH ( 0x5 )
000280 07fa     +CPC R31 , R26
000281 e0a0     +LDI R26 , BYTE3 ( 0x5 )
000282 076a     +CPC R22 , R26
000283 e0a0     +LDI R26 , BYTE4 ( 0x5 )
000284 077a     +CPC R23 , R26
                 	__CPD1N 0x5
000285 f411      	BRNE _0x30
000286 e031      	LDI  R19,LOW(1)
                 ; 0000 0238 else i = i+2;
000287 c002      	RJMP _0x31
                 _0x30:
                +
000288 5f4e     +SUBI R20 , LOW ( - 2 )
000289 4f5f     +SBCI R21 , HIGH ( - 2 )
                 	__ADDWRN 20,21,2
                 ; 0000 0239 }
                 _0x31:
                 _0x2F:
00028a cfdd      	RJMP _0x2B
                 _0x2D:
                 ; 0000 023A }
00028b d0d0      	RCALL __LOADLOCR6
00028c 962e      	ADIW R28,14
00028d 9508      	RET
                 ; .FEND
                 ;void DisplayInfo()
                 ; 0000 023D {
                 _DisplayInfo:
                 ; .FSTART _DisplayInfo
                 ; 0000 023E DisplayConsumptionDisplayMode();
00028e d01d      	RCALL _DisplayConsumptionDisplayMode
                 ; 0000 023F DisplayPowerLevel();
00028f d001      	RCALL _DisplayPowerLevel
                 ; 0000 0240 }
000290 9508      	RET
                 ; .FEND
                 ;void DisplayPowerLevel()
                 ; 0000 0243 {
                 _DisplayPowerLevel:
                 ; .FSTART _DisplayPowerLevel
                 ; 0000 0244 char out;
                 ; 0000 0245 
                 ; 0000 0246 //   if (!PowerLevel)          PowerLevel = 0 kW
                 ; 0000 0247 //   {
                 ; 0000 0248 //        out = CLC_LEVEL[0];
                 ; 0000 0249 //   }
                 ; 0000 024A //   else if (PowerLevel < 2.5)    0 < PowerLevel < 2.5 kW
                 ; 0000 024B //   {
                 ; 0000 024C //        out = CLC_LEVEL[1];
                 ; 0000 024D //   }
                 ; 0000 024E //   else if (PowerLevel < 5)      2.5 <= PowerLevel < 5 kW
                 ; 0000 024F //   {
                 ; 0000 0250 //        out = CLC_LEVEL[2];
                 ; 0000 0251 //   }
                 ; 0000 0252 //   else if (PowerLevel < 7.5)    5 <= PowerLevel < 7.5 kW
                 ; 0000 0253 //   {
                 ; 0000 0254 //        out = CLC_LEVEL[3];
                 ; 0000 0255 //   }
                 ; 0000 0256 //   else                          PowerLvel >= 7.5 kW
                 ; 0000 0257 //   {
                 ; 0000 0258 //        out = CLC_LEVEL[4];
                 ; 0000 0259 //   }
                 ; 0000 025A 
                 ; 0000 025B if (!PowerLevel)         // PowerLevel = 0 kW
000291 931a      	ST   -Y,R17
                 ;	out -> R17
000292 91e0 02b9 	LDS  R30,_PowerLevel
000294 30e0      	CPI  R30,0
000295 f419      	BRNE _0x32
                 ; 0000 025C {
                 ; 0000 025D out = CLC_LEVEL[0];
000296 9110 02ba 	LDS  R17,_CLC_LEVEL
                 ; 0000 025E }
                 ; 0000 025F else if (PowerLevel < 3)   // 0 < PowerLevel < 3 kW
000298 c010      	RJMP _0x33
                 _0x32:
000299 91a0 02b9 	LDS  R26,_PowerLevel
00029b 30a3      	CPI  R26,LOW(0x3)
00029c f418      	BRSH _0x34
                 ; 0000 0260 {
                 ; 0000 0261 out = CLC_LEVEL[1];
                +
00029d 9110 02bb+LDS R17 , _CLC_LEVEL + ( 1 )
                 	__GETBRMN 17,_CLC_LEVEL,1
                 ; 0000 0262 }
                 ; 0000 0263 else if (PowerLevel < 6)     // 3 <= PowerLevel < 6 kW
00029f c009      	RJMP _0x35
                 _0x34:
0002a0 91a0 02b9 	LDS  R26,_PowerLevel
0002a2 30a6      	CPI  R26,LOW(0x6)
0002a3 f418      	BRSH _0x36
                 ; 0000 0264 {
                 ; 0000 0265 out = CLC_LEVEL[2];
                +
0002a4 9110 02bc+LDS R17 , _CLC_LEVEL + ( 2 )
                 	__GETBRMN 17,_CLC_LEVEL,2
                 ; 0000 0266 }
                 ; 0000 0267 else                         // PowerLvel >= 6 kW
0002a6 c002      	RJMP _0x37
                 _0x36:
                 ; 0000 0268 {
                 ; 0000 0269 out = CLC_LEVEL[3];
                +
0002a7 9110 02bd+LDS R17 , _CLC_LEVEL + ( 3 )
                 	__GETBRMN 17,_CLC_LEVEL,3
                 ; 0000 026A }
                 _0x37:
                 _0x35:
                 _0x33:
                 ; 0000 026B 
                 ; 0000 026C // Delete PB7-PB5
                 ; 0000 026D PORTB &= 0x1f;
0002a9 b1e5      	IN   R30,0x5
0002aa 71ef      	ANDI R30,LOW(0x1F)
0002ab c085      	RJMP _0x2000002
                 ; 0000 026E 
                 ; 0000 026F // Display out on PB7-PB5
                 ; 0000 0270 PORTB |= out;
                 ; 0000 0271 }
                 ; .FEND
                 ;void DisplayConsumptionDisplayMode()
                 ; 0000 0274 {
                 _DisplayConsumptionDisplayMode:
                 ; .FSTART _DisplayConsumptionDisplayMode
                 ; 0000 0275 char out;
                 ; 0000 0276 
                 ; 0000 0277 if (MODE == 1)  // Working without ranges
0002ac 931a      	ST   -Y,R17
                 ;	out -> R17
0002ad e0e1      	LDI  R30,LOW(1)
0002ae 15eb      	CP   R30,R11
0002af f429      	BRNE _0x38
                 ; 0000 0278 {
                 ; 0000 0279 // Clear PB4-0
                 ; 0000 027A PORTB &= 0xE0;
0002b0 b1e5      	IN   R30,0x5
0002b1 7ee0      	ANDI R30,LOW(0xE0)
0002b2 b9e5      	OUT  0x5,R30
                 ; 0000 027B 
                 ; 0000 027C // Display on PB4-0
                 ; 0000 027D PORTB |= 0x10;
0002b3 9a2c      	SBI  0x5,4
                 ; 0000 027E 
                 ; 0000 027F return;
0002b4 c080      	RJMP _0x2000001
                 ; 0000 0280 }
                 ; 0000 0281 
                 ; 0000 0282 switch(S3)
                 _0x38:
0002b5 91e0 02a9 	LDS  R30,_S3
0002b7 e0f0      	LDI  R31,0
                 ; 0000 0283 {
                 ; 0000 0284 case 0:
0002b8 9730      	SBIW R30,0
0002b9 f441      	BRNE _0x3C
                 ; 0000 0285 {
                 ; 0000 0286 if (CA == 0)            // Pressed CA
0002ba 91e0 02b8 	LDS  R30,_CA
0002bc 30e0      	CPI  R30,0
0002bd f419      	BRNE _0x3D
                 ; 0000 0287 {
                 ; 0000 0288 S3 = 1;
0002be e0e1      	LDI  R30,LOW(1)
0002bf 93e0 02a9 	STS  _S3,R30
                 ; 0000 0289 }
                 ; 0000 028A break;
                 _0x3D:
0002c1 c05e      	RJMP _0x3B
                 ; 0000 028B }
                 ; 0000 028C case 1:                 // Released CA
                 _0x3C:
0002c2 30e1      	CPI  R30,LOW(0x1)
0002c3 e0a0      	LDI  R26,HIGH(0x1)
0002c4 07fa      	CPC  R31,R26
0002c5 f459      	BRNE _0x3E
                 ; 0000 028D {
                 ; 0000 028E if (CA)
0002c6 91e0 02b8 	LDS  R30,_CA
0002c8 30e0      	CPI  R30,0
0002c9 f031      	BREQ _0x3F
                 ; 0000 028F {
                 ; 0000 0290 S3 = 2;
0002ca e0e2      	LDI  R30,LOW(2)
0002cb 93e0 02a9 	STS  _S3,R30
                 ; 0000 0291 Q1 = 1;
0002cd e0e1      	LDI  R30,LOW(1)
0002ce 93e0 02a8 	STS  _Q1,R30
                 ; 0000 0292 }
                 ; 0000 0293 break;
                 _0x3F:
0002d0 c04f      	RJMP _0x3B
                 ; 0000 0294 }
                 ; 0000 0295 case 2:                //  Pressed CA
                 _0x3E:
0002d1 30e2      	CPI  R30,LOW(0x2)
0002d2 e0a0      	LDI  R26,HIGH(0x2)
0002d3 07fa      	CPC  R31,R26
0002d4 f441      	BRNE _0x40
                 ; 0000 0296 {
                 ; 0000 0297 if (CA == 0)
0002d5 91e0 02b8 	LDS  R30,_CA
0002d7 30e0      	CPI  R30,0
0002d8 f419      	BRNE _0x41
                 ; 0000 0298 {
                 ; 0000 0299 S3 = 3;
0002d9 e0e3      	LDI  R30,LOW(3)
0002da 93e0 02a9 	STS  _S3,R30
                 ; 0000 029A }
                 ; 0000 029B break;
                 _0x41:
0002dc c043      	RJMP _0x3B
                 ; 0000 029C }
                 ; 0000 029D case 3:                // Released CA
                 _0x40:
0002dd 30e3      	CPI  R30,LOW(0x3)
0002de e0a0      	LDI  R26,HIGH(0x3)
0002df 07fa      	CPC  R31,R26
0002e0 f459      	BRNE _0x42
                 ; 0000 029E {
                 ; 0000 029F if (CA)
0002e1 91e0 02b8 	LDS  R30,_CA
0002e3 30e0      	CPI  R30,0
0002e4 f031      	BREQ _0x43
                 ; 0000 02A0 {
                 ; 0000 02A1 S3 = 4;
0002e5 e0e4      	LDI  R30,LOW(4)
0002e6 93e0 02a9 	STS  _S3,R30
                 ; 0000 02A2 Q1 = 2;
0002e8 e0e2      	LDI  R30,LOW(2)
0002e9 93e0 02a8 	STS  _Q1,R30
                 ; 0000 02A3 }
                 ; 0000 02A4 break;
                 _0x43:
0002eb c034      	RJMP _0x3B
                 ; 0000 02A5 }
                 ; 0000 02A6 case 4:
                 _0x42:
0002ec 30e4      	CPI  R30,LOW(0x4)
0002ed e0a0      	LDI  R26,HIGH(0x4)
0002ee 07fa      	CPC  R31,R26
0002ef f441      	BRNE _0x44
                 ; 0000 02A7 {
                 ; 0000 02A8 if (CA == 0)
0002f0 91e0 02b8 	LDS  R30,_CA
0002f2 30e0      	CPI  R30,0
0002f3 f419      	BRNE _0x45
                 ; 0000 02A9 {
                 ; 0000 02AA S3 = 5;
0002f4 e0e5      	LDI  R30,LOW(5)
0002f5 93e0 02a9 	STS  _S3,R30
                 ; 0000 02AB }
                 ; 0000 02AC break;
                 _0x45:
0002f7 c028      	RJMP _0x3B
                 ; 0000 02AD }
                 ; 0000 02AE case 5:
                 _0x44:
0002f8 30e5      	CPI  R30,LOW(0x5)
0002f9 e0a0      	LDI  R26,HIGH(0x5)
0002fa 07fa      	CPC  R31,R26
0002fb f459      	BRNE _0x46
                 ; 0000 02AF {
                 ; 0000 02B0 if (CA)
0002fc 91e0 02b8 	LDS  R30,_CA
0002fe 30e0      	CPI  R30,0
0002ff f031      	BREQ _0x47
                 ; 0000 02B1 {
                 ; 0000 02B2 S3 = 6;
000300 e0e6      	LDI  R30,LOW(6)
000301 93e0 02a9 	STS  _S3,R30
                 ; 0000 02B3 Q1 = 3;
000303 e0e3      	LDI  R30,LOW(3)
000304 93e0 02a8 	STS  _Q1,R30
                 ; 0000 02B4 }
                 ; 0000 02B5 break;
                 _0x47:
000306 c019      	RJMP _0x3B
                 ; 0000 02B6 }
                 ; 0000 02B7 case 6:
                 _0x46:
000307 30e6      	CPI  R30,LOW(0x6)
000308 e0a0      	LDI  R26,HIGH(0x6)
000309 07fa      	CPC  R31,R26
00030a f441      	BRNE _0x48
                 ; 0000 02B8 {
                 ; 0000 02B9 if (CA == 0)
00030b 91e0 02b8 	LDS  R30,_CA
00030d 30e0      	CPI  R30,0
00030e f419      	BRNE _0x49
                 ; 0000 02BA {
                 ; 0000 02BB S3 = 7;
00030f e0e7      	LDI  R30,LOW(7)
000310 93e0 02a9 	STS  _S3,R30
                 ; 0000 02BC }
                 ; 0000 02BD break;
                 _0x49:
000312 c00d      	RJMP _0x3B
                 ; 0000 02BE }
                 ; 0000 02BF case 7:
                 _0x48:
000313 30e7      	CPI  R30,LOW(0x7)
000314 e0a0      	LDI  R26,HIGH(0x7)
000315 07fa      	CPC  R31,R26
000316 f449      	BRNE _0x3B
                 ; 0000 02C0 {
                 ; 0000 02C1 if (CA)
000317 91e0 02b8 	LDS  R30,_CA
000319 30e0      	CPI  R30,0
00031a f029      	BREQ _0x4B
                 ; 0000 02C2 {
                 ; 0000 02C3 S3 = 0;
00031b e0e0      	LDI  R30,LOW(0)
00031c 93e0 02a9 	STS  _S3,R30
                 ; 0000 02C4 Q1 = 0;
00031e 93e0 02a8 	STS  _Q1,R30
                 ; 0000 02C5 }
                 ; 0000 02C6 break;
                 _0x4B:
                 ; 0000 02C7 }
                 ; 0000 02C8 }
                 _0x3B:
                 ; 0000 02C9 
                 ; 0000 02CA out = CLC_RANGE_OUTPUT[Q1] | (CLC_RANGE_OUTPUT[Q] << 2);
000320 91e0 02a8 	LDS  R30,_Q1
000322 e0f0      	LDI  R31,0
000323 54e2      	SUBI R30,LOW(-_CLC_RANGE_OUTPUT)
000324 4ffd      	SBCI R31,HIGH(-_CLC_RANGE_OUTPUT)
000325 81a0      	LD   R26,Z
000326 2ded      	MOV  R30,R13
000327 e0f0      	LDI  R31,0
000328 54e2      	SUBI R30,LOW(-_CLC_RANGE_OUTPUT)
000329 4ffd      	SBCI R31,HIGH(-_CLC_RANGE_OUTPUT)
00032a 81e0      	LD   R30,Z
00032b 0fee      	LSL  R30
00032c 0fee      	LSL  R30
00032d 2bea      	OR   R30,R26
00032e 2f1e      	MOV  R17,R30
                 ; 0000 02CB 
                 ; 0000 02CC // Delete PB4-PB0
                 ; 0000 02CD PORTB &= 0xE0;
00032f b1e5      	IN   R30,0x5
000330 7ee0      	ANDI R30,LOW(0xE0)
                 _0x2000002:
000331 b9e5      	OUT  0x5,R30
                 ; 0000 02CE 
                 ; 0000 02CF // Display out on PB3-PB0
                 ; 0000 02D0 PORTB |= out;
000332 b1e5      	IN   R30,0x5
000333 2be1      	OR   R30,R17
000334 b9e5      	OUT  0x5,R30
                 ; 0000 02D1 }
                 _0x2000001:
000335 9119      	LD   R17,Y+
000336 9508      	RET
                 ; .FEND
                 
                 	.DSEG
                 _A0:
000200           	.BYTE 0x30
                 _A1:
000230           	.BYTE 0x30
                 _A2:
000260           	.BYTE 0x30
                 _A3:
000290           	.BYTE 0x10
                 _TABA:
0002a0           	.BYTE 0x8
                 _Q1:
0002a8           	.BYTE 0x1
                 _S3:
0002a9           	.BYTE 0x1
                 _CONSUM:
0002aa           	.BYTE 0xA
                 _C4:
0002b4           	.BYTE 0x1
                 _C3:
0002b5           	.BYTE 0x1
                 _C2:
0002b6           	.BYTE 0x1
                 _C1:
0002b7           	.BYTE 0x1
                 _CA:
0002b8           	.BYTE 0x1
                 _PowerLevel:
0002b9           	.BYTE 0x1
                 _CLC_LEVEL:
0002ba           	.BYTE 0x4
                 _CLC_RANGE_OUTPUT:
0002be           	.BYTE 0x4
                 _cntP:
0002c2           	.BYTE 0x1
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x0:
000337 eaaa      	LDI  R26,LOW(_CONSUM)
000338 e0b2      	LDI  R27,HIGH(_CONSUM)
000339 e0f0      	LDI  R31,0
00033a 0fee      	LSL  R30
00033b 1fff      	ROL  R31
00033c 0fae      	ADD  R26,R30
00033d 1fbf      	ADC  R27,R31
00033e 91ed      	LD   R30,X+
00033f 91fd      	LD   R31,X+
000340 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1:
                +
000341 91e0 02b2+LDS R30 , _CONSUM + ( 8 )
000343 91f0 02b3+LDS R31 , _CONSUM + ( 8 ) + 1
                 	__GETW1MN _CONSUM,8
000345 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x2:
000346 deaf      	RCALL _DisplayDigit
000347 01d8      	MOVW R26,R16
000348 e0ea      	LDI  R30,LOW(10)
000349 e0f0      	LDI  R31,HIGH(10)
00034a 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x3:
00034b 01fa      	MOVW R30,R20
00034c 01d8      	MOVW R26,R16
00034d d019      	RCALL __LSLW2
00034e 0fae      	ADD  R26,R30
00034f 1fbf      	ADC  R27,R31
                +
000350 91ed     +LD R30 , X +
000351 91fd     +LD R31 , X +
000352 916d     +LD R22 , X +
000353 917d     +LD R23 , X +
                 	__GETD1P_INC
000354 9508      	RET
                 
                 ;RUNTIME LIBRARY
                 
                 	.CSEG
                 __SAVELOCR6:
000355 935a      	ST   -Y,R21
                 __SAVELOCR5:
000356 934a      	ST   -Y,R20
                 __SAVELOCR4:
000357 933a      	ST   -Y,R19
                 __SAVELOCR3:
000358 932a      	ST   -Y,R18
                 __SAVELOCR2:
000359 931a      	ST   -Y,R17
00035a 930a      	ST   -Y,R16
00035b 9508      	RET
                 
                 __LOADLOCR6:
00035c 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
00035d 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
00035e 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
00035f 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
000360 8119      	LDD  R17,Y+1
000361 8108      	LD   R16,Y
000362 9508      	RET
                 
                 __ANEGW1:
000363 95f1      	NEG  R31
000364 95e1      	NEG  R30
000365 40f0      	SBCI R31,0
000366 9508      	RET
                 
                 __LSLW2:
000367 0fee      	LSL  R30
000368 1fff      	ROL  R31
000369 0fee      	LSL  R30
00036a 1fff      	ROL  R31
00036b 9508      	RET
                 
                 __ASRW4:
00036c 95f5      	ASR  R31
00036d 95e7      	ROR  R30
                 __ASRW3:
00036e 95f5      	ASR  R31
00036f 95e7      	ROR  R30
                 __ASRW2:
000370 95f5      	ASR  R31
000371 95e7      	ROR  R30
000372 95f5      	ASR  R31
000373 95e7      	ROR  R30
000374 9508      	RET
                 
                 __DIVW21U:
000375 2400      	CLR  R0
000376 2411      	CLR  R1
000377 e190      	LDI  R25,16
                 __DIVW21U1:
000378 0faa      	LSL  R26
000379 1fbb      	ROL  R27
00037a 1c00      	ROL  R0
00037b 1c11      	ROL  R1
00037c 1a0e      	SUB  R0,R30
00037d 0a1f      	SBC  R1,R31
00037e f418      	BRCC __DIVW21U2
00037f 0e0e      	ADD  R0,R30
000380 1e1f      	ADC  R1,R31
000381 c001      	RJMP __DIVW21U3
                 __DIVW21U2:
000382 60a1      	SBR  R26,1
                 __DIVW21U3:
000383 959a      	DEC  R25
000384 f799      	BRNE __DIVW21U1
000385 01fd      	MOVW R30,R26
000386 01d0      	MOVW R26,R0
000387 9508      	RET
                 
                 __DIVW21:
000388 d012      	RCALL __CHKSIGNW
000389 dfeb      	RCALL __DIVW21U
00038a f40e      	BRTC __DIVW211
00038b dfd7      	RCALL __ANEGW1
                 __DIVW211:
00038c 9508      	RET
                 
                 __MODW21:
00038d 94e8      	CLT
00038e ffb7      	SBRS R27,7
00038f c004      	RJMP __MODW211
000390 95b1      	NEG  R27
000391 95a1      	NEG  R26
000392 40b0      	SBCI R27,0
000393 9468      	SET
                 __MODW211:
000394 fdf7      	SBRC R31,7
000395 dfcd      	RCALL __ANEGW1
000396 dfde      	RCALL __DIVW21U
000397 01fd      	MOVW R30,R26
000398 f40e      	BRTC __MODW212
000399 dfc9      	RCALL __ANEGW1
                 __MODW212:
00039a 9508      	RET
                 
                 __CHKSIGNW:
00039b 94e8      	CLT
00039c fff7      	SBRS R31,7
00039d c002      	RJMP __CHKSW1
00039e dfc4      	RCALL __ANEGW1
00039f 9468      	SET
                 __CHKSW1:
0003a0 ffb7      	SBRS R27,7
0003a1 c006      	RJMP __CHKSW2
0003a2 95b1      	NEG  R27
0003a3 95a1      	NEG  R26
0003a4 40b0      	SBCI R27,0
0003a5 f800      	BLD  R0,0
0003a6 9403      	INC  R0
0003a7 fa00      	BST  R0,0
                 __CHKSW2:
0003a8 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega164A register use summary:
r0 :  16 r1 :   7 r2 :   0 r3 :   4 r4 :   2 r5 :   4 r6 :   4 r7 :   3 
r8 :   4 r9 :   4 r10:   1 r11:   4 r12:   2 r13:   4 r14:   2 r15:   2 
r16:  17 r17:  19 r18:   2 r19:   8 r20:   6 r21:   4 r22:  14 r23:   7 
r24:  11 r25:   8 r26:  75 r27:  22 r28:   4 r29:   1 r30: 274 r31:  74 
x  :  14 y  :  60 z  :  10 
Registers used: 34 out of 35 (97.1%)

ATmega164A instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   5 add   :   6 
adiw  :   5 and   :   0 andi  :   6 asr   :   6 bclr  :   0 bld   :   1 
brbc  :   0 brbs  :   0 brcc  :   1 brcs  :   0 break :   0 breq  :  13 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   0 
brlt  :   0 brmi  :   0 brne  :  30 brpl  :   0 brsh  :   2 brtc  :   2 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   1 call  :   0 
cbi   :   0 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :  11 cls   :   0 clt   :   2 clv   :   0 clz   :   0 com   :   1 
cp    :   7 cpc   :  18 cpi   :  27 cpse  :   0 dec   :   2 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :   8 inc   :   6 jmp   :  32 ld    :  27 ldd   :  10 ldi   : 112 
lds   :  26 lpm   :   9 lsl   :   7 lsr   :   0 mov   :  21 movw  :  21 
mul   :   0 muls  :   0 mulsu :   0 neg   :   6 nop   :   0 or    :   6 
ori   :   0 out   :  32 pop   :   0 push  :   0 rcall :  41 ret   :  25 
reti  :   1 rjmp  :  29 rol   :   7 ror   :   6 sbc   :   2 sbci  :   7 
sbi   :   1 sbic  :   0 sbis  :   0 sbiw  :   8 sbr   :   1 sbrc  :   1 
sbrs  :   3 sec   :   0 seh   :   0 sei   :   1 sen   :   0 ser   :   0 
ses   :   0 set   :   2 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  32 std   :   7 sts   :  53 sub   :   1 subi  :   5 swap  :   0 
tst   :   3 wdr   :   0 
Instructions used: 55 out of 116 (47.4%)

ATmega164A memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000752   1632    242   1874   16384  11.4%
[.dseg] 0x000100 0x0002c3      0    195    195    1024  19.0%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 16 warnings
