
AVRASM ver. 2.1.30  F:\AN 3 SEM 2\P2-ZOICAN\chestii alexutu\Electricity-Consumption-Meter\ATmega\Debug\List\main.asm Thu May 11 00:54:28 2023

F:\AN 3 SEM 2\P2-ZOICAN\chestii alexutu\Electricity-Consumption-Meter\ATmega\Debug\List\main.asm(1420): warning: Register r4 already defined by the .DEF directive
F:\AN 3 SEM 2\P2-ZOICAN\chestii alexutu\Electricity-Consumption-Meter\ATmega\Debug\List\main.asm(1421): warning: Register r3 already defined by the .DEF directive
F:\AN 3 SEM 2\P2-ZOICAN\chestii alexutu\Electricity-Consumption-Meter\ATmega\Debug\List\main.asm(1422): warning: Register r6 already defined by the .DEF directive
F:\AN 3 SEM 2\P2-ZOICAN\chestii alexutu\Electricity-Consumption-Meter\ATmega\Debug\List\main.asm(1423): warning: Register r5 already defined by the .DEF directive
F:\AN 3 SEM 2\P2-ZOICAN\chestii alexutu\Electricity-Consumption-Meter\ATmega\Debug\List\main.asm(1424): warning: Register r8 already defined by the .DEF directive
F:\AN 3 SEM 2\P2-ZOICAN\chestii alexutu\Electricity-Consumption-Meter\ATmega\Debug\List\main.asm(1425): warning: Register r7 already defined by the .DEF directive
F:\AN 3 SEM 2\P2-ZOICAN\chestii alexutu\Electricity-Consumption-Meter\ATmega\Debug\List\main.asm(1426): warning: Register r10 already defined by the .DEF directive
F:\AN 3 SEM 2\P2-ZOICAN\chestii alexutu\Electricity-Consumption-Meter\ATmega\Debug\List\main.asm(1427): warning: Register r9 already defined by the .DEF directive
F:\AN 3 SEM 2\P2-ZOICAN\chestii alexutu\Electricity-Consumption-Meter\ATmega\Debug\List\main.asm(1428): warning: Register r12 already defined by the .DEF directive
F:\AN 3 SEM 2\P2-ZOICAN\chestii alexutu\Electricity-Consumption-Meter\ATmega\Debug\List\main.asm(1429): warning: Register r11 already defined by the .DEF directive
F:\AN 3 SEM 2\P2-ZOICAN\chestii alexutu\Electricity-Consumption-Meter\ATmega\Debug\List\main.asm(1430): warning: Register r14 already defined by the .DEF directive
F:\AN 3 SEM 2\P2-ZOICAN\chestii alexutu\Electricity-Consumption-Meter\ATmega\Debug\List\main.asm(1431): warning: Register r13 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.49a 
                 ;(C) Copyright 1998-2022 Pavel Haiduc, HP InfoTech S.R.L.
                 ;http://www.hpinfotech.ro
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega164A
                 ;Program type           : Application
                 ;Clock frequency        : 10.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 256 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Mode 2
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega164A
                 	#pragma AVRPART MEMORY PROG_FLASH 16384
                 	#pragma AVRPART MEMORY EEPROM 512
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 1024
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x100
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU EECR=0x1F
                 	.EQU EEDR=0x20
                 	.EQU EEARL=0x21
                 	.EQU EEARH=0x22
                 	.EQU SPSR=0x2D
                 	.EQU SPDR=0x2E
                 	.EQU SMCR=0x33
                 	.EQU MCUSR=0x34
                 	.EQU MCUCR=0x35
                 	.EQU WDTCSR=0x60
                 	.EQU UCSR0A=0xC0
                 	.EQU UDR0=0xC6
                 	.EQU SPMCSR=0x37
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 	.EQU GPIOR0=0x1E
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0100
                 	.EQU __SRAM_END=0x04FF
                 	.EQU __DSTACK_SIZE=0x0100
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.EQU __FLASH_PAGE_SIZE=0x40
                 	.EQU __EEPROM_PAGE_SIZE=0x04
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETW1P
                 	LD   R30,X+
                 	LD   R31,X
                 	SBIW R26,1
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD1P_INC
                 	LD   R30,X+
                 	LD   R31,X+
                 	LD   R22,X+
                 	LD   R23,X+
                 	.ENDM
                 
                 	.MACRO __GETD1P_DEC
                 	LD   R23,-X
                 	LD   R22,-X
                 	LD   R31,-X
                 	LD   R30,-X
                 	.ENDM
                 
                 	.MACRO __PUTDP1
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTDP1_DEC
                 	ST   -X,R23
                 	ST   -X,R22
                 	ST   -X,R31
                 	ST   -X,R30
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __CPD10
                 	SBIW R30,0
                 	SBCI R22,0
                 	SBCI R23,0
                 	.ENDM
                 
                 	.MACRO __CPD20
                 	SBIW R26,0
                 	SBCI R24,0
                 	SBCI R25,0
                 	.ENDM
                 
                 	.MACRO __ADDD12
                 	ADD  R30,R26
                 	ADC  R31,R27
                 	ADC  R22,R24
                 	ADC  R23,R25
                 	.ENDM
                 
                 	.MACRO __ADDD21
                 	ADD  R26,R30
                 	ADC  R27,R31
                 	ADC  R24,R22
                 	ADC  R25,R23
                 	.ENDM
                 
                 	.MACRO __SUBD12
                 	SUB  R30,R26
                 	SBC  R31,R27
                 	SBC  R22,R24
                 	SBC  R23,R25
                 	.ENDM
                 
                 	.MACRO __SUBD21
                 	SUB  R26,R30
                 	SBC  R27,R31
                 	SBC  R24,R22
                 	SBC  R25,R23
                 	.ENDM
                 
                 	.MACRO __ANDD12
                 	AND  R30,R26
                 	AND  R31,R27
                 	AND  R22,R24
                 	AND  R23,R25
                 	.ENDM
                 
                 	.MACRO __ORD12
                 	OR   R30,R26
                 	OR   R31,R27
                 	OR   R22,R24
                 	OR   R23,R25
                 	.ENDM
                 
                 	.MACRO __XORD12
                 	EOR  R30,R26
                 	EOR  R31,R27
                 	EOR  R22,R24
                 	EOR  R23,R25
                 	.ENDM
                 
                 	.MACRO __XORD21
                 	EOR  R26,R30
                 	EOR  R27,R31
                 	EOR  R24,R22
                 	EOR  R25,R23
                 	.ENDM
                 
                 	.MACRO __COMD1
                 	COM  R30
                 	COM  R31
                 	COM  R22
                 	COM  R23
                 	.ENDM
                 
                 	.MACRO __MULD2_2
                 	LSL  R26
                 	ROL  R27
                 	ROL  R24
                 	ROL  R25
                 	.ENDM
                 
                 	.MACRO __LSRD1
                 	LSR  R23
                 	ROR  R22
                 	ROR  R31
                 	ROR  R30
                 	.ENDM
                 
                 	.MACRO __LSLD1
                 	LSL  R30
                 	ROL  R31
                 	ROL  R22
                 	ROL  R23
                 	.ENDM
                 
                 	.MACRO __ASRB4
                 	ASR  R30
                 	ASR  R30
                 	ASR  R30
                 	ASR  R30
                 	.ENDM
                 
                 	.MACRO __ASRW8
                 	MOV  R30,R31
                 	CLR  R31
                 	SBRC R30,7
                 	SER  R31
                 	.ENDM
                 
                 	.MACRO __LSRD16
                 	MOV  R30,R22
                 	MOV  R31,R23
                 	LDI  R22,0
                 	LDI  R23,0
                 	.ENDM
                 
                 	.MACRO __LSLD16
                 	MOV  R22,R30
                 	MOV  R23,R31
                 	LDI  R30,0
                 	LDI  R31,0
                 	.ENDM
                 
                 	.MACRO __CWD1
                 	MOV  R22,R31
                 	ADD  R22,R22
                 	SBC  R22,R22
                 	MOV  R23,R22
                 	.ENDM
                 
                 	.MACRO __CWD2
                 	MOV  R24,R27
                 	ADD  R24,R24
                 	SBC  R24,R24
                 	MOV  R25,R24
                 	.ENDM
                 
                 	.MACRO __SETMSD1
                 	SER  R31
                 	SER  R22
                 	SER  R23
                 	.ENDM
                 
                 	.MACRO __ADDW1R15
                 	CLR  R0
                 	ADD  R30,R15
                 	ADC  R31,R0
                 	.ENDM
                 
                 	.MACRO __ADDW2R15
                 	CLR  R0
                 	ADD  R26,R15
                 	ADC  R27,R0
                 	.ENDM
                 
                 	.MACRO __EQB12
                 	CP   R30,R26
                 	LDI  R30,1
                 	BREQ PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __NEB12
                 	CP   R30,R26
                 	LDI  R30,1
                 	BRNE PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __LEB12
                 	CP   R30,R26
                 	LDI  R30,1
                 	BRGE PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __GEB12
                 	CP   R26,R30
                 	LDI  R30,1
                 	BRGE PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __LTB12
                 	CP   R26,R30
                 	LDI  R30,1
                 	BRLT PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __GTB12
                 	CP   R30,R26
                 	LDI  R30,1
                 	BRLT PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __LEB12U
                 	CP   R30,R26
                 	LDI  R30,1
                 	BRSH PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __GEB12U
                 	CP   R26,R30
                 	LDI  R30,1
                 	BRSH PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __LTB12U
                 	CP   R26,R30
                 	LDI  R30,1
                 	BRLO PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __GTB12U
                 	CP   R30,R26
                 	LDI  R30,1
                 	BRLO PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __CPW01
                 	CLR  R0
                 	CP   R0,R30
                 	CPC  R0,R31
                 	.ENDM
                 
                 	.MACRO __CPW02
                 	CLR  R0
                 	CP   R0,R26
                 	CPC  R0,R27
                 	.ENDM
                 
                 	.MACRO __CPD12
                 	CP   R30,R26
                 	CPC  R31,R27
                 	CPC  R22,R24
                 	CPC  R23,R25
                 	.ENDM
                 
                 	.MACRO __CPD21
                 	CP   R26,R30
                 	CPC  R27,R31
                 	CPC  R24,R22
                 	CPC  R25,R23
                 	.ENDM
                 
                 	.MACRO __BSTB1
                 	CLT
                 	TST  R30
                 	BREQ PC+2
                 	SET
                 	.ENDM
                 
                 	.MACRO __LNEGB1
                 	TST  R30
                 	LDI  R30,1
                 	BREQ PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __LNEGW1
                 	OR   R30,R31
                 	LDI  R30,1
                 	BREQ PC+2
                 	LDI  R30,0
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2M
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	CALL __GETW1Z
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	CALL __GETD1Z
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __GETW2X
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __GETD2X
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _S1=R4
                 	.DEF _cnt_time=R3
                 	.DEF _T_SEC=R6
                 	.DEF _S2=R5
                 	.DEF _PULSE=R8
                 	.DEF _S_PULSE=R7
                 	.DEF _MODE=R10
                 	.DEF _modeFlag=R9
                 	.DEF _Q=R12
                 	.DEF _Q1=R11
                 	.DEF _S3=R14
                 	.DEF _C4=R13
                 
                 ;GPIOR0 INITIALIZATION VALUE
                 	.EQU __GPIOR0_INIT=0x00
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 00b3 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 00e2 	JMP  _timer0_ovf_isr
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
00002a 940c 0000 	JMP  0x00
00002c 940c 0000 	JMP  0x00
00002e 940c 0000 	JMP  0x00
000030 940c 0000 	JMP  0x00
000032 940c 0000 	JMP  0x00
000034 940c 0000 	JMP  0x00
000036 940c 0000 	JMP  0x00
000038 940c 0000 	JMP  0x00
00003a 940c 0000 	JMP  0x00
00003c 940c 0000 	JMP  0x00
                 
                 _DIGITS:
00003e f9c0
00003f b0a4
000040 9299
000041 f882      	.DB  0xC0,0xF9,0xA4,0xB0,0x99,0x92,0x82,0xF8
000042 9080      	.DB  0x80,0x90
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
000043 0000
000044 0000      	.DB  0x0,0x0,0x0,0x0
000045 0000
000046 0001      	.DB  0x0,0x0,0x1,0x0
                 
                 _0x3:
000047 0000
000048 0008
000049 0001
00004a 0000      	.DB  0x0,0x0,0x8,0x0,0x1,0x0,0x0,0x0
00004b 0000
00004c 0008
00004d 0001
00004e 0000      	.DB  0x0,0x0,0x8,0x0,0x1,0x0,0x0,0x0
00004f 0000
000050 0008
000051 0001
000052 0000      	.DB  0x0,0x0,0x8,0x0,0x1,0x0,0x0,0x0
000053 0000
000054 0008
000055 0001
000056 0000      	.DB  0x0,0x0,0x8,0x0,0x1,0x0,0x0,0x0
000057 0000
000058 0008
000059 0001
00005a 0000      	.DB  0x0,0x0,0x8,0x0,0x1,0x0,0x0,0x0
00005b 0000
00005c 1000      	.DB  0x0,0x0,0x0,0x10
                 _0x4:
00005d 0000
00005e 0010
00005f 0002
000060 0000      	.DB  0x0,0x0,0x10,0x0,0x2,0x0,0x0,0x0
000061 0000
000062 0010
000063 0002
000064 0000      	.DB  0x0,0x0,0x10,0x0,0x2,0x0,0x0,0x0
000065 0000
000066 0010
000067 0002
000068 0000      	.DB  0x0,0x0,0x10,0x0,0x2,0x0,0x0,0x0
000069 0000
00006a 0010
00006b 0002
00006c 0000      	.DB  0x0,0x0,0x10,0x0,0x2,0x0,0x0,0x0
00006d 0000
00006e 0010
00006f 0002
000070 0000      	.DB  0x0,0x0,0x10,0x0,0x2,0x0,0x0,0x0
000071 0000
000072 1000
F:\AN 3 SEM 2\P2-ZOICAN\chestii alexutu\Electricity-Consumption-Meter\ATmega\Debug\List\main.asm(1497): warning: .cseg .db misalignment - padding zero byte
000073 0001      	.DB  0x0,0x0,0x0,0x10,0x1
                 _0x5:
000074 0000
000075 0100
000076 0000
000077 0000      	.DB  0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0
000078 0000
000079 0200
00007a 0000
00007b 0000      	.DB  0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x0
00007c 0000
00007d 0300
00007e 0000
00007f 0000      	.DB  0x0,0x0,0x0,0x3,0x0,0x0,0x0,0x0
000080 0000
000081 0400
000082 0000
000083 0000      	.DB  0x0,0x0,0x0,0x4,0x0,0x0,0x0,0x0
000084 0000
000085 0500
000086 0003
000087 0000      	.DB  0x0,0x0,0x0,0x5,0x3,0x0,0x0,0x0
000088 0000
000089 1000
F:\AN 3 SEM 2\P2-ZOICAN\chestii alexutu\Electricity-Consumption-Meter\ATmega\Debug\List\main.asm(1504): warning: .cseg .db misalignment - padding zero byte
00008a 0002      	.DB  0x0,0x0,0x0,0x10,0x2
                 _0x6:
00008b 0000
00008c 0000
00008d 0000
00008e 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
00008f 0000
000090 1000
F:\AN 3 SEM 2\P2-ZOICAN\chestii alexutu\Electricity-Consumption-Meter\ATmega\Debug\List\main.asm(1507): warning: .cseg .db misalignment - padding zero byte
000091 0003      	.DB  0x0,0x0,0x0,0x10,0x3
                 _0x7:
000092 0200
000093 0230
000094 0260
000095 0290      	.DB  LOW(_A0),HIGH(_A0),LOW(_A1),HIGH(_A1),LOW(_A2),HIGH(_A2),LOW(_A3),HIGH(_A3)
                 _0x8:
000096 2000
000097 e060      	.DB  0x0,0x20,0x60,0xE0
                 _0x9:
000098 0201
F:\AN 3 SEM 2\P2-ZOICAN\chestii alexutu\Electricity-Consumption-Meter\ATmega\Debug\List\main.asm(1513): warning: .cseg .db misalignment - padding zero byte
000099 0003      	.DB  0x1,0x2,0x3
                 
                 __GLOBAL_INI_TBL:
00009a 0008      	.DW  0x08
00009b 0003      	.DW  0x03
00009c 0086      	.DW  __REG_VARS*2
                 
00009d 002c      	.DW  0x2C
00009e 0200      	.DW  _A0
00009f 008e      	.DW  _0x3*2
                 
0000a0 002d      	.DW  0x2D
0000a1 0230      	.DW  _A1
0000a2 00ba      	.DW  _0x4*2
                 
0000a3 002d      	.DW  0x2D
0000a4 0260      	.DW  _A2
0000a5 00e8      	.DW  _0x5*2
                 
0000a6 000d      	.DW  0x0D
0000a7 0290      	.DW  _A3
0000a8 0116      	.DW  _0x6*2
                 
0000a9 0008      	.DW  0x08
0000aa 02a0      	.DW  _TABA
0000ab 0124      	.DW  _0x7*2
                 
0000ac 0004      	.DW  0x04
0000ad 02c7      	.DW  _CLC_LEVEL
0000ae 012c      	.DW  _0x8*2
                 
0000af 0003      	.DW  0x03
0000b0 02cb      	.DW  _CLC_RANGE_OUTPUT
0000b1 0130      	.DW  _0x9*2
                 
                 _0xFFFFFFFF:
0000b2 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
0000b3 94f8      	CLI
0000b4 27ee      	CLR  R30
0000b5 bbef      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
0000b6 e0f1      	LDI  R31,1
0000b7 bff5      	OUT  MCUCR,R31
0000b8 bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
0000b9 e08d      	LDI  R24,(14-2)+1
0000ba e0a2      	LDI  R26,2
0000bb 27bb      	CLR  R27
                 __CLEAR_REG:
0000bc 93ed      	ST   X+,R30
0000bd 958a      	DEC  R24
0000be f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
0000bf e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
0000c0 e094      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
0000c1 e0a0      	LDI  R26,LOW(__SRAM_START)
0000c2 e0b1      	LDI  R27,HIGH(__SRAM_START)
                 __CLEAR_SRAM:
0000c3 93ed      	ST   X+,R30
0000c4 9701      	SBIW R24,1
0000c5 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
0000c6 e3e4      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
0000c7 e0f1      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
0000c8 9185      	LPM  R24,Z+
0000c9 9195      	LPM  R25,Z+
0000ca 9700      	SBIW R24,0
0000cb f061      	BREQ __GLOBAL_INI_END
0000cc 91a5      	LPM  R26,Z+
0000cd 91b5      	LPM  R27,Z+
0000ce 9005      	LPM  R0,Z+
0000cf 9015      	LPM  R1,Z+
0000d0 01bf      	MOVW R22,R30
0000d1 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
0000d2 9005      	LPM  R0,Z+
0000d3 920d      	ST   X+,R0
0000d4 9701      	SBIW R24,1
0000d5 f7e1      	BRNE __GLOBAL_INI_LOOP
0000d6 01fb      	MOVW R30,R22
0000d7 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;GPIOR0 INITIALIZATION
0000d8 e0e0      	LDI  R30,__GPIOR0_INIT
0000d9 bbee      	OUT  GPIOR0,R30
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
0000da efef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
0000db bfed      	OUT  SPL,R30
0000dc e0e4      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
0000dd bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
0000de e0c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
0000df e0d2      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
0000e0 940c 0107 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0x00
                 
                 	.DSEG
                 	.ORG 0x200
                 
                 	.CSEG
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x01
                 	.EQU __sm_mask=0x0E
                 	.EQU __sm_powerdown=0x04
                 	.EQU __sm_powersave=0x06
                 	.EQU __sm_standby=0x0C
                 	.EQU __sm_ext_standby=0x0E
                 	.EQU __sm_adc_noise_red=0x02
                 	.SET power_ctrl_reg=smcr
                 	#endif
                 
                 	.DSEG
                 ;void Init();
                 ;void UpdateConsumption();
                 ;void DisplayConsumption();
                 ;void DisplayDigit(char currentDisplay, char digit);
                 ;void UpdateTime();
                 ;void CLS();
                 ;void DisplayPowerLevel();
                 ;void DisplayConsumptionDisplayMode();
                 ;void DisplayInfo();
                 ;interrupt [19] void timer0_ovf_isr(void)
                 ; 0000 0080 {
                 
                 	.CSEG
                 _timer0_ovf_isr:
                 ; .FSTART _timer0_ovf_isr
0000e2 920a      	ST   -Y,R0
0000e3 921a      	ST   -Y,R1
0000e4 92fa      	ST   -Y,R15
0000e5 936a      	ST   -Y,R22
0000e6 937a      	ST   -Y,R23
0000e7 938a      	ST   -Y,R24
0000e8 939a      	ST   -Y,R25
0000e9 93aa      	ST   -Y,R26
0000ea 93ba      	ST   -Y,R27
0000eb 93ea      	ST   -Y,R30
0000ec 93fa      	ST   -Y,R31
0000ed b7ef      	IN   R30,SREG
0000ee 93ea      	ST   -Y,R30
                 ; 0000 0081 // Reinitialize Timer 0 value
                 ; 0000 0082 TCNT0=0x3C;
0000ef e3ec      	LDI  R30,LOW(60)
0000f0 bde6      	OUT  0x26,R30
                 ; 0000 0083 //Update current time
                 ; 0000 0084 UpdateTime();
0000f1 d128      	RCALL _UpdateTime
                 ; 0000 0085 
                 ; 0000 0086 // Update CA
                 ; 0000 0087 CA = (PIND & 0x80) >> 7;
0000f2 b1e9      	IN   R30,0x9
0000f3 d29d      	RCALL SUBOPT_0x0
0000f4 93e0 02c5 	STS  _CA,R30
                 ; 0000 0088 
                 ; 0000 0089 //DisplayInfo
                 ; 0000 008A DisplayInfo();
0000f6 d200      	RCALL _DisplayInfo
                 ; 0000 008B 
                 ; 0000 008C // Update mock pulse
                 ; 0000 008D // MockPULSE();
                 ; 0000 008E CLS();
0000f7 d1ab      	RCALL _CLS
                 ; 0000 008F // Check for pulses coming from ADSP
                 ; 0000 0090 UpdateConsumption();
0000f8 d076      	RCALL _UpdateConsumption
                 ; 0000 0091 
                 ; 0000 0092 }
0000f9 91e9      	LD   R30,Y+
0000fa bfef      	OUT  SREG,R30
0000fb 91f9      	LD   R31,Y+
0000fc 91e9      	LD   R30,Y+
0000fd 91b9      	LD   R27,Y+
0000fe 91a9      	LD   R26,Y+
0000ff 9199      	LD   R25,Y+
000100 9189      	LD   R24,Y+
000101 9179      	LD   R23,Y+
000102 9169      	LD   R22,Y+
000103 90f9      	LD   R15,Y+
000104 9019      	LD   R1,Y+
000105 9009      	LD   R0,Y+
000106 9518      	RETI
                 ; .FEND
                 ;void main(void)
                 ; 0000 0096 {
                 _main:
                 ; .FSTART _main
                 ; 0000 0097 // Declare your local variables here
                 ; 0000 0098 // Crystal Oscillator division factor: 1
                 ; 0000 0099 #pragma optsize-
                 ; 0000 009A CLKPR=(1<<CLKPCE);
000107 e8e0      	LDI  R30,LOW(128)
000108 93e0 0061 	STS  97,R30
                 ; 0000 009B CLKPR=(0<<CLKPCE) | (0<<CLKPS3) | (0<<CLKPS2) | (0<<CLKPS1) | (0<<CLKPS0);
00010a e0e0      	LDI  R30,LOW(0)
00010b 93e0 0061 	STS  97,R30
                 ; 0000 009C #ifdef _OPTIMIZE_SIZE_
                 ; 0000 009D #pragma optsize+
                 ; 0000 009E #endif
                 ; 0000 009F // Input/Output Ports initialization
                 ; 0000 00A0 // Port A initialization
                 ; 0000 00A1 // Function: Bit7=Out Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 00A2 DDRA=(1<<DDA7) | (0<<DDA6) | (0<<DDA5) | (0<<DDA4) | (0<<DDA3) | (0<<DDA2) | (0<<DDA1) | (0<<DDA0);
00010d e8e0      	LDI  R30,LOW(128)
00010e b9e1      	OUT  0x1,R30
                 ; 0000 00A3 // State: Bit7=1 Bit6=P Bit5=P Bit4=P Bit3=P Bit2=P Bit1=P Bit0=P
                 ; 0000 00A4 PORTA=(1<<PORTA7) | (1<<PORTA6) | (1<<PORTA5) | (1<<PORTA4) | (1<<PORTA3) | (1<<PORTA2) | (1<<PORTA1) | (1<<PORTA0);
00010f efef      	LDI  R30,LOW(255)
000110 b9e2      	OUT  0x2,R30
                 ; 0000 00A5 // Port B initialization
                 ; 0000 00A6 // Function: Bit7=Out Bit6=Out Bit5=Out Bit4=Out Bit3=Out Bit2=Out Bit1=Out Bit0=Out
                 ; 0000 00A7 DDRB=(1<<DDB7) | (1<<DDB6) | (1<<DDB5) | (1<<DDB4) | (1<<DDB3) | (1<<DDB2) | (1<<DDB1) | (1<<DDB0);
000111 b9e4      	OUT  0x4,R30
                 ; 0000 00A8 // State: Bit7=1 Bit6=1 Bit5=1 Bit4=1 Bit3=1 Bit2=1 Bit1=1 Bit0=1
                 ; 0000 00A9 PORTB=(1<<PORTB7) | (1<<PORTB6) | (1<<PORTB5) | (1<<PORTB4) | (1<<PORTB3) | (1<<PORTB2) | (1<<PORTB1) | (1<<PORTB0);
000112 b9e5      	OUT  0x5,R30
                 ; 0000 00AA // Port C initialization
                 ; 0000 00AB // Function: Bit7=Out Bit6=Out Bit5=Out Bit4=Out Bit3=Out Bit2=Out Bit1=Out Bit0=Out
                 ; 0000 00AC DDRC=(1<<DDC7) | (1<<DDC6) | (1<<DDC5) | (1<<DDC4) | (1<<DDC3) | (1<<DDC2) | (1<<DDC1) | (1<<DDC0);
000113 b9e7      	OUT  0x7,R30
                 ; 0000 00AD // State: Bit7=1 Bit6=1 Bit5=1 Bit4=1 Bit3=1 Bit2=1 Bit1=1 Bit0=1
                 ; 0000 00AE PORTC=(1<<PORTC7) | (1<<PORTC6) | (1<<PORTC5) | (1<<PORTC4) | (1<<PORTC3) | (1<<PORTC2) | (1<<PORTC1) | (1<<PORTC0);
000114 b9e8      	OUT  0x8,R30
                 ; 0000 00AF // Port D initialization
                 ; 0000 00B0 // Function: Bit7=In Bit6=In Bit5=Out Bit4=Out Bit3=Out Bit2=Out Bit1=Out Bit0=Out
                 ; 0000 00B1 DDRD=(0<<DDD7) | (0<<DDD6) | (1<<DDD5) | (1<<DDD4) | (1<<DDD3) | (1<<DDD2) | (1<<DDD1) | (1<<DDD0);
000115 e3ef      	LDI  R30,LOW(63)
000116 b9ea      	OUT  0xA,R30
                 ; 0000 00B2 // State: Bit7=T Bit6=T Bit5=1 Bit4=1 Bit3=1 Bit2=1 Bit1=1 Bit0=1
                 ; 0000 00B3 PORTD=(0<<PORTD7) | (0<<PORTD6) | (1<<PORTD5) | (1<<PORTD4) | (1<<PORTD3) | (1<<PORTD2) | (1<<PORTD1) | (1<<PORTD0);
000117 b9eb      	OUT  0xB,R30
                 ; 0000 00B4 // Timer/Counter 0 initialization
                 ; 0000 00B5 // Clock source: System Clock
                 ; 0000 00B6 // Clock value: 9.766 kHz
                 ; 0000 00B7 // Mode: Normal top=0xFF
                 ; 0000 00B8 // OC0A output: Disconnected
                 ; 0000 00B9 // OC0B output: Disconnected
                 ; 0000 00BA // Timer Period: 20.07 ms
                 ; 0000 00BB TCCR0A=(0<<COM0A1) | (0<<COM0A0) | (0<<COM0B1) | (0<<COM0B0) | (0<<WGM01) | (0<<WGM00);
000118 e0e0      	LDI  R30,LOW(0)
000119 bde4      	OUT  0x24,R30
                 ; 0000 00BC TCCR0B=(0<<WGM02) | (1<<CS02) | (0<<CS01) | (1<<CS00);
00011a e0e5      	LDI  R30,LOW(5)
00011b bde5      	OUT  0x25,R30
                 ; 0000 00BD TCNT0=0x3C;
00011c e3ec      	LDI  R30,LOW(60)
00011d bde6      	OUT  0x26,R30
                 ; 0000 00BE OCR0A=0x00;
00011e e0e0      	LDI  R30,LOW(0)
00011f bde7      	OUT  0x27,R30
                 ; 0000 00BF OCR0B=0x00;
000120 bde8      	OUT  0x28,R30
                 ; 0000 00C0 // Timer/Counter 1 initialization
                 ; 0000 00C1 // Clock source: System Clock
                 ; 0000 00C2 // Clock value: Timer1 Stopped
                 ; 0000 00C3 // Mode: Normal top=0xFFFF
                 ; 0000 00C4 // OC1A output: Disconnected
                 ; 0000 00C5 // OC1B output: Disconnected
                 ; 0000 00C6 // Noise Canceler: Off
                 ; 0000 00C7 // Input Capture on Falling Edge
                 ; 0000 00C8 // Timer1 Overflow Interrupt: Off
                 ; 0000 00C9 // Input Capture Interrupt: Off
                 ; 0000 00CA // Compare A Match Interrupt: Off
                 ; 0000 00CB // Compare B Match Interrupt: Off
                 ; 0000 00CC TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
000121 93e0 0080 	STS  128,R30
                 ; 0000 00CD TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (0<<CS11) | (0<<CS10);
000123 93e0 0081 	STS  129,R30
                 ; 0000 00CE TCNT1H=0x00;
000125 93e0 0085 	STS  133,R30
                 ; 0000 00CF TCNT1L=0x00;
000127 93e0 0084 	STS  132,R30
                 ; 0000 00D0 ICR1H=0x00;
000129 93e0 0087 	STS  135,R30
                 ; 0000 00D1 ICR1L=0x00;
00012b 93e0 0086 	STS  134,R30
                 ; 0000 00D2 OCR1AH=0x00;
00012d 93e0 0089 	STS  137,R30
                 ; 0000 00D3 OCR1AL=0x00;
00012f 93e0 0088 	STS  136,R30
                 ; 0000 00D4 OCR1BH=0x00;
000131 93e0 008b 	STS  139,R30
                 ; 0000 00D5 OCR1BL=0x00;
000133 93e0 008a 	STS  138,R30
                 ; 0000 00D6 
                 ; 0000 00D7 // Timer/Counter 2 initialization
                 ; 0000 00D8 // Clock source: System Clock
                 ; 0000 00D9 // Clock value: Timer2 Stopped
                 ; 0000 00DA // Mode: Normal top=0xFF
                 ; 0000 00DB // OC2A output: Disconnected
                 ; 0000 00DC // OC2B output: Disconnected
                 ; 0000 00DD ASSR=(0<<EXCLK) | (0<<AS2);
000135 93e0 00b6 	STS  182,R30
                 ; 0000 00DE TCCR2A=(0<<COM2A1) | (0<<COM2A0) | (0<<COM2B1) | (0<<COM2B0) | (0<<WGM21) | (0<<WGM20);
000137 93e0 00b0 	STS  176,R30
                 ; 0000 00DF TCCR2B=(0<<WGM22) | (0<<CS22) | (0<<CS21) | (0<<CS20);
000139 93e0 00b1 	STS  177,R30
                 ; 0000 00E0 TCNT2=0x00;
00013b 93e0 00b2 	STS  178,R30
                 ; 0000 00E1 OCR2A=0x00;
00013d 93e0 00b3 	STS  179,R30
                 ; 0000 00E2 OCR2B=0x00;
00013f 93e0 00b4 	STS  180,R30
                 ; 0000 00E3 // Timer/Counter 0 Interrupt(s) initialization
                 ; 0000 00E4 TIMSK0=(0<<OCIE0B) | (0<<OCIE0A) | (1<<TOIE0);
000141 e0e1      	LDI  R30,LOW(1)
000142 93e0 006e 	STS  110,R30
                 ; 0000 00E5 // Timer/Counter 1 Interrupt(s) initialization
                 ; 0000 00E6 TIMSK1=(0<<ICIE1) | (0<<OCIE1B) | (0<<OCIE1A) | (0<<TOIE1);
000144 e0e0      	LDI  R30,LOW(0)
000145 93e0 006f 	STS  111,R30
                 ; 0000 00E7 // Timer/Counter 2 Interrupt(s) initialization
                 ; 0000 00E8 TIMSK2=(0<<OCIE2B) | (0<<OCIE2A) | (0<<TOIE2);
000147 93e0 0070 	STS  112,R30
                 ; 0000 00E9 // External Interrupt(s) initialization
                 ; 0000 00EA // INT0: Off
                 ; 0000 00EB // INT1: Off
                 ; 0000 00EC // INT2: Off
                 ; 0000 00ED // Interrupt on any change on pins PCINT0-7: Off
                 ; 0000 00EE // Interrupt on any change on pins PCINT8-15: Off
                 ; 0000 00EF // Interrupt on any change on pins PCINT16-23: Off
                 ; 0000 00F0 // Interrupt on any change on pins PCINT24-31: Off
                 ; 0000 00F1 EICRA=(0<<ISC21) | (0<<ISC20) | (0<<ISC11) | (0<<ISC10) | (0<<ISC01) | (0<<ISC00);
000149 93e0 0069 	STS  105,R30
                 ; 0000 00F2 EIMSK=(0<<INT2) | (0<<INT1) | (0<<INT0);
00014b bbed      	OUT  0x1D,R30
                 ; 0000 00F3 PCICR=(0<<PCIE3) | (0<<PCIE2) | (0<<PCIE1) | (0<<PCIE0);
00014c 93e0 0068 	STS  104,R30
                 ; 0000 00F4 // USART0 initialization
                 ; 0000 00F5 // USART0 disabled
                 ; 0000 00F6 UCSR0B=(0<<RXCIE0) | (0<<TXCIE0) | (0<<UDRIE0) | (0<<RXEN0) | (0<<TXEN0) | (0<<UCSZ02) | (0<<RXB80) | (0<<TXB80);
00014e 93e0 00c1 	STS  193,R30
                 ; 0000 00F7 
                 ; 0000 00F8 // USART1 initialization
                 ; 0000 00F9 // USART1 disabled
                 ; 0000 00FA UCSR1B=(0<<RXCIE1) | (0<<TXCIE1) | (0<<UDRIE1) | (0<<RXEN1) | (0<<TXEN1) | (0<<UCSZ12) | (0<<RXB81) | (0<<TXB81);
000150 93e0 00c9 	STS  201,R30
                 ; 0000 00FB // Analog Comparator initialization
                 ; 0000 00FC // Analog Comparator: Off
                 ; 0000 00FD // The Analog Comparator's positive input is
                 ; 0000 00FE // connected to the AIN0 pin
                 ; 0000 00FF // The Analog Comparator's negative input is
                 ; 0000 0100 // connected to the AIN1 pin
                 ; 0000 0101 ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
000152 e8e0      	LDI  R30,LOW(128)
000153 bfe0      	OUT  0x30,R30
                 ; 0000 0102 ADCSRB=(0<<ACME);
000154 e0e0      	LDI  R30,LOW(0)
000155 93e0 007b 	STS  123,R30
                 ; 0000 0103 // Digital input buffer on AIN0: On
                 ; 0000 0104 // Digital input buffer on AIN1: On
                 ; 0000 0105 DIDR1=(0<<AIN0D) | (0<<AIN1D);
000157 93e0 007f 	STS  127,R30
                 ; 0000 0106 // ADC initialization
                 ; 0000 0107 // ADC disabled
                 ; 0000 0108 ADCSRA=(0<<ADEN) | (0<<ADSC) | (0<<ADATE) | (0<<ADIF) | (0<<ADIE) | (0<<ADPS2) | (0<<ADPS1) | (0<<ADPS0);
000159 93e0 007a 	STS  122,R30
                 ; 0000 0109 // SPI initialization
                 ; 0000 010A // SPI disabled
                 ; 0000 010B SPCR=(0<<SPIE) | (0<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
00015b bdec      	OUT  0x2C,R30
                 ; 0000 010C // TWI initialization
                 ; 0000 010D // TWI disabled
                 ; 0000 010E TWCR=(0<<TWEA) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWEN) | (0<<TWIE);
00015c 93e0 00bc 	STS  188,R30
                 ; 0000 010F 
                 ; 0000 0110 // Globally enable interrupts
                 ; 0000 0111 #asm("sei")
00015e 9478      	SEI
                 ; 0000 0112 
                 ; 0000 0113 // Initialize the device
                 ; 0000 0114 Init();
00015f d003      	RCALL _Init
                 ; 0000 0115 while (1)
                 _0xA:
                 ; 0000 0116 {
                 ; 0000 0117 // Display the consumption
                 ; 0000 0118 DisplayConsumption();
000160 d04d      	RCALL _DisplayConsumption
                 ; 0000 0119 // Wait for interruptions
                 ; 0000 011A }
000161 cffe      	RJMP _0xA
                 ; 0000 011B }
                 _0xD:
000162 cfff      	RJMP _0xD
                 ; .FEND
                 ;void Init()
                 ; 0000 011E {
                 _Init:
                 ; .FSTART _Init
                 ; 0000 011F // Setting initial states = 0
                 ; 0000 0120 Q = Q1 = S1 = S2 = S3 = S_PULSE =  0;
000163 e0e0      	LDI  R30,LOW(0)
000164 2e7e      	MOV  R7,R30
000165 2eee      	MOV  R14,R30
000166 2e5e      	MOV  R5,R30
000167 2e4e      	MOV  R4,R30
000168 2ebe      	MOV  R11,R30
000169 2ece      	MOV  R12,R30
                 ; 0000 0121 
                 ; 0000 0122 // Turn off displays
                 ; 0000 0123 PORTC = 0xff;
00016a efef      	LDI  R30,LOW(255)
00016b b9e8      	OUT  0x8,R30
                 ; 0000 0124 PORTD = 0xff;
00016c b9eb      	OUT  0xB,R30
                 ; 0000 0125 PORTB = 0xff;
00016d b9e5      	OUT  0x5,R30
                 ; 0000 0126 }
00016e 9508      	RET
                 ; .FEND
                 ;void UpdateConsumption()
                 ; 0000 0129 {
                 _UpdateConsumption:
                 ; .FSTART _UpdateConsumption
                 ; 0000 012A // Reading the power level
                 ; 0000 012B PowerLevel = (PINA & 0x7E) >> 1;
00016f b1e0      	IN   R30,0x0
000170 77ee      	ANDI R30,LOW(0x7E)
000171 e0f0      	LDI  R31,0
000172 95f5      	ASR  R31
000173 95e7      	ROR  R30
000174 93e0 02c6 	STS  _PowerLevel,R30
                 ; 0000 012C PULSE = PINA & 0x01;
000176 b1e0      	IN   R30,0x0
000177 70e1      	ANDI R30,LOW(0x1)
000178 2e8e      	MOV  R8,R30
                 ; 0000 012D 
                 ; 0000 012E switch(S2)
000179 2de5      	MOV  R30,R5
00017a e0f0      	LDI  R31,0
                 ; 0000 012F {
                 ; 0000 0130 case 0:
00017b 9730      	SBIW R30,0
00017c f4b1      	BRNE _0x11
                 ; 0000 0131 {
                 ; 0000 0132 // If PULSE is on, start counting
                 ; 0000 0133 if (PULSE)
00017d 2088      	TST  R8
00017e f099      	BREQ _0x12
                 ; 0000 0134 {
                 ; 0000 0135 // Increment cntP
                 ; 0000 0136 cntP += 1;
00017f 91e0 02cf 	LDS  R30,_cntP
000181 5fef      	SUBI R30,-LOW(1)
000182 93e0 02cf 	STS  _cntP,R30
                 ; 0000 0137 
                 ; 0000 0138 // Reset reading flag
                 ; 0000 0139 // PORTD &= 0x7f;
                 ; 0000 013A 
                 ; 0000 013B if (modeFlag)
000184 2099      	TST  R9
000185 f021      	BREQ _0x13
                 ; 0000 013C {
                 ; 0000 013D MODE = (PINA & 0x80) >> 7;
000186 b1e0      	IN   R30,0x0
000187 d209      	RCALL SUBOPT_0x0
000188 2eae      	MOV  R10,R30
                 ; 0000 013E modeFlag = 0;
000189 2499      	CLR  R9
                 ; 0000 013F }
                 ; 0000 0140 
                 ; 0000 0141 // Go further if the pulse period has passed,
                 ; 0000 0142 // otherwise go back wait for sensding ack again.
                 ; 0000 0143 S2 = (cntP == DP) ? 1 : 0;
                 _0x13:
00018a 91a0 02cf 	LDS  R26,_cntP
00018c 30a2      	CPI  R26,LOW(0x2)
00018d f411      	BRNE _0x14
00018e e0e1      	LDI  R30,LOW(1)
00018f c001      	RJMP _0x15
                 _0x14:
000190 e0e0      	LDI  R30,LOW(0)
                 _0x15:
000191 2e5e      	MOV  R5,R30
                 ; 0000 0144 }
                 ; 0000 0145 break;
                 _0x12:
000192 c01a      	RJMP _0x10
                 ; 0000 0146 }
                 ; 0000 0147 case 1:
                 _0x11:
000193 30e1      	CPI  R30,LOW(0x1)
000194 e0a0      	LDI  R26,HIGH(0x1)
000195 07fa      	CPC  R31,R26
000196 f4b1      	BRNE _0x10
                 ; 0000 0148 {
                 ; 0000 0149 if (PULSE == 0)
000197 2088      	TST  R8
000198 f4a1      	BRNE _0x18
                 ; 0000 014A {
                 ; 0000 014B // Update current consumption range
                 ; 0000 014C //CLS();
                 ; 0000 014D 
                 ; 0000 014E // Increment consumption
                 ; 0000 014F if (MODE == 0)
000199 20aa      	TST  R10
00019a f441      	BRNE _0x19
                 ; 0000 0150 {
                 ; 0000 0151 CONSUM[Q] += 1;    // Working range on
00019b 2dec      	MOV  R30,R12
00019c d1f9      	RCALL SUBOPT_0x1
00019d 91ed      	LD   R30,X+
00019e 91fd      	LD   R31,X+
00019f 9631      	ADIW R30,1
0001a0 93fe      	ST   -X,R31
0001a1 93ee      	ST   -X,R30
                 ; 0000 0152 
                 ; 0000 0153 // if(CONSUM[Q]%6 == 0 && CONSUM[4]%8 == 0) CONSUM[Q] +=1;
                 ; 0000 0154 }
                 ; 0000 0155 else
0001a2 c006      	RJMP _0x1A
                 _0x19:
                 ; 0000 0156 {
                 ; 0000 0157 CONSUM[4] += 1;    // Working range off
0001a3 d1fa      	RCALL SUBOPT_0x2
0001a4 9631      	ADIW R30,1
                +
0001a5 93e0 02c0+STS _CONSUM + ( 8 ) , R30
0001a7 93f0 02c1+STS _CONSUM + ( 8 ) + 1 , R31
                 	__PUTW1MN _CONSUM,8
                 ; 0000 0158 
                 ; 0000 0159 
                 ; 0000 015A // if(CONSUM[4]%6 == 0 && CONSUM[4]%8 == 0)   CONSUM[4] +=1;
                 ; 0000 015B 
                 ; 0000 015C 
                 ; 0000 015D }
                 _0x1A:
                 ; 0000 015E 
                 ; 0000 015F // Wait for another pulse
                 ; 0000 0160 S2 = 0;
0001a9 2455      	CLR  R5
                 ; 0000 0161 cntP = 0;
0001aa e0e0      	LDI  R30,LOW(0)
0001ab 93e0 02cf 	STS  _cntP,R30
                 ; 0000 0162 }
                 ; 0000 0163 break;
                 _0x18:
                 ; 0000 0164 }
                 ; 0000 0165 }
                 _0x10:
                 ; 0000 0166 }
0001ad 9508      	RET
                 ; .FEND
                 ;void DisplayConsumption()
                 ; 0000 0169 {
                 _DisplayConsumption:
                 ; .FSTART _DisplayConsumption
                 ; 0000 016A // We assume:
                 ; 0000 016B // PORTC: PC0 - PC6 -> 7 segments (A-G)
                 ; 0000 016C // PORTD: PD0 - PD3 -> select the common cathode for each digit (multiplexing)
                 ; 0000 016D // PD3 - C4, PD2 - C3, PD1 - C2, PD0 - C1
                 ; 0000 016E // Q - consumption range:
                 ; 0000 016F // 0 -> 00:00 - H1:00
                 ; 0000 0170 // 1 -> H1:00 - H2:00               (MON - FRI)
                 ; 0000 0171 // 2 -> H2:00 - 00:00 (next day)
                 ; 0000 0172 // 3 -> SAT - SUN
                 ; 0000 0173 
                 ; 0000 0174 // The actual approach:
                 ; 0000 0175 // Each main loop iteration we multiplex the digits and display one at a time
                 ; 0000 0176 
                 ; 0000 0177 // If MODE = 1 -> display total consumption,
                 ; 0000 0178 // else -> display consumption based on current range.
                 ; 0000 0179 int cons = (MODE) ?  CONSUM[4] : CONSUM[Q1];
                 ; 0000 017A 
                 ; 0000 017B if (modeFlag) return; //daca nu s-a trimis primul puls nu se afiseaza nimic
0001ae 931a      	ST   -Y,R17
0001af 930a      	ST   -Y,R16
                 ;	cons -> R16,R17
0001b0 2dea      	MOV  R30,R10
0001b1 e0f0      	LDI  R31,0
0001b2 9730      	SBIW R30,0
0001b3 f011      	BREQ _0x1B
0001b4 d1e9      	RCALL SUBOPT_0x2
0001b5 c005      	RJMP _0x1C
                 _0x1B:
0001b6 2deb      	MOV  R30,R11
0001b7 d1de      	RCALL SUBOPT_0x1
                +
0001b8 91ed     +LD R30 , X +
0001b9 91fc     +LD R31 , X
0001ba 9711     +SBIW R26 , 1
                 	__GETW1P
                 _0x1C:
0001bb 018f      	MOVW R16,R30
0001bc 2099      	TST  R9
0001bd f571      	BRNE _0x2000003
                 ; 0000 017C // Compute and display C4
                 ; 0000 017D C4 = cons / 1000;
0001be 01d8      	MOVW R26,R16
0001bf eee8      	LDI  R30,LOW(1000)
0001c0 e0f3      	LDI  R31,HIGH(1000)
0001c1 d270      	RCALL __DIVW21
0001c2 2ede      	MOV  R13,R30
                 ; 0000 017E cons %= 1000;
0001c3 01d8      	MOVW R26,R16
0001c4 eee8      	LDI  R30,LOW(1000)
0001c5 e0f3      	LDI  R31,HIGH(1000)
0001c6 d270      	RCALL __MODW21
0001c7 018f      	MOVW R16,R30
                 ; 0000 017F DisplayDigit(4, C4);
0001c8 e0e4      	LDI  R30,LOW(4)
0001c9 93ea      	ST   -Y,R30
0001ca 2dad      	MOV  R26,R13
0001cb d023      	RCALL _DisplayDigit
                 ; 0000 0180 
                 ; 0000 0181 // Compute and display C3
                 ; 0000 0182 C3 = cons / 100;
0001cc 01d8      	MOVW R26,R16
0001cd e6e4      	LDI  R30,LOW(100)
0001ce e0f0      	LDI  R31,HIGH(100)
0001cf d262      	RCALL __DIVW21
0001d0 93e0 02c2 	STS  _C3,R30
                 ; 0000 0183 cons %= 100;
0001d2 01d8      	MOVW R26,R16
0001d3 e6e4      	LDI  R30,LOW(100)
0001d4 e0f0      	LDI  R31,HIGH(100)
0001d5 d261      	RCALL __MODW21
0001d6 018f      	MOVW R16,R30
                 ; 0000 0184 DisplayDigit(3, C3);
0001d7 e0e3      	LDI  R30,LOW(3)
0001d8 93ea      	ST   -Y,R30
0001d9 91a0 02c2 	LDS  R26,_C3
0001db d1c7      	RCALL SUBOPT_0x3
                 ; 0000 0185 
                 ; 0000 0186 // Compute and display C2
                 ; 0000 0187 C2 = cons / 10;
0001dc d255      	RCALL __DIVW21
0001dd 93e0 02c3 	STS  _C2,R30
                 ; 0000 0188 DisplayDigit(2, C2);
0001df e0e2      	LDI  R30,LOW(2)
0001e0 93ea      	ST   -Y,R30
0001e1 91a0 02c3 	LDS  R26,_C2
0001e3 d1bf      	RCALL SUBOPT_0x3
                 ; 0000 0189 
                 ; 0000 018A // Compute and display C1
                 ; 0000 018B C1 = cons % 10;
0001e4 d252      	RCALL __MODW21
0001e5 93e0 02c4 	STS  _C1,R30
                 ; 0000 018C DisplayDigit(1, C1);
0001e7 e0e1      	LDI  R30,LOW(1)
0001e8 93ea      	ST   -Y,R30
0001e9 91a0 02c4 	LDS  R26,_C1
0001eb d003      	RCALL _DisplayDigit
                 ; 0000 018D }
                 _0x2000003:
0001ec 9109      	LD   R16,Y+
0001ed 9119      	LD   R17,Y+
0001ee 9508      	RET
                 ; .FEND
                 ;void DisplayDigit(char currentDisplay, char digit)
                 ; 0000 0190 {
                 _DisplayDigit:
                 ; .FSTART _DisplayDigit
                 ; 0000 0191 // Set PORTC pins to the corresponding digit
                 ; 0000 0192 // PORTC = DIGITS[digit];
                 ; 0000 0193 
                 ; 0000 0194 // Select the desired display (turn on the pin
                 ; 0000 0195 // corresponding to the desired digit (C4/C3/C2/C1)
                 ; 0000 0196 // char output = 0xff;
                 ; 0000 0197 char output;
                 ; 0000 0198 
                 ; 0000 0199 switch (currentDisplay)
0001ef d1fa      	RCALL __SAVELOCR4
0001f0 2f0a      	MOV  R16,R26
0001f1 813c      	LDD  R19,Y+4
                 ;	currentDisplay -> R19
                 ;	digit -> R16
                 ;	output -> R17
0001f2 2fe3      	MOV  R30,R19
0001f3 e0f0      	LDI  R31,0
                 ; 0000 019A {
                 ; 0000 019B case 4:
0001f4 30e4      	CPI  R30,LOW(0x4)
0001f5 e0a0      	LDI  R26,HIGH(0x4)
0001f6 07fa      	CPC  R31,R26
0001f7 f411      	BRNE _0x22
                 ; 0000 019C // Turn PD3 on
                 ; 0000 019D //output &= 0b00000111;
                 ; 0000 019E output = 0x08;
0001f8 e018      	LDI  R17,LOW(8)
                 ; 0000 019F break;
0001f9 c011      	RJMP _0x21
                 ; 0000 01A0 case 3:
                 _0x22:
0001fa 30e3      	CPI  R30,LOW(0x3)
0001fb e0a0      	LDI  R26,HIGH(0x3)
0001fc 07fa      	CPC  R31,R26
0001fd f411      	BRNE _0x23
                 ; 0000 01A1 // Turn PD2 on
                 ; 0000 01A2 // output &= 0b00001011;
                 ; 0000 01A3 output = 0x04;
0001fe e014      	LDI  R17,LOW(4)
                 ; 0000 01A4 break;
0001ff c00b      	RJMP _0x21
                 ; 0000 01A5 case 2:
                 _0x23:
000200 30e2      	CPI  R30,LOW(0x2)
000201 e0a0      	LDI  R26,HIGH(0x2)
000202 07fa      	CPC  R31,R26
000203 f411      	BRNE _0x24
                 ; 0000 01A6 // Turn PD1 on
                 ; 0000 01A7 output = 0x02;
000204 e012      	LDI  R17,LOW(2)
                 ; 0000 01A8 break;
000205 c005      	RJMP _0x21
                 ; 0000 01A9 case 1:
                 _0x24:
000206 30e1      	CPI  R30,LOW(0x1)
000207 e0a0      	LDI  R26,HIGH(0x1)
000208 07fa      	CPC  R31,R26
000209 f409      	BRNE _0x21
                 ; 0000 01AA // Turn PD0 on
                 ; 0000 01AB output = 0x01;
00020a e011      	LDI  R17,LOW(1)
                 ; 0000 01AC break;
                 ; 0000 01AD }
                 _0x21:
                 ; 0000 01AE 
                 ; 0000 01AF // Delete PD0-3
                 ; 0000 01B0 PORTD &= 0xF0;
00020b b1eb      	IN   R30,0xB
00020c 7fe0      	ANDI R30,LOW(0xF0)
00020d b9eb      	OUT  0xB,R30
                 ; 0000 01B1 
                 ; 0000 01B2 // Assign output to PORTC in order to select the desired display;
                 ; 0000 01B3 PORTD |= output;
00020e b1eb      	IN   R30,0xB
00020f 2be1      	OR   R30,R17
000210 b9eb      	OUT  0xB,R30
                 ; 0000 01B4 
                 ; 0000 01B5 // Set PORTC pins to the corresponding digit
                 ; 0000 01B6 PORTC = DIGITS[digit];
000211 2fe0      	MOV  R30,R16
000212 e0f0      	LDI  R31,0
000213 58e4      	SUBI R30,LOW(-_DIGITS*2)
000214 4fff      	SBCI R31,HIGH(-_DIGITS*2)
000215 9004      	LPM  R0,Z
000216 b808      	OUT  0x8,R0
                 ; 0000 01B7 
                 ; 0000 01B8 // Add delay (10 us)
                 ; 0000 01B9 //_display_us(10);
                 ; 0000 01BA }
000217 d1d9      	RCALL __LOADLOCR4
000218 9625      	ADIW R28,5
000219 9508      	RET
                 ; .FEND
                 ;void UpdateTime(){
                 ; 0000 01BD void UpdateTime(){
                 _UpdateTime:
                 ; .FSTART _UpdateTime
                 ; 0000 01BE cnt_time += 1; //incrementare contor de timp
00021a 9433      	INC  R3
                 ; 0000 01BF if(cnt_time != T_SEC) return;
00021b 1463      	CP   R6,R3
00021c f009      	BREQ _0x26
00021d 9508      	RET
                 ; 0000 01C0 
                 ; 0000 01C1 cnt_time = 0; // se reseteaza contorul
                 _0x26:
00021e 2433      	CLR  R3
                 ; 0000 01C2 S+=1;  //incrementeaza contor secunde
00021f 91e0 02b4 	LDS  R30,_S
000221 91f0 02b5 	LDS  R31,_S+1
000223 9160 02b6 	LDS  R22,_S+2
000225 9170 02b7 	LDS  R23,_S+3
000227 d180      	RCALL SUBOPT_0x4
000228 93e0 02b4 	STS  _S,R30
00022a 93f0 02b5 	STS  _S+1,R31
00022c 9360 02b6 	STS  _S+2,R22
00022e 9370 02b7 	STS  _S+3,R23
                 ; 0000 01C3 
                 ; 0000 01C4 if(S!=60) return;
000230 d17c      	RCALL SUBOPT_0x5
000231 d184      	RCALL SUBOPT_0x6
000232 f009      	BREQ _0x27
000233 9508      	RET
                 ; 0000 01C5 S = 0;//se reseteaza nr de secunde
                 _0x27:
000234 e0e0      	LDI  R30,LOW(0)
000235 93e0 02b4 	STS  _S,R30
000237 93e0 02b5 	STS  _S+1,R30
000239 93e0 02b6 	STS  _S+2,R30
00023b 93e0 02b7 	STS  _S+3,R30
                 ; 0000 01C6 M += 1; //incrementeaza contor minute
00023d 91e0 02b0 	LDS  R30,_M
00023f 91f0 02b1 	LDS  R31,_M+1
000241 9160 02b2 	LDS  R22,_M+2
000243 9170 02b3 	LDS  R23,_M+3
000245 d162      	RCALL SUBOPT_0x4
000246 93e0 02b0 	STS  _M,R30
000248 93f0 02b1 	STS  _M+1,R31
00024a 9360 02b2 	STS  _M+2,R22
00024c 9370 02b3 	STS  _M+3,R23
                 ; 0000 01C7 
                 ; 0000 01C8 if(M!=60) return;
00024e d16f      	RCALL SUBOPT_0x7
00024f d166      	RCALL SUBOPT_0x6
000250 f009      	BREQ _0x28
000251 9508      	RET
                 ; 0000 01C9 M = 0;
                 _0x28:
000252 e0e0      	LDI  R30,LOW(0)
000253 93e0 02b0 	STS  _M,R30
000255 93e0 02b1 	STS  _M+1,R30
000257 93e0 02b2 	STS  _M+2,R30
000259 93e0 02b3 	STS  _M+3,R30
                 ; 0000 01CA H += 1;
00025b d16b      	RCALL SUBOPT_0x8
00025c d14b      	RCALL SUBOPT_0x4
00025d 93e0 02ac 	STS  _H,R30
00025f 93f0 02ad 	STS  _H+1,R31
000261 9360 02ae 	STS  _H+2,R22
000263 9370 02af 	STS  _H+3,R23
                 ; 0000 01CB 
                 ; 0000 01CC if(H!=24) return;
000265 91a0 02ac 	LDS  R26,_H
000267 91b0 02ad 	LDS  R27,_H+1
000269 9180 02ae 	LDS  R24,_H+2
00026b 9190 02af 	LDS  R25,_H+3
                +
00026d 31a8     +CPI R26 , LOW ( 0x18 )
00026e e0e0     +LDI R30 , HIGH ( 0x18 )
00026f 07be     +CPC R27 , R30
000270 e0e0     +LDI R30 , BYTE3 ( 0x18 )
000271 078e     +CPC R24 , R30
000272 e0e0     +LDI R30 , BYTE4 ( 0x18 )
000273 079e     +CPC R25 , R30
                 	__CPD2N 0x18
000274 f009      	BREQ _0x29
000275 9508      	RET
                 ; 0000 01CD H = 0;
                 _0x29:
000276 e0e0      	LDI  R30,LOW(0)
000277 93e0 02ac 	STS  _H,R30
000279 93e0 02ad 	STS  _H+1,R30
00027b 93e0 02ae 	STS  _H+2,R30
00027d 93e0 02af 	STS  _H+3,R30
                 ; 0000 01CE Z += 1;
00027f 91e0 02a8 	LDS  R30,_Z
000281 91f0 02a9 	LDS  R31,_Z+1
000283 9160 02aa 	LDS  R22,_Z+2
000285 9170 02ab 	LDS  R23,_Z+3
000287 d120      	RCALL SUBOPT_0x4
000288 93e0 02a8 	STS  _Z,R30
00028a 93f0 02a9 	STS  _Z+1,R31
00028c 9360 02aa 	STS  _Z+2,R22
00028e 9370 02ab 	STS  _Z+3,R23
                 ; 0000 01CF 
                 ; 0000 01D0 if (Z == 7) Z = 0;
000290 d13f      	RCALL SUBOPT_0x9
                +
000291 30a7     +CPI R26 , LOW ( 0x7 )
000292 e0e0     +LDI R30 , HIGH ( 0x7 )
000293 07be     +CPC R27 , R30
000294 e0e0     +LDI R30 , BYTE3 ( 0x7 )
000295 078e     +CPC R24 , R30
000296 e0e0     +LDI R30 , BYTE4 ( 0x7 )
000297 079e     +CPC R25 , R30
                 	__CPD2N 0x7
000298 f449      	BRNE _0x2A
000299 e0e0      	LDI  R30,LOW(0)
00029a 93e0 02a8 	STS  _Z,R30
00029c 93e0 02a9 	STS  _Z+1,R30
00029e 93e0 02aa 	STS  _Z+2,R30
0002a0 93e0 02ab 	STS  _Z+3,R30
                 ; 0000 01D1 return;
                 _0x2A:
0002a2 9508      	RET
                 ; 0000 01D2 }
                 ; .FEND
                 ;void CLS()
                 ; 0000 01D5 {
                 _CLS:
                 ; .FSTART _CLS
                 ; 0000 01D6 //exemplu
                 ; 0000 01D7 // Ziua 3, ora 8, min 6, sec 3
                 ; 0000 01D8 //0x03080603
                 ; 0000 01D9 long int now = (Z<<24) | (H<<16) | (M<<8) | S;
                 ; 0000 01DA long int *adr = TABA[Q];
                 ; 0000 01DB char ready = 0;
                 ; 0000 01DC int i = 0;
                 ; 0000 01DD 
                 ; 0000 01DE while (!ready)
0002a3 9724      	SBIW R28,4
0002a4 d143      	RCALL __SAVELOCR6
                 ;	now -> Y+6
                 ;	*adr -> R16,R17
                 ;	ready -> R19
                 ;	i -> R20,R21
0002a5 d12a      	RCALL SUBOPT_0x9
0002a6 e1e8      	LDI  R30,LOW(24)
0002a7 d152      	RCALL __LSLD12
0002a8 01df      	MOVW R26,R30
0002a9 01cb      	MOVW R24,R22
0002aa d11c      	RCALL SUBOPT_0x8
                +
0002ab 2f6e     +MOV R22 , R30
0002ac 2f7f     +MOV R23 , R31
0002ad e0e0     +LDI R30 , 0
0002ae e0f0     +LDI R31 , 0
                 	__LSLD16
0002af d129      	RCALL SUBOPT_0xA
0002b0 937f      	PUSH R23
0002b1 936f      	PUSH R22
0002b2 93ff      	PUSH R31
0002b3 93ef      	PUSH R30
0002b4 d109      	RCALL SUBOPT_0x7
0002b5 e0e8      	LDI  R30,LOW(8)
0002b6 d143      	RCALL __LSLD12
0002b7 91af      	POP  R26
0002b8 91bf      	POP  R27
0002b9 918f      	POP  R24
0002ba 919f      	POP  R25
0002bb d11d      	RCALL SUBOPT_0xA
0002bc d0f0      	RCALL SUBOPT_0x5
0002bd d11b      	RCALL SUBOPT_0xA
                +
0002be 83ee     +STD Y + 6 , R30
0002bf 83ff     +STD Y + 6 + 1 , R31
0002c0 8768     +STD Y + 6 + 2 , R22
0002c1 8779     +STD Y + 6 + 3 , R23
                 	__PUTD1S 6
0002c2 2dec      	MOV  R30,R12
0002c3 eaa0      	LDI  R26,LOW(_TABA)
0002c4 e0b2      	LDI  R27,HIGH(_TABA)
0002c5 e0f0      	LDI  R31,0
0002c6 0fee      	LSL  R30
0002c7 1fff      	ROL  R31
0002c8 0fae      	ADD  R26,R30
0002c9 1fbf      	ADC  R27,R31
                +
0002ca 91ed     +LD R30 , X +
0002cb 91fc     +LD R31 , X
0002cc 9711     +SBIW R26 , 1
                 	__GETW1P
0002cd 018f      	MOVW R16,R30
0002ce e030      	LDI  R19,0
                +
0002cf e040     +LDI R20 , LOW ( 0 )
0002d0 e050     +LDI R21 , HIGH ( 0 )
                 	__GETWRN 20,21,0
                 _0x2B:
0002d1 3030      	CPI  R19,0
0002d2 f509      	BRNE _0x2D
                 ; 0000 01DF {
                 ; 0000 01E0 if (now == adr[i]) {
0002d3 d10a      	RCALL SUBOPT_0xB
                +
0002d4 81ae     +LDD R26 , Y + 6
0002d5 81bf     +LDD R27 , Y + 6 + 1
0002d6 8588     +LDD R24 , Y + 6 + 2
0002d7 8599     +LDD R25 , Y + 6 + 3
                 	__GETD2S 6
                +
0002d8 17ea     +CP R30 , R26
0002d9 07fb     +CPC R31 , R27
0002da 0768     +CPC R22 , R24
0002db 0779     +CPC R23 , R25
                 	__CPD12
0002dc f449      	BRNE _0x2E
                 ; 0000 01E1 Q = adr[i + 1];
0002dd 01fa      	MOVW R30,R20
0002de 9631      	ADIW R30,1
0002df 01d8      	MOVW R26,R16
0002e0 d130      	RCALL __LSLW2
0002e1 0fae      	ADD  R26,R30
0002e2 1fbf      	ADC  R27,R31
0002e3 90cc      	LD   R12,X
                 ; 0000 01E2 ready = 1;  // Stop iterating through while
0002e4 e031      	LDI  R19,LOW(1)
                 ; 0000 01E3 }
                 ; 0000 01E4 else if (adr[i] == Ter) ready = 1;
0002e5 c00d      	RJMP _0x2F
                 _0x2E:
0002e6 d0f7      	RCALL SUBOPT_0xB
                +
0002e7 30e0     +CPI R30 , LOW ( 0x10000000 )
0002e8 e0a0     +LDI R26 , HIGH ( 0x10000000 )
0002e9 07fa     +CPC R31 , R26
0002ea e0a0     +LDI R26 , BYTE3 ( 0x10000000 )
0002eb 076a     +CPC R22 , R26
0002ec e1a0     +LDI R26 , BYTE4 ( 0x10000000 )
0002ed 077a     +CPC R23 , R26
                 	__CPD1N 0x10000000
0002ee f411      	BRNE _0x30
0002ef e031      	LDI  R19,LOW(1)
                 ; 0000 01E5 else i = i+2;
0002f0 c002      	RJMP _0x31
                 _0x30:
                +
0002f1 5f4e     +SUBI R20 , LOW ( - 2 )
0002f2 4f5f     +SBCI R21 , HIGH ( - 2 )
                 	__ADDWRN 20,21,2
                 ; 0000 01E6 }
                 _0x31:
                 _0x2F:
0002f3 cfdd      	RJMP _0x2B
                 _0x2D:
                 ; 0000 01E7 }
0002f4 d0fa      	RCALL __LOADLOCR6
0002f5 962a      	ADIW R28,10
0002f6 9508      	RET
                 ; .FEND
                 ;void DisplayInfo()
                 ; 0000 01EA {
                 _DisplayInfo:
                 ; .FSTART _DisplayInfo
                 ; 0000 01EB DisplayConsumptionDisplayMode();
0002f7 d01d      	RCALL _DisplayConsumptionDisplayMode
                 ; 0000 01EC DisplayPowerLevel();
0002f8 d001      	RCALL _DisplayPowerLevel
                 ; 0000 01ED }
0002f9 9508      	RET
                 ; .FEND
                 ;void DisplayPowerLevel()
                 ; 0000 01EF {
                 _DisplayPowerLevel:
                 ; .FSTART _DisplayPowerLevel
                 ; 0000 01F0 char out;
                 ; 0000 01F1 
                 ; 0000 01F2 //   if (!PowerLevel)          PowerLevel = 0 kW
                 ; 0000 01F3 //   {
                 ; 0000 01F4 //        out = CLC_LEVEL[0];
                 ; 0000 01F5 //   }
                 ; 0000 01F6 //   else if (PowerLevel < 2.5)    0 < PowerLevel < 2.5 kW
                 ; 0000 01F7 //   {
                 ; 0000 01F8 //        out = CLC_LEVEL[1];
                 ; 0000 01F9 //   }
                 ; 0000 01FA //   else if (PowerLevel < 5)      2.5 <= PowerLevel < 5 kW
                 ; 0000 01FB //   {
                 ; 0000 01FC //        out = CLC_LEVEL[2];
                 ; 0000 01FD //   }
                 ; 0000 01FE //   else if (PowerLevel < 7.5)    5 <= PowerLevel < 7.5 kW
                 ; 0000 01FF //   {
                 ; 0000 0200 //        out = CLC_LEVEL[3];
                 ; 0000 0201 //   }
                 ; 0000 0202 //   else                          PowerLvel >= 7.5 kW
                 ; 0000 0203 //   {
                 ; 0000 0204 //        out = CLC_LEVEL[4];
                 ; 0000 0205 //   }
                 ; 0000 0206 
                 ; 0000 0207 if (!PowerLevel)         // PowerLevel = 0 kW
0002fa 931a      	ST   -Y,R17
                 ;	out -> R17
0002fb 91e0 02c6 	LDS  R30,_PowerLevel
0002fd 30e0      	CPI  R30,0
0002fe f419      	BRNE _0x32
                 ; 0000 0208 {
                 ; 0000 0209 out = CLC_LEVEL[0];
0002ff 9110 02c7 	LDS  R17,_CLC_LEVEL
                 ; 0000 020A }
                 ; 0000 020B else if (PowerLevel < 3)   // 0 < PowerLevel < 3 kW
000301 c010      	RJMP _0x33
                 _0x32:
000302 91a0 02c6 	LDS  R26,_PowerLevel
000304 30a3      	CPI  R26,LOW(0x3)
000305 f418      	BRSH _0x34
                 ; 0000 020C {
                 ; 0000 020D out = CLC_LEVEL[1];
                +
000306 9110 02c8+LDS R17 , _CLC_LEVEL + ( 1 )
                 	__GETBRMN 17,_CLC_LEVEL,1
                 ; 0000 020E }
                 ; 0000 020F else if (PowerLevel < 6)     // 3 <= PowerLevel < 6 kW
000308 c009      	RJMP _0x35
                 _0x34:
000309 91a0 02c6 	LDS  R26,_PowerLevel
00030b 30a6      	CPI  R26,LOW(0x6)
00030c f418      	BRSH _0x36
                 ; 0000 0210 {
                 ; 0000 0211 out = CLC_LEVEL[2];
                +
00030d 9110 02c9+LDS R17 , _CLC_LEVEL + ( 2 )
                 	__GETBRMN 17,_CLC_LEVEL,2
                 ; 0000 0212 }
                 ; 0000 0213 else                         // PowerLvel >= 6 kW
00030f c002      	RJMP _0x37
                 _0x36:
                 ; 0000 0214 {
                 ; 0000 0215 out = CLC_LEVEL[3];
                +
000310 9110 02ca+LDS R17 , _CLC_LEVEL + ( 3 )
                 	__GETBRMN 17,_CLC_LEVEL,3
                 ; 0000 0216 }
                 _0x37:
                 _0x35:
                 _0x33:
                 ; 0000 0217 
                 ; 0000 0218 // Delete PB7-PB5
                 ; 0000 0219 PORTB &= 0x1f;
000312 b1e5      	IN   R30,0x5
000313 71ef      	ANDI R30,LOW(0x1F)
000314 c076      	RJMP _0x2000002
                 ; 0000 021A 
                 ; 0000 021B // Display out on PB7-PB5
                 ; 0000 021C PORTB |= out;
                 ; 0000 021D }
                 ; .FEND
                 ;void DisplayConsumptionDisplayMode()
                 ; 0000 0220 {
                 _DisplayConsumptionDisplayMode:
                 ; .FSTART _DisplayConsumptionDisplayMode
                 ; 0000 0221 char out;
                 ; 0000 0222 
                 ; 0000 0223 if (MODE == 1)  // Working without ranges
000315 931a      	ST   -Y,R17
                 ;	out -> R17
000316 e0e1      	LDI  R30,LOW(1)
000317 15ea      	CP   R30,R10
000318 f429      	BRNE _0x38
                 ; 0000 0224 {
                 ; 0000 0225 
                 ; 0000 0226 // Clear PB4-0
                 ; 0000 0227 PORTB &= 0xE0;
000319 b1e5      	IN   R30,0x5
00031a 7ee0      	ANDI R30,LOW(0xE0)
00031b b9e5      	OUT  0x5,R30
                 ; 0000 0228 
                 ; 0000 0229 // Display on PB4
                 ; 0000 022A PORTB |= 0x10;
00031c 9a2c      	SBI  0x5,4
                 ; 0000 022B 
                 ; 0000 022C return;
00031d c071      	RJMP _0x2000001
                 ; 0000 022D }
                 ; 0000 022E 
                 ; 0000 022F switch(S3)
                 _0x38:
00031e 2dee      	MOV  R30,R14
00031f e0f0      	LDI  R31,0
                 ; 0000 0230 {
                 ; 0000 0231 case 0:
000320 9730      	SBIW R30,0
000321 f439      	BRNE _0x3C
                 ; 0000 0232 {
                 ; 0000 0233 if (CA == 0)            // Pressed CA
000322 91e0 02c5 	LDS  R30,_CA
000324 30e0      	CPI  R30,0
000325 f411      	BRNE _0x3D
                 ; 0000 0234 {
                 ; 0000 0235 S3 = 1;
000326 e0e1      	LDI  R30,LOW(1)
000327 2eee      	MOV  R14,R30
                 ; 0000 0236 }
                 ; 0000 0237 break;
                 _0x3D:
000328 c052      	RJMP _0x3B
                 ; 0000 0238 }
                 ; 0000 0239 case 1:                 // Released CA
                 _0x3C:
000329 30e1      	CPI  R30,LOW(0x1)
00032a e0a0      	LDI  R26,HIGH(0x1)
00032b 07fa      	CPC  R31,R26
00032c f449      	BRNE _0x3E
                 ; 0000 023A {
                 ; 0000 023B if (CA)
00032d 91e0 02c5 	LDS  R30,_CA
00032f 30e0      	CPI  R30,0
000330 f021      	BREQ _0x3F
                 ; 0000 023C {
                 ; 0000 023D S3 = 2;
000331 e0e2      	LDI  R30,LOW(2)
000332 2eee      	MOV  R14,R30
                 ; 0000 023E Q1 = 1;
000333 e0e1      	LDI  R30,LOW(1)
000334 2ebe      	MOV  R11,R30
                 ; 0000 023F }
                 ; 0000 0240 break;
                 _0x3F:
000335 c045      	RJMP _0x3B
                 ; 0000 0241 }
                 ; 0000 0242 case 2:                //  Pressed CA
                 _0x3E:
000336 30e2      	CPI  R30,LOW(0x2)
000337 e0a0      	LDI  R26,HIGH(0x2)
000338 07fa      	CPC  R31,R26
000339 f439      	BRNE _0x40
                 ; 0000 0243 {
                 ; 0000 0244 if (CA == 0)
00033a 91e0 02c5 	LDS  R30,_CA
00033c 30e0      	CPI  R30,0
00033d f411      	BRNE _0x41
                 ; 0000 0245 {
                 ; 0000 0246 S3 = 3;
00033e e0e3      	LDI  R30,LOW(3)
00033f 2eee      	MOV  R14,R30
                 ; 0000 0247 }
                 ; 0000 0248 break;
                 _0x41:
000340 c03a      	RJMP _0x3B
                 ; 0000 0249 }
                 ; 0000 024A case 3:                // Released CA
                 _0x40:
000341 30e3      	CPI  R30,LOW(0x3)
000342 e0a0      	LDI  R26,HIGH(0x3)
000343 07fa      	CPC  R31,R26
000344 f449      	BRNE _0x42
                 ; 0000 024B {
                 ; 0000 024C if (CA)
000345 91e0 02c5 	LDS  R30,_CA
000347 30e0      	CPI  R30,0
000348 f021      	BREQ _0x43
                 ; 0000 024D {
                 ; 0000 024E S3 = 4;
000349 e0e4      	LDI  R30,LOW(4)
00034a 2eee      	MOV  R14,R30
                 ; 0000 024F Q1 = 2;
00034b e0e2      	LDI  R30,LOW(2)
00034c 2ebe      	MOV  R11,R30
                 ; 0000 0250 }
                 ; 0000 0251 break;
                 _0x43:
00034d c02d      	RJMP _0x3B
                 ; 0000 0252 }
                 ; 0000 0253 case 4:
                 _0x42:
00034e 30e4      	CPI  R30,LOW(0x4)
00034f e0a0      	LDI  R26,HIGH(0x4)
000350 07fa      	CPC  R31,R26
000351 f439      	BRNE _0x44
                 ; 0000 0254 {
                 ; 0000 0255 if (CA == 0)
000352 91e0 02c5 	LDS  R30,_CA
000354 30e0      	CPI  R30,0
000355 f411      	BRNE _0x45
                 ; 0000 0256 {
                 ; 0000 0257 S3 = 5;
000356 e0e5      	LDI  R30,LOW(5)
000357 2eee      	MOV  R14,R30
                 ; 0000 0258 }
                 ; 0000 0259 break;
                 _0x45:
000358 c022      	RJMP _0x3B
                 ; 0000 025A }
                 ; 0000 025B case 5:
                 _0x44:
000359 30e5      	CPI  R30,LOW(0x5)
00035a e0a0      	LDI  R26,HIGH(0x5)
00035b 07fa      	CPC  R31,R26
00035c f449      	BRNE _0x46
                 ; 0000 025C {
                 ; 0000 025D if (CA)
00035d 91e0 02c5 	LDS  R30,_CA
00035f 30e0      	CPI  R30,0
000360 f021      	BREQ _0x47
                 ; 0000 025E {
                 ; 0000 025F S3 = 6;
000361 e0e6      	LDI  R30,LOW(6)
000362 2eee      	MOV  R14,R30
                 ; 0000 0260 Q1 = 3;
000363 e0e3      	LDI  R30,LOW(3)
000364 2ebe      	MOV  R11,R30
                 ; 0000 0261 }
                 ; 0000 0262 break;
                 _0x47:
000365 c015      	RJMP _0x3B
                 ; 0000 0263 }
                 ; 0000 0264 case 6:
                 _0x46:
000366 30e6      	CPI  R30,LOW(0x6)
000367 e0a0      	LDI  R26,HIGH(0x6)
000368 07fa      	CPC  R31,R26
000369 f439      	BRNE _0x48
                 ; 0000 0265 {
                 ; 0000 0266 if (CA == 0)
00036a 91e0 02c5 	LDS  R30,_CA
00036c 30e0      	CPI  R30,0
00036d f411      	BRNE _0x49
                 ; 0000 0267 {
                 ; 0000 0268 S3 = 7;
00036e e0e7      	LDI  R30,LOW(7)
00036f 2eee      	MOV  R14,R30
                 ; 0000 0269 }
                 ; 0000 026A break;
                 _0x49:
000370 c00a      	RJMP _0x3B
                 ; 0000 026B }
                 ; 0000 026C case 7:
                 _0x48:
000371 30e7      	CPI  R30,LOW(0x7)
000372 e0a0      	LDI  R26,HIGH(0x7)
000373 07fa      	CPC  R31,R26
000374 f431      	BRNE _0x3B
                 ; 0000 026D {
                 ; 0000 026E if (CA)
000375 91e0 02c5 	LDS  R30,_CA
000377 30e0      	CPI  R30,0
000378 f011      	BREQ _0x4B
                 ; 0000 026F {
                 ; 0000 0270 S3 = 0;
000379 24ee      	CLR  R14
                 ; 0000 0271 Q1 = 0;
00037a 24bb      	CLR  R11
                 ; 0000 0272 }
                 ; 0000 0273 break;
                 _0x4B:
                 ; 0000 0274 }
                 ; 0000 0275 }
                 _0x3B:
                 ; 0000 0276 
                 ; 0000 0277 out = CLC_RANGE_OUTPUT[Q1] | (CLC_RANGE_OUTPUT[Q] << 2);
00037b 2deb      	MOV  R30,R11
00037c e0f0      	LDI  R31,0
00037d 53e5      	SUBI R30,LOW(-_CLC_RANGE_OUTPUT)
00037e 4ffd      	SBCI R31,HIGH(-_CLC_RANGE_OUTPUT)
00037f 81a0      	LD   R26,Z
000380 2dec      	MOV  R30,R12
000381 e0f0      	LDI  R31,0
000382 53e5      	SUBI R30,LOW(-_CLC_RANGE_OUTPUT)
000383 4ffd      	SBCI R31,HIGH(-_CLC_RANGE_OUTPUT)
000384 81e0      	LD   R30,Z
000385 0fee      	LSL  R30
000386 0fee      	LSL  R30
000387 2bea      	OR   R30,R26
000388 2f1e      	MOV  R17,R30
                 ; 0000 0278 
                 ; 0000 0279 // Delete PB4-PB0
                 ; 0000 027A PORTB &= 0xE0;
000389 b1e5      	IN   R30,0x5
00038a 7ee0      	ANDI R30,LOW(0xE0)
                 _0x2000002:
00038b b9e5      	OUT  0x5,R30
                 ; 0000 027B 
                 ; 0000 027C // Display out on PB3-PB0
                 ; 0000 027D PORTB |= out;
00038c b1e5      	IN   R30,0x5
00038d 2be1      	OR   R30,R17
00038e b9e5      	OUT  0x5,R30
                 ; 0000 027E }
                 _0x2000001:
00038f 9119      	LD   R17,Y+
000390 9508      	RET
                 ; .FEND
                 
                 	.DSEG
                 _A0:
000200           	.BYTE 0x30
                 _A1:
000230           	.BYTE 0x30
                 _A2:
000260           	.BYTE 0x30
                 _A3:
000290           	.BYTE 0x10
                 _TABA:
0002a0           	.BYTE 0x8
                 _Z:
0002a8           	.BYTE 0x4
                 _H:
0002ac           	.BYTE 0x4
                 _M:
0002b0           	.BYTE 0x4
                 _S:
0002b4           	.BYTE 0x4
                 _CONSUM:
0002b8           	.BYTE 0xA
                 _C3:
0002c2           	.BYTE 0x1
                 _C2:
0002c3           	.BYTE 0x1
                 _C1:
0002c4           	.BYTE 0x1
                 _CA:
0002c5           	.BYTE 0x1
                 _PowerLevel:
0002c6           	.BYTE 0x1
                 _CLC_LEVEL:
0002c7           	.BYTE 0x4
                 _CLC_RANGE_OUTPUT:
0002cb           	.BYTE 0x4
                 _cntP:
0002cf           	.BYTE 0x1
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x0:
000391 78e0      	ANDI R30,LOW(0x80)
000392 e0f0      	LDI  R31,0
000393 d084      	RCALL __ASRW3
000394 d081      	RCALL __ASRW4
000395 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x1:
000396 eba8      	LDI  R26,LOW(_CONSUM)
000397 e0b2      	LDI  R27,HIGH(_CONSUM)
000398 e0f0      	LDI  R31,0
000399 0fee      	LSL  R30
00039a 1fff      	ROL  R31
00039b 0fae      	ADD  R26,R30
00039c 1fbf      	ADC  R27,R31
00039d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x2:
                +
00039e 91e0 02c0+LDS R30 , _CONSUM + ( 8 )
0003a0 91f0 02c1+LDS R31 , _CONSUM + ( 8 ) + 1
                 	__GETW1MN _CONSUM,8
0003a2 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x3:
0003a3 de4b      	RCALL _DisplayDigit
0003a4 01d8      	MOVW R26,R16
0003a5 e0ea      	LDI  R30,LOW(10)
0003a6 e0f0      	LDI  R31,HIGH(10)
0003a7 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x4:
                +
0003a8 5fef     +SUBI R30 , LOW ( - 1 )
0003a9 4fff     +SBCI R31 , HIGH ( - 1 )
0003aa 4f6f     +SBCI R22 , BYTE3 ( - 1 )
0003ab 4f7f     +SBCI R23 , BYTE4 ( - 1 )
                 	__ADDD1N 1
0003ac 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x5:
0003ad 91a0 02b4 	LDS  R26,_S
0003af 91b0 02b5 	LDS  R27,_S+1
0003b1 9180 02b6 	LDS  R24,_S+2
0003b3 9190 02b7 	LDS  R25,_S+3
0003b5 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x6:
                +
0003b6 33ac     +CPI R26 , LOW ( 0x3C )
0003b7 e0e0     +LDI R30 , HIGH ( 0x3C )
0003b8 07be     +CPC R27 , R30
0003b9 e0e0     +LDI R30 , BYTE3 ( 0x3C )
0003ba 078e     +CPC R24 , R30
0003bb e0e0     +LDI R30 , BYTE4 ( 0x3C )
0003bc 079e     +CPC R25 , R30
                 	__CPD2N 0x3C
0003bd 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x7:
0003be 91a0 02b0 	LDS  R26,_M
0003c0 91b0 02b1 	LDS  R27,_M+1
0003c2 9180 02b2 	LDS  R24,_M+2
0003c4 9190 02b3 	LDS  R25,_M+3
0003c6 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x8:
0003c7 91e0 02ac 	LDS  R30,_H
0003c9 91f0 02ad 	LDS  R31,_H+1
0003cb 9160 02ae 	LDS  R22,_H+2
0003cd 9170 02af 	LDS  R23,_H+3
0003cf 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x9:
0003d0 91a0 02a8 	LDS  R26,_Z
0003d2 91b0 02a9 	LDS  R27,_Z+1
0003d4 9180 02aa 	LDS  R24,_Z+2
0003d6 9190 02ab 	LDS  R25,_Z+3
0003d8 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0xA:
                +
0003d9 2bea     +OR R30 , R26
0003da 2bfb     +OR R31 , R27
0003db 2b68     +OR R22 , R24
0003dc 2b79     +OR R23 , R25
                 	__ORD12
0003dd 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0xB:
0003de 01fa      	MOVW R30,R20
0003df 01d8      	MOVW R26,R16
0003e0 d030      	RCALL __LSLW2
0003e1 0fae      	ADD  R26,R30
0003e2 1fbf      	ADC  R27,R31
                +
0003e3 91ed     +LD R30 , X +
0003e4 91fd     +LD R31 , X +
0003e5 916d     +LD R22 , X +
0003e6 917d     +LD R23 , X +
                 	__GETD1P_INC
0003e7 9508      	RET
                 
                 ;RUNTIME LIBRARY
                 
                 	.CSEG
                 __SAVELOCR6:
0003e8 935a      	ST   -Y,R21
                 __SAVELOCR5:
0003e9 934a      	ST   -Y,R20
                 __SAVELOCR4:
0003ea 933a      	ST   -Y,R19
                 __SAVELOCR3:
0003eb 932a      	ST   -Y,R18
                 __SAVELOCR2:
0003ec 931a      	ST   -Y,R17
0003ed 930a      	ST   -Y,R16
0003ee 9508      	RET
                 
                 __LOADLOCR6:
0003ef 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
0003f0 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
0003f1 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
0003f2 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
0003f3 8119      	LDD  R17,Y+1
0003f4 8108      	LD   R16,Y
0003f5 9508      	RET
                 
                 __ANEGW1:
0003f6 95f1      	NEG  R31
0003f7 95e1      	NEG  R30
0003f8 40f0      	SBCI R31,0
0003f9 9508      	RET
                 
                 __LSLD12:
0003fa 23ee      	TST  R30
0003fb 2e0e      	MOV  R0,R30
0003fc e0e8      	LDI  R30,8
0003fd 2e1e      	MOV  R1,R30
0003fe 01fd      	MOVW R30,R26
0003ff 01bc      	MOVW R22,R24
000400 f079      	BREQ __LSLD12R
                 __LSLD12S8:
000401 1401      	CP   R0,R1
000402 f038      	BRLO __LSLD12L
000403 2f76      	MOV  R23,R22
000404 2f6f      	MOV  R22,R31
000405 2ffe      	MOV  R31,R30
000406 e0e0      	LDI  R30,0
000407 1801      	SUB  R0,R1
000408 f7c1      	BRNE __LSLD12S8
000409 9508      	RET
                 __LSLD12L:
00040a 0fee      	LSL  R30
00040b 1fff      	ROL  R31
00040c 1f66      	ROL  R22
00040d 1f77      	ROL  R23
00040e 940a      	DEC  R0
00040f f7d1      	BRNE __LSLD12L
                 __LSLD12R:
000410 9508      	RET
                 
                 __LSLW2:
000411 0fee      	LSL  R30
000412 1fff      	ROL  R31
000413 0fee      	LSL  R30
000414 1fff      	ROL  R31
000415 9508      	RET
                 
                 __ASRW4:
000416 95f5      	ASR  R31
000417 95e7      	ROR  R30
                 __ASRW3:
000418 95f5      	ASR  R31
000419 95e7      	ROR  R30
                 __ASRW2:
00041a 95f5      	ASR  R31
00041b 95e7      	ROR  R30
00041c 95f5      	ASR  R31
00041d 95e7      	ROR  R30
00041e 9508      	RET
                 
                 __DIVW21U:
00041f 2400      	CLR  R0
000420 2411      	CLR  R1
000421 e190      	LDI  R25,16
                 __DIVW21U1:
000422 0faa      	LSL  R26
000423 1fbb      	ROL  R27
000424 1c00      	ROL  R0
000425 1c11      	ROL  R1
000426 1a0e      	SUB  R0,R30
000427 0a1f      	SBC  R1,R31
000428 f418      	BRCC __DIVW21U2
000429 0e0e      	ADD  R0,R30
00042a 1e1f      	ADC  R1,R31
00042b c001      	RJMP __DIVW21U3
                 __DIVW21U2:
00042c 60a1      	SBR  R26,1
                 __DIVW21U3:
00042d 959a      	DEC  R25
00042e f799      	BRNE __DIVW21U1
00042f 01fd      	MOVW R30,R26
000430 01d0      	MOVW R26,R0
000431 9508      	RET
                 
                 __DIVW21:
000432 d012      	RCALL __CHKSIGNW
000433 dfeb      	RCALL __DIVW21U
000434 f40e      	BRTC __DIVW211
000435 dfc0      	RCALL __ANEGW1
                 __DIVW211:
000436 9508      	RET
                 
                 __MODW21:
000437 94e8      	CLT
000438 ffb7      	SBRS R27,7
000439 c004      	RJMP __MODW211
00043a 95b1      	NEG  R27
00043b 95a1      	NEG  R26
00043c 40b0      	SBCI R27,0
00043d 9468      	SET
                 __MODW211:
00043e fdf7      	SBRC R31,7
00043f dfb6      	RCALL __ANEGW1
000440 dfde      	RCALL __DIVW21U
000441 01fd      	MOVW R30,R26
000442 f40e      	BRTC __MODW212
000443 dfb2      	RCALL __ANEGW1
                 __MODW212:
000444 9508      	RET
                 
                 __CHKSIGNW:
000445 94e8      	CLT
000446 fff7      	SBRS R31,7
000447 c002      	RJMP __CHKSW1
000448 dfad      	RCALL __ANEGW1
000449 9468      	SET
                 __CHKSW1:
00044a ffb7      	SBRS R27,7
00044b c006      	RJMP __CHKSW2
00044c 95b1      	NEG  R27
00044d 95a1      	NEG  R26
00044e 40b0      	SBCI R27,0
00044f f800      	BLD  R0,0
000450 9403      	INC  R0
000451 fa00      	BST  R0,0
                 __CHKSW2:
000452 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega164A register use summary:
r0 :  20 r1 :  10 r2 :   0 r3 :   3 r4 :   1 r5 :   4 r6 :   1 r7 :   1 
r8 :   3 r9 :   3 r10:   4 r11:   7 r12:   5 r13:   2 r14:  10 r15:   2 
r16:  17 r17:  18 r18:   2 r19:   8 r20:   6 r21:   4 r22:  25 r23:  20 
r24:  22 r25:  17 r26:  83 r27:  29 r28:   4 r29:   1 r30: 317 r31:  81 
x  :  16 y  :  56 z  :  10 
Registers used: 34 out of 35 (97.1%)

ATmega164A instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   5 add   :   5 
adiw  :   5 and   :   0 andi  :   7 asr   :   5 bclr  :   0 bld   :   1 
brbc  :   0 brbs  :   0 brcc  :   1 brcs  :   0 break :   0 breq  :  13 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   1 
brlt  :   0 brmi  :   0 brne  :  34 brpl  :   0 brsh  :   2 brtc  :   2 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   1 call  :   0 
cbi   :   0 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :   9 cls   :   0 clt   :   2 clv   :   0 clz   :   0 com   :   0 
cp    :   4 cpc   :  27 cpi   :  29 cpse  :   0 dec   :   3 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :  11 inc   :   2 jmp   :  32 ld    :  29 ldd   :  10 ldi   : 117 
lds   :  54 lpm   :   9 lsl   :   8 lsr   :   0 mov   :  40 movw  :  23 
mul   :   0 muls  :   0 mulsu :   0 neg   :   6 nop   :   0 or    :   7 
ori   :   0 out   :  33 pop   :   4 push  :   4 rcall :  61 ret   :  35 
reti  :   1 rjmp  :  29 rol   :  10 ror   :   5 sbc   :   1 sbci  :  10 
sbi   :   1 sbic  :   0 sbis  :   0 sbiw  :   9 sbr   :   1 sbrc  :   1 
sbrs  :   3 sec   :   0 seh   :   0 sei   :   1 sen   :   0 ser   :   0 
ses   :   0 set   :   2 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  31 std   :   4 sts   :  70 sub   :   2 subi  :   6 swap  :   0 
tst   :   6 wdr   :   0 
Instructions used: 57 out of 116 (49.1%)

ATmega164A memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x0008a6   1980    234   2214   16384  13.5%
[.dseg] 0x000100 0x0002d0      0    208    208    1024  20.3%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 16 warnings
