
AVRASM ver. 2.1.30  D:\Cursuri\An3\II\P2\SourceCode\Electricity-Consumption-Meter\TestingProjects\ATmegaTests\MultiplexingTest\SourceCode\Debug\List\main.asm Sun Mar 19 22:35:28 2023

D:\Cursuri\An3\II\P2\SourceCode\Electricity-Consumption-Meter\TestingProjects\ATmegaTests\MultiplexingTest\SourceCode\Debug\List\main.asm(1420): warning: Register r4 already defined by the .DEF directive
D:\Cursuri\An3\II\P2\SourceCode\Electricity-Consumption-Meter\TestingProjects\ATmegaTests\MultiplexingTest\SourceCode\Debug\List\main.asm(1421): warning: Register r3 already defined by the .DEF directive
D:\Cursuri\An3\II\P2\SourceCode\Electricity-Consumption-Meter\TestingProjects\ATmegaTests\MultiplexingTest\SourceCode\Debug\List\main.asm(1422): warning: Register r6 already defined by the .DEF directive
D:\Cursuri\An3\II\P2\SourceCode\Electricity-Consumption-Meter\TestingProjects\ATmegaTests\MultiplexingTest\SourceCode\Debug\List\main.asm(1423): warning: Register r5 already defined by the .DEF directive
D:\Cursuri\An3\II\P2\SourceCode\Electricity-Consumption-Meter\TestingProjects\ATmegaTests\MultiplexingTest\SourceCode\Debug\List\main.asm(1424): warning: Register r8 already defined by the .DEF directive
D:\Cursuri\An3\II\P2\SourceCode\Electricity-Consumption-Meter\TestingProjects\ATmegaTests\MultiplexingTest\SourceCode\Debug\List\main.asm(1425): warning: Register r7 already defined by the .DEF directive
D:\Cursuri\An3\II\P2\SourceCode\Electricity-Consumption-Meter\TestingProjects\ATmegaTests\MultiplexingTest\SourceCode\Debug\List\main.asm(1426): warning: Register r10 already defined by the .DEF directive
D:\Cursuri\An3\II\P2\SourceCode\Electricity-Consumption-Meter\TestingProjects\ATmegaTests\MultiplexingTest\SourceCode\Debug\List\main.asm(1427): warning: Register r9 already defined by the .DEF directive
D:\Cursuri\An3\II\P2\SourceCode\Electricity-Consumption-Meter\TestingProjects\ATmegaTests\MultiplexingTest\SourceCode\Debug\List\main.asm(1428): warning: Register r12 already defined by the .DEF directive
D:\Cursuri\An3\II\P2\SourceCode\Electricity-Consumption-Meter\TestingProjects\ATmegaTests\MultiplexingTest\SourceCode\Debug\List\main.asm(1429): warning: Register r11 already defined by the .DEF directive
D:\Cursuri\An3\II\P2\SourceCode\Electricity-Consumption-Meter\TestingProjects\ATmegaTests\MultiplexingTest\SourceCode\Debug\List\main.asm(1430): warning: Register r14 already defined by the .DEF directive
D:\Cursuri\An3\II\P2\SourceCode\Electricity-Consumption-Meter\TestingProjects\ATmegaTests\MultiplexingTest\SourceCode\Debug\List\main.asm(1431): warning: Register r13 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.49a 
                 ;(C) Copyright 1998-2022 Pavel Haiduc, HP InfoTech S.R.L.
                 ;http://www.hpinfotech.ro
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega164A
                 ;Program type           : Application
                 ;Clock frequency        : 10.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 256 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Mode 2
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega164A
                 	#pragma AVRPART MEMORY PROG_FLASH 16384
                 	#pragma AVRPART MEMORY EEPROM 512
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 1024
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x100
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU EECR=0x1F
                 	.EQU EEDR=0x20
                 	.EQU EEARL=0x21
                 	.EQU EEARH=0x22
                 	.EQU SPSR=0x2D
                 	.EQU SPDR=0x2E
                 	.EQU SMCR=0x33
                 	.EQU MCUSR=0x34
                 	.EQU MCUCR=0x35
                 	.EQU WDTCSR=0x60
                 	.EQU UCSR0A=0xC0
                 	.EQU UDR0=0xC6
                 	.EQU SPMCSR=0x37
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 	.EQU GPIOR0=0x1E
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0100
                 	.EQU __SRAM_END=0x04FF
                 	.EQU __DSTACK_SIZE=0x0100
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.EQU __FLASH_PAGE_SIZE=0x40
                 	.EQU __EEPROM_PAGE_SIZE=0x04
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETW1P
                 	LD   R30,X+
                 	LD   R31,X
                 	SBIW R26,1
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD1P_INC
                 	LD   R30,X+
                 	LD   R31,X+
                 	LD   R22,X+
                 	LD   R23,X+
                 	.ENDM
                 
                 	.MACRO __GETD1P_DEC
                 	LD   R23,-X
                 	LD   R22,-X
                 	LD   R31,-X
                 	LD   R30,-X
                 	.ENDM
                 
                 	.MACRO __PUTDP1
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTDP1_DEC
                 	ST   -X,R23
                 	ST   -X,R22
                 	ST   -X,R31
                 	ST   -X,R30
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __CPD10
                 	SBIW R30,0
                 	SBCI R22,0
                 	SBCI R23,0
                 	.ENDM
                 
                 	.MACRO __CPD20
                 	SBIW R26,0
                 	SBCI R24,0
                 	SBCI R25,0
                 	.ENDM
                 
                 	.MACRO __ADDD12
                 	ADD  R30,R26
                 	ADC  R31,R27
                 	ADC  R22,R24
                 	ADC  R23,R25
                 	.ENDM
                 
                 	.MACRO __ADDD21
                 	ADD  R26,R30
                 	ADC  R27,R31
                 	ADC  R24,R22
                 	ADC  R25,R23
                 	.ENDM
                 
                 	.MACRO __SUBD12
                 	SUB  R30,R26
                 	SBC  R31,R27
                 	SBC  R22,R24
                 	SBC  R23,R25
                 	.ENDM
                 
                 	.MACRO __SUBD21
                 	SUB  R26,R30
                 	SBC  R27,R31
                 	SBC  R24,R22
                 	SBC  R25,R23
                 	.ENDM
                 
                 	.MACRO __ANDD12
                 	AND  R30,R26
                 	AND  R31,R27
                 	AND  R22,R24
                 	AND  R23,R25
                 	.ENDM
                 
                 	.MACRO __ORD12
                 	OR   R30,R26
                 	OR   R31,R27
                 	OR   R22,R24
                 	OR   R23,R25
                 	.ENDM
                 
                 	.MACRO __XORD12
                 	EOR  R30,R26
                 	EOR  R31,R27
                 	EOR  R22,R24
                 	EOR  R23,R25
                 	.ENDM
                 
                 	.MACRO __XORD21
                 	EOR  R26,R30
                 	EOR  R27,R31
                 	EOR  R24,R22
                 	EOR  R25,R23
                 	.ENDM
                 
                 	.MACRO __COMD1
                 	COM  R30
                 	COM  R31
                 	COM  R22
                 	COM  R23
                 	.ENDM
                 
                 	.MACRO __MULD2_2
                 	LSL  R26
                 	ROL  R27
                 	ROL  R24
                 	ROL  R25
                 	.ENDM
                 
                 	.MACRO __LSRD1
                 	LSR  R23
                 	ROR  R22
                 	ROR  R31
                 	ROR  R30
                 	.ENDM
                 
                 	.MACRO __LSLD1
                 	LSL  R30
                 	ROL  R31
                 	ROL  R22
                 	ROL  R23
                 	.ENDM
                 
                 	.MACRO __ASRB4
                 	ASR  R30
                 	ASR  R30
                 	ASR  R30
                 	ASR  R30
                 	.ENDM
                 
                 	.MACRO __ASRW8
                 	MOV  R30,R31
                 	CLR  R31
                 	SBRC R30,7
                 	SER  R31
                 	.ENDM
                 
                 	.MACRO __LSRD16
                 	MOV  R30,R22
                 	MOV  R31,R23
                 	LDI  R22,0
                 	LDI  R23,0
                 	.ENDM
                 
                 	.MACRO __LSLD16
                 	MOV  R22,R30
                 	MOV  R23,R31
                 	LDI  R30,0
                 	LDI  R31,0
                 	.ENDM
                 
                 	.MACRO __CWD1
                 	MOV  R22,R31
                 	ADD  R22,R22
                 	SBC  R22,R22
                 	MOV  R23,R22
                 	.ENDM
                 
                 	.MACRO __CWD2
                 	MOV  R24,R27
                 	ADD  R24,R24
                 	SBC  R24,R24
                 	MOV  R25,R24
                 	.ENDM
                 
                 	.MACRO __SETMSD1
                 	SER  R31
                 	SER  R22
                 	SER  R23
                 	.ENDM
                 
                 	.MACRO __ADDW1R15
                 	CLR  R0
                 	ADD  R30,R15
                 	ADC  R31,R0
                 	.ENDM
                 
                 	.MACRO __ADDW2R15
                 	CLR  R0
                 	ADD  R26,R15
                 	ADC  R27,R0
                 	.ENDM
                 
                 	.MACRO __EQB12
                 	CP   R30,R26
                 	LDI  R30,1
                 	BREQ PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __NEB12
                 	CP   R30,R26
                 	LDI  R30,1
                 	BRNE PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __LEB12
                 	CP   R30,R26
                 	LDI  R30,1
                 	BRGE PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __GEB12
                 	CP   R26,R30
                 	LDI  R30,1
                 	BRGE PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __LTB12
                 	CP   R26,R30
                 	LDI  R30,1
                 	BRLT PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __GTB12
                 	CP   R30,R26
                 	LDI  R30,1
                 	BRLT PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __LEB12U
                 	CP   R30,R26
                 	LDI  R30,1
                 	BRSH PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __GEB12U
                 	CP   R26,R30
                 	LDI  R30,1
                 	BRSH PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __LTB12U
                 	CP   R26,R30
                 	LDI  R30,1
                 	BRLO PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __GTB12U
                 	CP   R30,R26
                 	LDI  R30,1
                 	BRLO PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __CPW01
                 	CLR  R0
                 	CP   R0,R30
                 	CPC  R0,R31
                 	.ENDM
                 
                 	.MACRO __CPW02
                 	CLR  R0
                 	CP   R0,R26
                 	CPC  R0,R27
                 	.ENDM
                 
                 	.MACRO __CPD12
                 	CP   R30,R26
                 	CPC  R31,R27
                 	CPC  R22,R24
                 	CPC  R23,R25
                 	.ENDM
                 
                 	.MACRO __CPD21
                 	CP   R26,R30
                 	CPC  R27,R31
                 	CPC  R24,R22
                 	CPC  R25,R23
                 	.ENDM
                 
                 	.MACRO __BSTB1
                 	CLT
                 	TST  R30
                 	BREQ PC+2
                 	SET
                 	.ENDM
                 
                 	.MACRO __LNEGB1
                 	TST  R30
                 	LDI  R30,1
                 	BREQ PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __LNEGW1
                 	OR   R30,R31
                 	LDI  R30,1
                 	BREQ PC+2
                 	LDI  R30,0
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2M
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	CALL __GETW1Z
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	CALL __GETD1Z
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __GETW2X
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __GETD2X
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _S1=R4
                 	.DEF _cnt_time=R3
                 	.DEF _T_SEC=R6
                 	.DEF _S2=R5
                 	.DEF _S_PULSE=R8
                 	.DEF _PULSE=R7
                 	.DEF _Q=R10
                 	.DEF _Q1=R9
                 	.DEF _S3=R12
                 	.DEF _TOTAL_CONS=R11
                 	.DEF _C4=R14
                 	.DEF _C3=R13
                 
                 ;GPIOR0 INITIALIZATION VALUE
                 	.EQU __GPIOR0_INIT=0x00
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 00c1 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 00f0 	JMP  _timer0_ovf_isr
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
00002a 940c 0000 	JMP  0x00
00002c 940c 0000 	JMP  0x00
00002e 940c 0000 	JMP  0x00
000030 940c 0000 	JMP  0x00
000032 940c 0000 	JMP  0x00
000034 940c 0000 	JMP  0x00
000036 940c 0000 	JMP  0x00
000038 940c 0000 	JMP  0x00
00003a 940c 0000 	JMP  0x00
00003c 940c 0000 	JMP  0x00
                 
                 _DIGITS:
00003e f9c0
00003f b0a4
000040 9299
000041 f882      	.DB  0xC0,0xF9,0xA4,0xB0,0x99,0x92,0x82,0xF8
000042 9080      	.DB  0x80,0x90
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
000043 0000
000044 0000      	.DB  0x0,0x0,0x0,0x0
000045 0000
000046 0000      	.DB  0x0,0x0,0x0,0x0
D:\Cursuri\An3\II\P2\SourceCode\Electricity-Consumption-Meter\TestingProjects\ATmegaTests\MultiplexingTest\SourceCode\Debug\List\main.asm(1483): warning: .cseg .db misalignment - padding zero byte
000047 0000      	.DB  0x0
                 
                 _0x3:
000048 0000
000049 0008
00004a 0001
00004b 0000      	.DB  0x0,0x0,0x8,0x0,0x1,0x0,0x0,0x0
00004c 0000
00004d 0008
00004e 0001
00004f 0000      	.DB  0x0,0x0,0x8,0x0,0x1,0x0,0x0,0x0
000050 0000
000051 0008
000052 0001
000053 0000      	.DB  0x0,0x0,0x8,0x0,0x1,0x0,0x0,0x0
000054 0000
000055 0008
000056 0001
000057 0000      	.DB  0x0,0x0,0x8,0x0,0x1,0x0,0x0,0x0
000058 0000
000059 0008
00005a 0001
00005b 0000      	.DB  0x0,0x0,0x8,0x0,0x1,0x0,0x0,0x0
00005c 0000
00005d 1000      	.DB  0x0,0x0,0x0,0x10
                 _0x4:
00005e 0000
00005f 0010
000060 0002
000061 0000      	.DB  0x0,0x0,0x10,0x0,0x2,0x0,0x0,0x0
000062 0000
000063 0010
000064 0002
000065 0000      	.DB  0x0,0x0,0x10,0x0,0x2,0x0,0x0,0x0
000066 0000
000067 0010
000068 0002
000069 0000      	.DB  0x0,0x0,0x10,0x0,0x2,0x0,0x0,0x0
00006a 0000
00006b 0010
00006c 0002
00006d 0000      	.DB  0x0,0x0,0x10,0x0,0x2,0x0,0x0,0x0
00006e 0000
00006f 0010
000070 0002
000071 0000      	.DB  0x0,0x0,0x10,0x0,0x2,0x0,0x0,0x0
000072 0000
000073 1000
D:\Cursuri\An3\II\P2\SourceCode\Electricity-Consumption-Meter\TestingProjects\ATmegaTests\MultiplexingTest\SourceCode\Debug\List\main.asm(1498): warning: .cseg .db misalignment - padding zero byte
000074 0001      	.DB  0x0,0x0,0x0,0x10,0x1
                 _0x5:
000075 0000
000076 0100
000077 0000
000078 0000      	.DB  0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0
000079 0000
00007a 0200
00007b 0000
00007c 0000      	.DB  0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x0
00007d 0000
00007e 0300
00007f 0000
000080 0000      	.DB  0x0,0x0,0x0,0x3,0x0,0x0,0x0,0x0
000081 0000
000082 0400
000083 0000
000084 0000      	.DB  0x0,0x0,0x0,0x4,0x0,0x0,0x0,0x0
000085 0000
000086 0500
000087 0003
000088 0000      	.DB  0x0,0x0,0x0,0x5,0x3,0x0,0x0,0x0
000089 0000
00008a 1000
D:\Cursuri\An3\II\P2\SourceCode\Electricity-Consumption-Meter\TestingProjects\ATmegaTests\MultiplexingTest\SourceCode\Debug\List\main.asm(1505): warning: .cseg .db misalignment - padding zero byte
00008b 0002      	.DB  0x0,0x0,0x0,0x10,0x2
                 _0x6:
00008c 0000
00008d 0000
00008e 0000
00008f 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000090 0000
000091 1000
D:\Cursuri\An3\II\P2\SourceCode\Electricity-Consumption-Meter\TestingProjects\ATmegaTests\MultiplexingTest\SourceCode\Debug\List\main.asm(1508): warning: .cseg .db misalignment - padding zero byte
000092 0003      	.DB  0x0,0x0,0x0,0x10,0x3
                 _0x7:
000093 0100
000094 0302      	.DB  0x0,0x1,0x2,0x3
                 _0x8:
000095 0200
000096 0230
000097 0260
000098 0290      	.DB  LOW(_A0),HIGH(_A0),LOW(_A1),HIGH(_A1),LOW(_A2),HIGH(_A2),LOW(_A3),HIGH(_A3)
                 _0x9:
000099 000a
00009a 0015
00009b 0022
D:\Cursuri\An3\II\P2\SourceCode\Electricity-Consumption-Meter\TestingProjects\ATmegaTests\MultiplexingTest\SourceCode\Debug\List\main.asm(1514): warning: .cseg .db misalignment - padding zero byte
00009c 0064      	.DB  0xA,0x0,0x15,0x0,0x22,0x0,0x64
                 _0xA:
00009d 1000
00009e 7030
D:\Cursuri\An3\II\P2\SourceCode\Electricity-Consumption-Meter\TestingProjects\ATmegaTests\MultiplexingTest\SourceCode\Debug\List\main.asm(1516): warning: .cseg .db misalignment - padding zero byte
00009f 00f0      	.DB  0x0,0x10,0x30,0x70,0xF0
                 _0xB:
0000a0 0201
D:\Cursuri\An3\II\P2\SourceCode\Electricity-Consumption-Meter\TestingProjects\ATmegaTests\MultiplexingTest\SourceCode\Debug\List\main.asm(1518): warning: .cseg .db misalignment - padding zero byte
0000a1 0003      	.DB  0x1,0x2,0x3
                 
                 __GLOBAL_INI_TBL:
0000a2 0009      	.DW  0x09
0000a3 0003      	.DW  0x03
0000a4 0086      	.DW  __REG_VARS*2
                 
0000a5 002c      	.DW  0x2C
0000a6 0200      	.DW  _A0
0000a7 0090      	.DW  _0x3*2
                 
0000a8 002d      	.DW  0x2D
0000a9 0230      	.DW  _A1
0000aa 00bc      	.DW  _0x4*2
                 
0000ab 002d      	.DW  0x2D
0000ac 0260      	.DW  _A2
0000ad 00ea      	.DW  _0x5*2
                 
0000ae 000d      	.DW  0x0D
0000af 0290      	.DW  _A3
0000b0 0118      	.DW  _0x6*2
                 
0000b1 0004      	.DW  0x04
0000b2 02a0      	.DW  _Tout
0000b3 0126      	.DW  _0x7*2
                 
0000b4 0008      	.DW  0x08
0000b5 02a4      	.DW  _TABA
0000b6 012a      	.DW  _0x8*2
                 
0000b7 0007      	.DW  0x07
0000b8 02bc      	.DW  _CONSUM
0000b9 0132      	.DW  _0x9*2
                 
0000ba 0005      	.DW  0x05
0000bb 02c9      	.DW  _CLC_LEVEL
0000bc 013a      	.DW  _0xA*2
                 
0000bd 0003      	.DW  0x03
0000be 02ce      	.DW  _CLC_RANGE_OUTPUT
0000bf 0140      	.DW  _0xB*2
                 
                 _0xFFFFFFFF:
0000c0 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
0000c1 94f8      	CLI
0000c2 27ee      	CLR  R30
0000c3 bbef      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
0000c4 e0f1      	LDI  R31,1
0000c5 bff5      	OUT  MCUCR,R31
0000c6 bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
0000c7 e08d      	LDI  R24,(14-2)+1
0000c8 e0a2      	LDI  R26,2
0000c9 27bb      	CLR  R27
                 __CLEAR_REG:
0000ca 93ed      	ST   X+,R30
0000cb 958a      	DEC  R24
0000cc f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
0000cd e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
0000ce e094      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
0000cf e0a0      	LDI  R26,LOW(__SRAM_START)
0000d0 e0b1      	LDI  R27,HIGH(__SRAM_START)
                 __CLEAR_SRAM:
0000d1 93ed      	ST   X+,R30
0000d2 9701      	SBIW R24,1
0000d3 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
0000d4 e4e4      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
0000d5 e0f1      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
0000d6 9185      	LPM  R24,Z+
0000d7 9195      	LPM  R25,Z+
0000d8 9700      	SBIW R24,0
0000d9 f061      	BREQ __GLOBAL_INI_END
0000da 91a5      	LPM  R26,Z+
0000db 91b5      	LPM  R27,Z+
0000dc 9005      	LPM  R0,Z+
0000dd 9015      	LPM  R1,Z+
0000de 01bf      	MOVW R22,R30
0000df 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
0000e0 9005      	LPM  R0,Z+
0000e1 920d      	ST   X+,R0
0000e2 9701      	SBIW R24,1
0000e3 f7e1      	BRNE __GLOBAL_INI_LOOP
0000e4 01fb      	MOVW R30,R22
0000e5 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;GPIOR0 INITIALIZATION
0000e6 e0e0      	LDI  R30,__GPIOR0_INIT
0000e7 bbee      	OUT  GPIOR0,R30
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
0000e8 efef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
0000e9 bfed      	OUT  SPL,R30
0000ea e0e4      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
0000eb bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
0000ec e0c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
0000ed e0d2      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
0000ee 940c 011b 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0x00
                 
                 	.DSEG
                 	.ORG 0x200
                 
                 	.CSEG
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x01
                 	.EQU __sm_mask=0x0E
                 	.EQU __sm_powerdown=0x04
                 	.EQU __sm_powersave=0x06
                 	.EQU __sm_standby=0x0C
                 	.EQU __sm_ext_standby=0x0E
                 	.EQU __sm_adc_noise_red=0x02
                 	.SET power_ctrl_reg=smcr
                 	#endif
                 
                 	.DSEG
                 ;void Init();
                 ;void UpdateConsumption();
                 ;void DisplayConsumption();
                 ;void DisplayDigit(char currentDisplay, char digit);
                 ;void UpdateTime();
                 ;void CLS();
                 ;void DisplayInfo();
                 ;void DisplayPowerLevel();
                 ;void DisplayConsumptionDisplayMode();
                 ;void MockPULSE();
                 ;interrupt [19] void timer0_ovf_isr(void)
                 ; 0000 0087 {
                 
                 	.CSEG
                 _timer0_ovf_isr:
                 ; .FSTART _timer0_ovf_isr
0000f0 920a      	ST   -Y,R0
0000f1 921a      	ST   -Y,R1
0000f2 92fa      	ST   -Y,R15
0000f3 936a      	ST   -Y,R22
0000f4 937a      	ST   -Y,R23
0000f5 938a      	ST   -Y,R24
0000f6 939a      	ST   -Y,R25
0000f7 93aa      	ST   -Y,R26
0000f8 93ba      	ST   -Y,R27
0000f9 93ea      	ST   -Y,R30
0000fa 93fa      	ST   -Y,R31
0000fb b7ef      	IN   R30,SREG
0000fc 93ea      	ST   -Y,R30
                 ; 0000 0088 // Reinitialize Timer 0 value
                 ; 0000 0089 TCNT0=0x3C;
0000fd e3ec      	LDI  R30,LOW(60)
0000fe bde6      	OUT  0x26,R30
                 ; 0000 008A 
                 ; 0000 008B // Update CA
                 ; 0000 008C CA = (PIND & 0x80) >> 7;
0000ff b1e9      	IN   R30,0x9
000100 78e0      	ANDI R30,LOW(0x80)
000101 e0f0      	LDI  R31,0
000102 d2ab      	RCALL __ASRW3
000103 d2a8      	RCALL __ASRW4
000104 93e0 02c6 	STS  _CA,R30
                 ; 0000 008D 
                 ; 0000 008E if (CA == 0)
000106 30e0      	CPI  R30,0
000107 f411      	BRNE _0xC
                 ; 0000 008F PORTB = 0x00;
000108 e0e0      	LDI  R30,LOW(0)
000109 b9e5      	OUT  0x5,R30
                 ; 0000 0090 
                 ; 0000 0091 // DisplayInfo
                 ; 0000 0092 DisplayInfo();
                 _0xC:
00010a d1a6      	RCALL _DisplayInfo
                 ; 0000 0093 
                 ; 0000 0094 // Update mock pulse
                 ; 0000 0095 MockPULSE();
00010b d0ac      	RCALL _MockPULSE
                 ; 0000 0096 
                 ; 0000 0097 // Check for pulses coming from ADSP
                 ; 0000 0098 UpdateConsumption();
00010c d073      	RCALL _UpdateConsumption
                 ; 0000 0099 }
00010d 91e9      	LD   R30,Y+
00010e bfef      	OUT  SREG,R30
00010f 91f9      	LD   R31,Y+
000110 91e9      	LD   R30,Y+
000111 91b9      	LD   R27,Y+
000112 91a9      	LD   R26,Y+
000113 9199      	LD   R25,Y+
000114 9189      	LD   R24,Y+
000115 9179      	LD   R23,Y+
000116 9169      	LD   R22,Y+
000117 90f9      	LD   R15,Y+
000118 9019      	LD   R1,Y+
000119 9009      	LD   R0,Y+
00011a 9518      	RETI
                 ; .FEND
                 ;void main(void)
                 ; 0000 009D {
                 _main:
                 ; .FSTART _main
                 ; 0000 009E // Declare your local variables here
                 ; 0000 009F 
                 ; 0000 00A0 // Crystal Oscillator division factor: 1
                 ; 0000 00A1 #pragma optsize-
                 ; 0000 00A2 CLKPR=(1<<CLKPCE);
00011b e8e0      	LDI  R30,LOW(128)
00011c 93e0 0061 	STS  97,R30
                 ; 0000 00A3 CLKPR=(0<<CLKPCE) | (0<<CLKPS3) | (0<<CLKPS2) | (0<<CLKPS1) | (0<<CLKPS0);
00011e e0e0      	LDI  R30,LOW(0)
00011f 93e0 0061 	STS  97,R30
                 ; 0000 00A4 #ifdef _OPTIMIZE_SIZE_
                 ; 0000 00A5 #pragma optsize+
                 ; 0000 00A6 #endif
                 ; 0000 00A7 
                 ; 0000 00A8 // Input/Output Ports initialization
                 ; 0000 00A9 // Port A initialization
                 ; 0000 00AA // Function: Bit7=Out Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 00AB DDRA=(1<<DDA7) | (0<<DDA6) | (0<<DDA5) | (0<<DDA4) | (0<<DDA3) | (0<<DDA2) | (0<<DDA1) | (0<<DDA0);
000121 e8e0      	LDI  R30,LOW(128)
000122 b9e1      	OUT  0x1,R30
                 ; 0000 00AC // State: Bit7=1 Bit6=P Bit5=P Bit4=P Bit3=P Bit2=P Bit1=P Bit0=P
                 ; 0000 00AD PORTA=(1<<PORTA7) | (1<<PORTA6) | (1<<PORTA5) | (1<<PORTA4) | (1<<PORTA3) | (1<<PORTA2) | (1<<PORTA1) | (1<<PORTA0);
000123 efef      	LDI  R30,LOW(255)
000124 b9e2      	OUT  0x2,R30
                 ; 0000 00AE 
                 ; 0000 00AF // Port B initialization
                 ; 0000 00B0 // Function: Bit7=Out Bit6=Out Bit5=Out Bit4=Out Bit3=Out Bit2=Out Bit1=Out Bit0=Out
                 ; 0000 00B1 DDRB=(1<<DDB7) | (1<<DDB6) | (1<<DDB5) | (1<<DDB4) | (1<<DDB3) | (1<<DDB2) | (1<<DDB1) | (1<<DDB0);
000125 b9e4      	OUT  0x4,R30
                 ; 0000 00B2 // State: Bit7=1 Bit6=1 Bit5=1 Bit4=1 Bit3=1 Bit2=1 Bit1=1 Bit0=1
                 ; 0000 00B3 PORTB=(1<<PORTB7) | (1<<PORTB6) | (1<<PORTB5) | (1<<PORTB4) | (1<<PORTB3) | (1<<PORTB2) | (1<<PORTB1) | (1<<PORTB0);
000126 b9e5      	OUT  0x5,R30
                 ; 0000 00B4 
                 ; 0000 00B5 // Port C initialization
                 ; 0000 00B6 // Function: Bit7=Out Bit6=Out Bit5=Out Bit4=Out Bit3=Out Bit2=Out Bit1=Out Bit0=Out
                 ; 0000 00B7 DDRC=(1<<DDC7) | (1<<DDC6) | (1<<DDC5) | (1<<DDC4) | (1<<DDC3) | (1<<DDC2) | (1<<DDC1) | (1<<DDC0);
000127 b9e7      	OUT  0x7,R30
                 ; 0000 00B8 // State: Bit7=1 Bit6=1 Bit5=1 Bit4=1 Bit3=1 Bit2=1 Bit1=1 Bit0=1
                 ; 0000 00B9 PORTC=(1<<PORTC7) | (1<<PORTC6) | (1<<PORTC5) | (1<<PORTC4) | (1<<PORTC3) | (1<<PORTC2) | (1<<PORTC1) | (1<<PORTC0);
000128 b9e8      	OUT  0x8,R30
                 ; 0000 00BA 
                 ; 0000 00BB // Port D initialization
                 ; 0000 00BC // Function: Bit7=In Bit6=In Bit5=Out Bit4=In Bit3=Out Bit2=Out Bit1=Out Bit0=Out
                 ; 0000 00BD DDRD=(0<<DDD7) | (0<<DDD6) | (0<<DDD5) | (0<<DDD4) | (1<<DDD3) | (1<<DDD2) | (1<<DDD1) | (1<<DDD0);
000129 e0ef      	LDI  R30,LOW(15)
00012a b9ea      	OUT  0xA,R30
                 ; 0000 00BE // State: Bit7=T Bit6=T Bit5=1 Bit4=0 Bit3=1 Bit2=1 Bit1=1 Bit0=1
                 ; 0000 00BF PORTD=(1<<PORTD7) | (1<<PORTD6) | (1<<PORTD5) | (1<<PORTD4) | (1<<PORTD3) | (1<<PORTD2) | (1<<PORTD1) | (1<<PORTD0);
00012b efef      	LDI  R30,LOW(255)
00012c b9eb      	OUT  0xB,R30
                 ; 0000 00C0 
                 ; 0000 00C1 // Timer/Counter 0 initialization
                 ; 0000 00C2 // Clock source: System Clock
                 ; 0000 00C3 // Clock value: 9.766 kHz
                 ; 0000 00C4 // Mode: Normal top=0xFF
                 ; 0000 00C5 // OC0A output: Disconnected
                 ; 0000 00C6 // OC0B output: Disconnected
                 ; 0000 00C7 // Timer Period: 20.07 ms
                 ; 0000 00C8 TCCR0A=(0<<COM0A1) | (0<<COM0A0) | (0<<COM0B1) | (0<<COM0B0) | (0<<WGM01) | (0<<WGM00);
00012d e0e0      	LDI  R30,LOW(0)
00012e bde4      	OUT  0x24,R30
                 ; 0000 00C9 TCCR0B=(0<<WGM02) | (1<<CS02) | (0<<CS01) | (1<<CS00);
00012f e0e5      	LDI  R30,LOW(5)
000130 bde5      	OUT  0x25,R30
                 ; 0000 00CA TCNT0=0x3C;
000131 e3ec      	LDI  R30,LOW(60)
000132 bde6      	OUT  0x26,R30
                 ; 0000 00CB OCR0A=0x00;
000133 e0e0      	LDI  R30,LOW(0)
000134 bde7      	OUT  0x27,R30
                 ; 0000 00CC OCR0B=0x00;
000135 bde8      	OUT  0x28,R30
                 ; 0000 00CD 
                 ; 0000 00CE // Timer/Counter 1 initialization
                 ; 0000 00CF // Clock source: System Clock
                 ; 0000 00D0 // Clock value: Timer1 Stopped
                 ; 0000 00D1 // Mode: Normal top=0xFFFF
                 ; 0000 00D2 // OC1A output: Disconnected
                 ; 0000 00D3 // OC1B output: Disconnected
                 ; 0000 00D4 // Noise Canceler: Off
                 ; 0000 00D5 // Input Capture on Falling Edge
                 ; 0000 00D6 // Timer1 Overflow Interrupt: Off
                 ; 0000 00D7 // Input Capture Interrupt: Off
                 ; 0000 00D8 // Compare A Match Interrupt: Off
                 ; 0000 00D9 // Compare B Match Interrupt: Off
                 ; 0000 00DA TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
000136 93e0 0080 	STS  128,R30
                 ; 0000 00DB TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (0<<CS11) | (0<<CS10);
000138 93e0 0081 	STS  129,R30
                 ; 0000 00DC TCNT1H=0x00;
00013a 93e0 0085 	STS  133,R30
                 ; 0000 00DD TCNT1L=0x00;
00013c 93e0 0084 	STS  132,R30
                 ; 0000 00DE ICR1H=0x00;
00013e 93e0 0087 	STS  135,R30
                 ; 0000 00DF ICR1L=0x00;
000140 93e0 0086 	STS  134,R30
                 ; 0000 00E0 OCR1AH=0x00;
000142 93e0 0089 	STS  137,R30
                 ; 0000 00E1 OCR1AL=0x00;
000144 93e0 0088 	STS  136,R30
                 ; 0000 00E2 OCR1BH=0x00;
000146 93e0 008b 	STS  139,R30
                 ; 0000 00E3 OCR1BL=0x00;
000148 93e0 008a 	STS  138,R30
                 ; 0000 00E4 
                 ; 0000 00E5 // Timer/Counter 2 initialization
                 ; 0000 00E6 // Clock source: System Clock
                 ; 0000 00E7 // Clock value: Timer2 Stopped
                 ; 0000 00E8 // Mode: Normal top=0xFF
                 ; 0000 00E9 // OC2A output: Disconnected
                 ; 0000 00EA // OC2B output: Disconnected
                 ; 0000 00EB ASSR=(0<<EXCLK) | (0<<AS2);
00014a 93e0 00b6 	STS  182,R30
                 ; 0000 00EC TCCR2A=(0<<COM2A1) | (0<<COM2A0) | (0<<COM2B1) | (0<<COM2B0) | (0<<WGM21) | (0<<WGM20);
00014c 93e0 00b0 	STS  176,R30
                 ; 0000 00ED TCCR2B=(0<<WGM22) | (0<<CS22) | (0<<CS21) | (0<<CS20);
00014e 93e0 00b1 	STS  177,R30
                 ; 0000 00EE TCNT2=0x00;
000150 93e0 00b2 	STS  178,R30
                 ; 0000 00EF OCR2A=0x00;
000152 93e0 00b3 	STS  179,R30
                 ; 0000 00F0 OCR2B=0x00;
000154 93e0 00b4 	STS  180,R30
                 ; 0000 00F1 
                 ; 0000 00F2 // Timer/Counter 0 Interrupt(s) initialization
                 ; 0000 00F3 TIMSK0=(0<<OCIE0B) | (0<<OCIE0A) | (1<<TOIE0);
000156 e0e1      	LDI  R30,LOW(1)
000157 93e0 006e 	STS  110,R30
                 ; 0000 00F4 
                 ; 0000 00F5 // Timer/Counter 1 Interrupt(s) initialization
                 ; 0000 00F6 TIMSK1=(0<<ICIE1) | (0<<OCIE1B) | (0<<OCIE1A) | (0<<TOIE1);
000159 e0e0      	LDI  R30,LOW(0)
00015a 93e0 006f 	STS  111,R30
                 ; 0000 00F7 
                 ; 0000 00F8 // Timer/Counter 2 Interrupt(s) initialization
                 ; 0000 00F9 TIMSK2=(0<<OCIE2B) | (0<<OCIE2A) | (0<<TOIE2);
00015c 93e0 0070 	STS  112,R30
                 ; 0000 00FA 
                 ; 0000 00FB // External Interrupt(s) initialization
                 ; 0000 00FC // INT0: Off
                 ; 0000 00FD // INT1: Off
                 ; 0000 00FE // INT2: Off
                 ; 0000 00FF // Interrupt on any change on pins PCINT0-7: Off
                 ; 0000 0100 // Interrupt on any change on pins PCINT8-15: Off
                 ; 0000 0101 // Interrupt on any change on pins PCINT16-23: Off
                 ; 0000 0102 // Interrupt on any change on pins PCINT24-31: Off
                 ; 0000 0103 EICRA=(0<<ISC21) | (0<<ISC20) | (0<<ISC11) | (0<<ISC10) | (0<<ISC01) | (0<<ISC00);
00015e 93e0 0069 	STS  105,R30
                 ; 0000 0104 EIMSK=(0<<INT2) | (0<<INT1) | (0<<INT0);
000160 bbed      	OUT  0x1D,R30
                 ; 0000 0105 PCICR=(0<<PCIE3) | (0<<PCIE2) | (0<<PCIE1) | (0<<PCIE0);
000161 93e0 0068 	STS  104,R30
                 ; 0000 0106 
                 ; 0000 0107 // USART0 initialization
                 ; 0000 0108 // USART0 disabled
                 ; 0000 0109 UCSR0B=(0<<RXCIE0) | (0<<TXCIE0) | (0<<UDRIE0) | (0<<RXEN0) | (0<<TXEN0) | (0<<UCSZ02) | (0<<RXB80) | (0<<TXB80);
000163 93e0 00c1 	STS  193,R30
                 ; 0000 010A 
                 ; 0000 010B // USART1 initialization
                 ; 0000 010C // USART1 disabled
                 ; 0000 010D UCSR1B=(0<<RXCIE1) | (0<<TXCIE1) | (0<<UDRIE1) | (0<<RXEN1) | (0<<TXEN1) | (0<<UCSZ12) | (0<<RXB81) | (0<<TXB81);
000165 93e0 00c9 	STS  201,R30
                 ; 0000 010E 
                 ; 0000 010F // Analog Comparator initialization
                 ; 0000 0110 // Analog Comparator: Off
                 ; 0000 0111 // The Analog Comparator's positive input is
                 ; 0000 0112 // connected to the AIN0 pin
                 ; 0000 0113 // The Analog Comparator's negative input is
                 ; 0000 0114 // connected to the AIN1 pin
                 ; 0000 0115 ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
000167 e8e0      	LDI  R30,LOW(128)
000168 bfe0      	OUT  0x30,R30
                 ; 0000 0116 ADCSRB=(0<<ACME);
000169 e0e0      	LDI  R30,LOW(0)
00016a 93e0 007b 	STS  123,R30
                 ; 0000 0117 // Digital input buffer on AIN0: On
                 ; 0000 0118 // Digital input buffer on AIN1: On
                 ; 0000 0119 DIDR1=(0<<AIN0D) | (0<<AIN1D);
00016c 93e0 007f 	STS  127,R30
                 ; 0000 011A 
                 ; 0000 011B // ADC initialization
                 ; 0000 011C // ADC disabled
                 ; 0000 011D ADCSRA=(0<<ADEN) | (0<<ADSC) | (0<<ADATE) | (0<<ADIF) | (0<<ADIE) | (0<<ADPS2) | (0<<ADPS1) | (0<<ADPS0);
00016e 93e0 007a 	STS  122,R30
                 ; 0000 011E 
                 ; 0000 011F // SPI initialization
                 ; 0000 0120 // SPI disabled
                 ; 0000 0121 SPCR=(0<<SPIE) | (0<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
000170 bdec      	OUT  0x2C,R30
                 ; 0000 0122 
                 ; 0000 0123 // TWI initialization
                 ; 0000 0124 // TWI disabled
                 ; 0000 0125 TWCR=(0<<TWEA) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWEN) | (0<<TWIE);
000171 93e0 00bc 	STS  188,R30
                 ; 0000 0126 
                 ; 0000 0127 // Globally enable interrupts
                 ; 0000 0128 #asm("sei")
000173 9478      	SEI
                 ; 0000 0129 
                 ; 0000 012A // Initialize the device
                 ; 0000 012B Init();
000174 d003      	RCALL _Init
                 ; 0000 012C 
                 ; 0000 012D while (1)
                 _0xD:
                 ; 0000 012E {
                 ; 0000 012F // Display the consumption
                 ; 0000 0130 DisplayConsumption();
000175 d05d      	RCALL _DisplayConsumption
                 ; 0000 0131 
                 ; 0000 0132 // Wait for interruptions
                 ; 0000 0133 // PORTB &= 0x00;
                 ; 0000 0134 }
000176 cffe      	RJMP _0xD
                 ; 0000 0135 }
                 _0x10:
000177 cfff      	RJMP _0x10
                 ; .FEND
                 ;void Init()
                 ; 0000 0139 {
                 _Init:
                 ; .FSTART _Init
                 ; 0000 013A // Setting initial states = 0
                 ; 0000 013B Q = Q1 = S1 = S2 = S3 = S_PULSE = 0;
000178 e0e0      	LDI  R30,LOW(0)
000179 2e8e      	MOV  R8,R30
00017a 2ece      	MOV  R12,R30
00017b 2e5e      	MOV  R5,R30
00017c 2e4e      	MOV  R4,R30
00017d 2e9e      	MOV  R9,R30
00017e 2eae      	MOV  R10,R30
                 ; 0000 013C 
                 ; 0000 013D // Turn off displays
                 ; 0000 013E //PORTC = 0xff;
                 ; 0000 013F //PORTD = 0xff;
                 ; 0000 0140 //PORTB = 0xff;
                 ; 0000 0141 }
00017f 9508      	RET
                 ; .FEND
                 ;void UpdateConsumption()
                 ; 0000 0144 {
                 _UpdateConsumption:
                 ; .FSTART _UpdateConsumption
                 ; 0000 0145 // Identify PULSE
                 ; 0000 0146 // PULSE = PINA & 0x01;
                 ; 0000 0147 
                 ; 0000 0148 /* switch(S2)
                 ; 0000 0149 {
                 ; 0000 014A case 0:
                 ; 0000 014B {
                 ; 0000 014C char cntP = 0;
                 ; 0000 014D 
                 ; 0000 014E // PD6 -> Sending request from ADSP
                 ; 0000 014F // PD7 -> Reading ack from ATmega164A
                 ; 0000 0150 
                 ; 0000 0151 // Check if sending request flag is up
                 ; 0000 0152 // (Receiving sending request on PD6)
                 ; 0000 0153 if (PORTD && 0x40)
                 ; 0000 0154 {
                 ; 0000 0155 // Send reading ack
                 ; 0000 0156 // (Sending ack on PD7)
                 ; 0000 0157 PORTD |= 0x80;
                 ; 0000 0158 
                 ; 0000 0159 // Going further to reading the pulses
                 ; 0000 015A S2 = 1;
                 ; 0000 015B }
                 ; 0000 015C break;
                 ; 0000 015D }
                 ; 0000 015E case 1:
                 ; 0000 015F {
                 ; 0000 0160 // If PULSE is on, start counting
                 ; 0000 0161 if (PULSE)
                 ; 0000 0162 {
                 ; 0000 0163 // Increment cntP
                 ; 0000 0164 cntP += 1;
                 ; 0000 0165 
                 ; 0000 0166 // Reset reading flag
                 ; 0000 0167 PORTD &= 0x7f;
                 ; 0000 0168 
                 ; 0000 0169 // Go further if the pulse period has passed,
                 ; 0000 016A // otherwise go back wait for sensding ack again.
                 ; 0000 016B S2 = (cntP == DP) ? 2 : 1;
                 ; 0000 016C }
                 ; 0000 016D break;
                 ; 0000 016E }
                 ; 0000 016F case 2:
                 ; 0000 0170 {
                 ; 0000 0171 if (~PULSE)
                 ; 0000 0172 {
                 ; 0000 0173 // Update current consumption range
                 ; 0000 0174 Q = CLS();
                 ; 0000 0175 
                 ; 0000 0176 // Increment consumption
                 ; 0000 0177 CONS[Q] += 1;
                 ; 0000 0178 
                 ; 0000 0179 // Wait for another pulse
                 ; 0000 017A S2 = 0;
                 ; 0000 017B }
                 ; 0000 017C break;
                 ; 0000 017D }
                 ; 0000 017E } */
                 ; 0000 017F 
                 ; 0000 0180 // Read power level
                 ; 0000 0181 // PowerLevel = (PINA & 0xfe) >> 1;
                 ; 0000 0182 
                 ; 0000 0183 // For testing purposes, we will assume PowerLevel = 6 kW
                 ; 0000 0184 PowerLevel = 6;
000180 e0e6      	LDI  R30,LOW(6)
000181 e0f0      	LDI  R31,HIGH(6)
000182 93e0 02c7 	STS  _PowerLevel,R30
000184 93f0 02c8 	STS  _PowerLevel+1,R31
                 ; 0000 0185 
                 ; 0000 0186 switch(S2)
000186 2de5      	MOV  R30,R5
000187 e0f0      	LDI  R31,0
                 ; 0000 0187 {
                 ; 0000 0188 case 0:
000188 9730      	SBIW R30,0
000189 f481      	BRNE _0x14
                 ; 0000 0189 {
                 ; 0000 018A // If PULSE is on, start counting
                 ; 0000 018B if (PULSE)
00018a 2077      	TST  R7
00018b f069      	BREQ _0x15
                 ; 0000 018C {
                 ; 0000 018D // Increment cntP
                 ; 0000 018E cntP += 1;
00018c 91e0 02d2 	LDS  R30,_cntP
00018e 5fef      	SUBI R30,-LOW(1)
00018f 93e0 02d2 	STS  _cntP,R30
                 ; 0000 018F 
                 ; 0000 0190 // Reset reading flag
                 ; 0000 0191 // PORTD &= 0x7f;
                 ; 0000 0192 
                 ; 0000 0193 // Go further if the pulse period has passed,
                 ; 0000 0194 // otherwise go back wait for sensding ack again.
                 ; 0000 0195 S2 = (cntP == DP) ? 1 : 0;
000191 91a0 02d2 	LDS  R26,_cntP
000193 30a1      	CPI  R26,LOW(0x1)
000194 f411      	BRNE _0x16
000195 e0e1      	LDI  R30,LOW(1)
000196 c001      	RJMP _0x17
                 _0x16:
000197 e0e0      	LDI  R30,LOW(0)
                 _0x17:
000198 2e5e      	MOV  R5,R30
                 ; 0000 0196 }
                 ; 0000 0197 break;
                 _0x15:
000199 c01d      	RJMP _0x13
                 ; 0000 0198 }
                 ; 0000 0199 case 1:
                 _0x14:
00019a 30e1      	CPI  R30,LOW(0x1)
00019b e0a0      	LDI  R26,HIGH(0x1)
00019c 07fa      	CPC  R31,R26
00019d f4c9      	BRNE _0x13
                 ; 0000 019A {
                 ; 0000 019B if (~PULSE)
00019e 2de7      	MOV  R30,R7
00019f 95e0      	COM  R30
0001a0 30e0      	CPI  R30,0
0001a1 f0a9      	BREQ _0x1A
                 ; 0000 019C {
                 ; 0000 019D // Update current consumption range
                 ; 0000 019E CLS();
0001a2 d099      	RCALL _CLS
                 ; 0000 019F 
                 ; 0000 01A0 // Increment consumption
                 ; 0000 01A1 CONSUM[Q] += 1;
0001a3 2dea      	MOV  R30,R10
0001a4 d1ac      	RCALL SUBOPT_0x0
0001a5 91ed      	LD   R30,X+
0001a6 91fd      	LD   R31,X+
0001a7 9631      	ADIW R30,1
0001a8 93fe      	ST   -X,R31
0001a9 93ee      	ST   -X,R30
                 ; 0000 01A2 
                 ; 0000 01A3 // Increment total consumption
                 ; 0000 01A4 CONSUM[3] += 1;
                +
0001aa 91e0 02c2+LDS R30 , _CONSUM + ( 6 )
0001ac 91f0 02c3+LDS R31 , _CONSUM + ( 6 ) + 1
                 	__GETW1MN _CONSUM,6
0001ae 9631      	ADIW R30,1
                +
0001af 93e0 02c2+STS _CONSUM + ( 6 ) , R30
0001b1 93f0 02c3+STS _CONSUM + ( 6 ) + 1 , R31
                 	__PUTW1MN _CONSUM,6
                 ; 0000 01A5 
                 ; 0000 01A6 // Wait for another pulse
                 ; 0000 01A7 S2 = 0;
0001b3 2455      	CLR  R5
                 ; 0000 01A8 cntP = 0;
0001b4 e0e0      	LDI  R30,LOW(0)
0001b5 93e0 02d2 	STS  _cntP,R30
                 ; 0000 01A9 }
                 ; 0000 01AA break;
                 _0x1A:
                 ; 0000 01AB }
                 ; 0000 01AC }
                 _0x13:
                 ; 0000 01AD }
0001b7 9508      	RET
                 ; .FEND
                 ;void MockPULSE()
                 ; 0000 01B2 {
                 _MockPULSE:
                 ; .FSTART _MockPULSE
                 ; 0000 01B3 switch(S_PULSE)
0001b8 2de8      	MOV  R30,R8
0001b9 e0f0      	LDI  R31,0
                 ; 0000 01B4 {
                 ; 0000 01B5 case 0:
0001ba 9730      	SBIW R30,0
0001bb f439      	BRNE _0x1E
                 ; 0000 01B6 {
                 ; 0000 01B7 cntMockPulse = 0;
0001bc e0e0      	LDI  R30,LOW(0)
0001bd 93e0 02d3 	STS  _cntMockPulse,R30
                 ; 0000 01B8 PULSE = 1;
0001bf e0e1      	LDI  R30,LOW(1)
0001c0 2e7e      	MOV  R7,R30
                 ; 0000 01B9 S_PULSE = 1;
0001c1 2e8e      	MOV  R8,R30
                 ; 0000 01BA break;
0001c2 c00f      	RJMP _0x1D
                 ; 0000 01BB }
                 ; 0000 01BC case 1:
                 _0x1E:
0001c3 30e1      	CPI  R30,LOW(0x1)
0001c4 e0a0      	LDI  R26,HIGH(0x1)
0001c5 07fa      	CPC  R31,R26
0001c6 f459      	BRNE _0x1D
                 ; 0000 01BD {
                 ; 0000 01BE cntMockPulse += 1;
0001c7 91e0 02d3 	LDS  R30,_cntMockPulse
0001c9 5fef      	SUBI R30,-LOW(1)
0001ca 93e0 02d3 	STS  _cntMockPulse,R30
                 ; 0000 01BF PULSE = 0;
0001cc 2477      	CLR  R7
                 ; 0000 01C0 if (cntMockPulse == 49)
0001cd 91a0 02d3 	LDS  R26,_cntMockPulse
0001cf 33a1      	CPI  R26,LOW(0x31)
0001d0 f409      	BRNE _0x20
                 ; 0000 01C1 S_PULSE = 0;
0001d1 2488      	CLR  R8
                 ; 0000 01C2 break;
                 _0x20:
                 ; 0000 01C3 }
                 ; 0000 01C4 }
                 _0x1D:
                 ; 0000 01C5 }
0001d2 9508      	RET
                 ; .FEND
                 ;void DisplayConsumption()
                 ; 0000 01C8 {
                 _DisplayConsumption:
                 ; .FSTART _DisplayConsumption
                 ; 0000 01C9 // We assume:
                 ; 0000 01CA // PORTC: PC0 - PC6 -> 7 segments (A-G)
                 ; 0000 01CB // PORTD: PD0 - PD3 -> select the common cathode for each digit (multiplexing)
                 ; 0000 01CC // PD3 - C4, PD2 - C3, PD1 - C2, PD0 - C1
                 ; 0000 01CD // Q - consumption range:
                 ; 0000 01CE // 0 -> 00:00 - H1:00
                 ; 0000 01CF // 1 -> H1:00 - H2:00               (MON - FRI)
                 ; 0000 01D0 // 2 -> H2:00 - 00:00 (next day)
                 ; 0000 01D1 // 3 -> SAT - SUN
                 ; 0000 01D2 
                 ; 0000 01D3 // The actual approach:
                 ; 0000 01D4 // Each main loop iteration we multiplex the digits and display one at a time
                 ; 0000 01D5 
                 ; 0000 01D6 // If CA is pressed -> display total consumption,
                 ; 0000 01D7 // else -> display consumption based on current range.
                 ; 0000 01D8 char cons = CONSUM[Q1];
                 ; 0000 01D9 
                 ; 0000 01DA // Compute and display C4
                 ; 0000 01DB C4 = cons / 1000;
0001d3 931a      	ST   -Y,R17
                 ;	cons -> R17
0001d4 2de9      	MOV  R30,R9
0001d5 d17b      	RCALL SUBOPT_0x0
0001d6 91ec      	LD   R30,X
0001d7 2f1e      	MOV  R17,R30
0001d8 2fa1      	MOV  R26,R17
0001d9 e0b0      	LDI  R27,0
0001da eee8      	LDI  R30,LOW(1000)
0001db e0f3      	LDI  R31,HIGH(1000)
0001dc d1eb      	RCALL __DIVW21
0001dd 2eee      	MOV  R14,R30
                 ; 0000 01DC cons %= 1000;
0001de 2fa1      	MOV  R26,R17
0001df 27bb      	CLR  R27
0001e0 eee8      	LDI  R30,LOW(1000)
0001e1 e0f3      	LDI  R31,HIGH(1000)
0001e2 d1ea      	RCALL __MODW21
0001e3 2f1e      	MOV  R17,R30
                 ; 0000 01DD DisplayDigit(4, C4);
0001e4 e0e4      	LDI  R30,LOW(4)
0001e5 93ea      	ST   -Y,R30
0001e6 2dae      	MOV  R26,R14
0001e7 d029      	RCALL _DisplayDigit
                 ; 0000 01DE 
                 ; 0000 01DF // Compute and display C3
                 ; 0000 01E0 C3 = cons / 100;
0001e8 2fa1      	MOV  R26,R17
0001e9 e0b0      	LDI  R27,0
0001ea e6e4      	LDI  R30,LOW(100)
0001eb e0f0      	LDI  R31,HIGH(100)
0001ec d1db      	RCALL __DIVW21
0001ed 2ede      	MOV  R13,R30
                 ; 0000 01E1 cons %= 100;
0001ee 2fa1      	MOV  R26,R17
0001ef 27bb      	CLR  R27
0001f0 e6e4      	LDI  R30,LOW(100)
0001f1 e0f0      	LDI  R31,HIGH(100)
0001f2 d1da      	RCALL __MODW21
0001f3 2f1e      	MOV  R17,R30
                 ; 0000 01E2 DisplayDigit(3, C3);
0001f4 e0e3      	LDI  R30,LOW(3)
0001f5 93ea      	ST   -Y,R30
0001f6 2dad      	MOV  R26,R13
0001f7 d019      	RCALL _DisplayDigit
                 ; 0000 01E3 
                 ; 0000 01E4 // Compute and display C2
                 ; 0000 01E5 C2 = cons / 10;
0001f8 2fa1      	MOV  R26,R17
0001f9 e0b0      	LDI  R27,0
0001fa e0ea      	LDI  R30,LOW(10)
0001fb e0f0      	LDI  R31,HIGH(10)
0001fc d1cb      	RCALL __DIVW21
0001fd 93e0 02c4 	STS  _C2,R30
                 ; 0000 01E6 DisplayDigit(2, C2);
0001ff e0e2      	LDI  R30,LOW(2)
000200 93ea      	ST   -Y,R30
000201 91a0 02c4 	LDS  R26,_C2
000203 d00d      	RCALL _DisplayDigit
                 ; 0000 01E7 
                 ; 0000 01E8 // Compute and display C1
                 ; 0000 01E9 C1 = cons % 10;
000204 2fa1      	MOV  R26,R17
000205 27bb      	CLR  R27
000206 e0ea      	LDI  R30,LOW(10)
000207 e0f0      	LDI  R31,HIGH(10)
000208 d1c4      	RCALL __MODW21
000209 93e0 02c5 	STS  _C1,R30
                 ; 0000 01EA DisplayDigit(1, C1);
00020b e0e1      	LDI  R30,LOW(1)
00020c 93ea      	ST   -Y,R30
00020d 91a0 02c5 	LDS  R26,_C1
00020f d001      	RCALL _DisplayDigit
                 ; 0000 01EB }
000210 c13e      	RJMP _0x2000002
                 ; .FEND
                 ;void DisplayDigit(char currentDisplay, char digit)
                 ; 0000 01EE {
                 _DisplayDigit:
                 ; .FSTART _DisplayDigit
                 ; 0000 01EF // Select the desired display (turn on the pin
                 ; 0000 01F0 // corresponding to the desired digit (C4/C3/C2/C1)
                 ; 0000 01F1 char output;
                 ; 0000 01F2 
                 ; 0000 01F3 // Set PORTC pins to the corresponding digit
                 ; 0000 01F4 // PORTC = DIGITS[digit];
                 ; 0000 01F5 
                 ; 0000 01F6 switch (currentDisplay)
000211 d166      	RCALL __SAVELOCR4
000212 2f0a      	MOV  R16,R26
000213 813c      	LDD  R19,Y+4
                 ;	currentDisplay -> R19
                 ;	digit -> R16
                 ;	output -> R17
000214 2fe3      	MOV  R30,R19
000215 e0f0      	LDI  R31,0
                 ; 0000 01F7 {
                 ; 0000 01F8 case 4:
000216 30e4      	CPI  R30,LOW(0x4)
000217 e0a0      	LDI  R26,HIGH(0x4)
000218 07fa      	CPC  R31,R26
000219 f411      	BRNE _0x24
                 ; 0000 01F9 // Turn PD3 on
                 ; 0000 01FA //output &= 0b00000111;
                 ; 0000 01FB output = 0x08;
00021a e018      	LDI  R17,LOW(8)
                 ; 0000 01FC break;
00021b c011      	RJMP _0x23
                 ; 0000 01FD case 3:
                 _0x24:
00021c 30e3      	CPI  R30,LOW(0x3)
00021d e0a0      	LDI  R26,HIGH(0x3)
00021e 07fa      	CPC  R31,R26
00021f f411      	BRNE _0x25
                 ; 0000 01FE // Turn PD2 on
                 ; 0000 01FF // output &= 0b00001011;
                 ; 0000 0200 output = 0x04;
000220 e014      	LDI  R17,LOW(4)
                 ; 0000 0201 break;
000221 c00b      	RJMP _0x23
                 ; 0000 0202 case 2:
                 _0x25:
000222 30e2      	CPI  R30,LOW(0x2)
000223 e0a0      	LDI  R26,HIGH(0x2)
000224 07fa      	CPC  R31,R26
000225 f411      	BRNE _0x26
                 ; 0000 0203 // Turn PD1 on
                 ; 0000 0204 output = 0x02;
000226 e012      	LDI  R17,LOW(2)
                 ; 0000 0205 break;
000227 c005      	RJMP _0x23
                 ; 0000 0206 case 1:
                 _0x26:
000228 30e1      	CPI  R30,LOW(0x1)
000229 e0a0      	LDI  R26,HIGH(0x1)
00022a 07fa      	CPC  R31,R26
00022b f409      	BRNE _0x23
                 ; 0000 0207 // Turn PD0 on
                 ; 0000 0208 output = 0x01;
00022c e011      	LDI  R17,LOW(1)
                 ; 0000 0209 break;
                 ; 0000 020A }
                 _0x23:
                 ; 0000 020B 
                 ; 0000 020C // Delete PD0-3
                 ; 0000 020D PORTD &= 0xF0;
00022d b1eb      	IN   R30,0xB
00022e 7fe0      	ANDI R30,LOW(0xF0)
00022f b9eb      	OUT  0xB,R30
                 ; 0000 020E 
                 ; 0000 020F // Assign output to PORTC in order to select the desired display;
                 ; 0000 0210 PORTD |= output;
000230 b1eb      	IN   R30,0xB
000231 2be1      	OR   R30,R17
000232 b9eb      	OUT  0xB,R30
                 ; 0000 0211 
                 ; 0000 0212 // Set PORTC pins to the corresponding digit
                 ; 0000 0213 PORTC = DIGITS[digit];
000233 2fe0      	MOV  R30,R16
000234 e0f0      	LDI  R31,0
000235 58e4      	SUBI R30,LOW(-_DIGITS*2)
000236 4fff      	SBCI R31,HIGH(-_DIGITS*2)
000237 9004      	LPM  R0,Z
000238 b808      	OUT  0x8,R0
                 ; 0000 0214 
                 ; 0000 0215 // Add delay (10 us)
                 ; 0000 0216 // _display_us(10);
                 ; 0000 0217 }
000239 d145      	RCALL __LOADLOCR4
00023a 9625      	ADIW R28,5
00023b 9508      	RET
                 ; .FEND
                 ;void UpdateTime(){
                 ; 0000 021A void UpdateTime(){
                 ; 0000 021B cnt_time += 1; //incrementare contor de timp
                 ; 0000 021C if(cnt_time != T_SEC) return;
                 ; 0000 021D 
                 ; 0000 021E cnt_time = 0; // se reseteaza contorul
                 ; 0000 021F S+=1;  //incrementeaza contor secunde
                 ; 0000 0220 
                 ; 0000 0221 if(S!=60) return;
                 ; 0000 0222 S = 0;//se reseteaza nr de secunde
                 ; 0000 0223 M += 1; //incrementeaza contor minute
                 ; 0000 0224 
                 ; 0000 0225 if(M!=60) return;
                 ; 0000 0226 M = 0;
                 ; 0000 0227 H += 1;
                 ; 0000 0228 
                 ; 0000 0229 if(H!=24) return;
                 ; 0000 022A H = 0;
                 ; 0000 022B Z += 1;
                 ; 0000 022C 
                 ; 0000 022D if (Z == 7) Z = 0;
                 ; 0000 022E return;
                 ; 0000 022F }
                 ;void CLS()
                 ; 0000 0232 {
                 _CLS:
                 ; .FSTART _CLS
                 ; 0000 0233 char out;
                 ; 0000 0234 
                 ; 0000 0235 //exemplu
                 ; 0000 0236 // Ziua 3, ora 8, min 6, sec 3
                 ; 0000 0237 // 0x03080603
                 ; 0000 0238 long int now = (Z<<24) | (H<<16) | (M<<8) | S;
                 ; 0000 0239 
                 ; 0000 023A long int *adr = TABA[Q];
                 ; 0000 023B char ready = 0;
                 ; 0000 023C int i = 0;
                 ; 0000 023D 
                 ; 0000 023E while (!ready)
00023c 9724      	SBIW R28,4
00023d d138      	RCALL __SAVELOCR6
                 ;	out -> R17
                 ;	now -> Y+6
                 ;	*adr -> R18,R19
                 ;	ready -> R16
                 ;	i -> R20,R21
00023e 91a0 02ac 	LDS  R26,_Z
000240 91b0 02ad 	LDS  R27,_Z+1
000242 9180 02ae 	LDS  R24,_Z+2
000244 9190 02af 	LDS  R25,_Z+3
000246 e1e8      	LDI  R30,LOW(24)
000247 d148      	RCALL __LSLD12
000248 01df      	MOVW R26,R30
000249 01cb      	MOVW R24,R22
00024a 91e0 02b0 	LDS  R30,_H
00024c 91f0 02b1 	LDS  R31,_H+1
00024e 9160 02b2 	LDS  R22,_H+2
000250 9170 02b3 	LDS  R23,_H+3
                +
000252 2f6e     +MOV R22 , R30
000253 2f7f     +MOV R23 , R31
000254 e0e0     +LDI R30 , 0
000255 e0f0     +LDI R31 , 0
                 	__LSLD16
000256 d102      	RCALL SUBOPT_0x1
000257 937f      	PUSH R23
000258 936f      	PUSH R22
000259 93ff      	PUSH R31
00025a 93ef      	PUSH R30
00025b 91a0 02b4 	LDS  R26,_M
00025d 91b0 02b5 	LDS  R27,_M+1
00025f 9180 02b6 	LDS  R24,_M+2
000261 9190 02b7 	LDS  R25,_M+3
000263 e0e8      	LDI  R30,LOW(8)
000264 d12b      	RCALL __LSLD12
000265 91af      	POP  R26
000266 91bf      	POP  R27
000267 918f      	POP  R24
000268 919f      	POP  R25
000269 d0ef      	RCALL SUBOPT_0x1
00026a 91a0 02b8 	LDS  R26,_S
00026c 91b0 02b9 	LDS  R27,_S+1
00026e 9180 02ba 	LDS  R24,_S+2
000270 9190 02bb 	LDS  R25,_S+3
000272 d0e6      	RCALL SUBOPT_0x1
                +
000273 83ee     +STD Y + 6 , R30
000274 83ff     +STD Y + 6 + 1 , R31
000275 8768     +STD Y + 6 + 2 , R22
000276 8779     +STD Y + 6 + 3 , R23
                 	__PUTD1S 6
000277 2dea      	MOV  R30,R10
000278 eaa4      	LDI  R26,LOW(_TABA)
000279 e0b2      	LDI  R27,HIGH(_TABA)
00027a e0f0      	LDI  R31,0
00027b 0fee      	LSL  R30
00027c 1fff      	ROL  R31
00027d 0fae      	ADD  R26,R30
00027e 1fbf      	ADC  R27,R31
                +
00027f 91ed     +LD R30 , X +
000280 91fc     +LD R31 , X
000281 9711     +SBIW R26 , 1
                 	__GETW1P
000282 019f      	MOVW R18,R30
000283 e000      	LDI  R16,0
                +
000284 e040     +LDI R20 , LOW ( 0 )
000285 e050     +LDI R21 , HIGH ( 0 )
                 	__GETWRN 20,21,0
                 _0x2D:
000286 3000      	CPI  R16,0
000287 f509      	BRNE _0x2F
                 ; 0000 023F {
                 ; 0000 0240 if (now == adr[i]) {
000288 d0d5      	RCALL SUBOPT_0x2
                +
000289 81ae     +LDD R26 , Y + 6
00028a 81bf     +LDD R27 , Y + 6 + 1
00028b 8588     +LDD R24 , Y + 6 + 2
00028c 8599     +LDD R25 , Y + 6 + 3
                 	__GETD2S 6
                +
00028d 17ea     +CP R30 , R26
00028e 07fb     +CPC R31 , R27
00028f 0768     +CPC R22 , R24
000290 0779     +CPC R23 , R25
                 	__CPD12
000291 f449      	BRNE _0x30
                 ; 0000 0241 Q = adr[i + 1];
000292 01fa      	MOVW R30,R20
000293 9631      	ADIW R30,1
000294 01d9      	MOVW R26,R18
000295 d111      	RCALL __LSLW2
000296 0fae      	ADD  R26,R30
000297 1fbf      	ADC  R27,R31
000298 90ac      	LD   R10,X
                 ; 0000 0242 ready = 1;
000299 e001      	LDI  R16,LOW(1)
                 ; 0000 0243 }
                 ; 0000 0244 else if (adr[i] == Ter) ready = 1;
00029a c00d      	RJMP _0x31
                 _0x30:
00029b d0c2      	RCALL SUBOPT_0x2
                +
00029c 30e0     +CPI R30 , LOW ( 0x10000000 )
00029d e0a0     +LDI R26 , HIGH ( 0x10000000 )
00029e 07fa     +CPC R31 , R26
00029f e0a0     +LDI R26 , BYTE3 ( 0x10000000 )
0002a0 076a     +CPC R22 , R26
0002a1 e1a0     +LDI R26 , BYTE4 ( 0x10000000 )
0002a2 077a     +CPC R23 , R26
                 	__CPD1N 0x10000000
0002a3 f411      	BRNE _0x32
0002a4 e001      	LDI  R16,LOW(1)
                 ; 0000 0245 else i = i+2;
0002a5 c002      	RJMP _0x33
                 _0x32:
                +
0002a6 5f4e     +SUBI R20 , LOW ( - 2 )
0002a7 4f5f     +SBCI R21 , HIGH ( - 2 )
                 	__ADDWRN 20,21,2
                 ; 0000 0246 }
                 _0x33:
                 _0x31:
0002a8 cfdd      	RJMP _0x2D
                 _0x2F:
                 ; 0000 0247 
                 ; 0000 0248 out = Tout[Q];
0002a9 2dea      	MOV  R30,R10
0002aa e0f0      	LDI  R31,0
0002ab 56e0      	SUBI R30,LOW(-_Tout)
0002ac 4ffd      	SBCI R31,HIGH(-_Tout)
0002ad 8110      	LD   R17,Z
                 ; 0000 0249 }
0002ae d0ce      	RCALL __LOADLOCR6
0002af 962a      	ADIW R28,10
0002b0 9508      	RET
                 ; .FEND
                 ;void DisplayInfo()
                 ; 0000 024C {
                 _DisplayInfo:
                 ; .FSTART _DisplayInfo
                 ; 0000 024D DisplayConsumptionDisplayMode();
0002b1 d02b      	RCALL _DisplayConsumptionDisplayMode
                 ; 0000 024E DisplayPowerLevel();
0002b2 d001      	RCALL _DisplayPowerLevel
                 ; 0000 024F }
0002b3 9508      	RET
                 ; .FEND
                 ;void DisplayPowerLevel()
                 ; 0000 0252 {
                 _DisplayPowerLevel:
                 ; .FSTART _DisplayPowerLevel
                 ; 0000 0253 char out;
                 ; 0000 0254 
                 ; 0000 0255 if (!PowerLevel)         // PowerLevel = 0 kW
0002b4 931a      	ST   -Y,R17
                 ;	out -> R17
0002b5 d0b2      	RCALL SUBOPT_0x3
0002b6 9730      	SBIW R30,0
0002b7 f419      	BRNE _0x34
                 ; 0000 0256 {
                 ; 0000 0257 out = CLC_LEVEL[0];
0002b8 9110 02c9 	LDS  R17,_CLC_LEVEL
                 ; 0000 0258 }
                 ; 0000 0259 else if (PowerLevel < 2.5)   // 0 < PowerLevel < 2.5 kW
0002ba c01f      	RJMP _0x35
                 _0x34:
0002bb d0b1      	RCALL SUBOPT_0x4
                +
0002bc e0e0     +LDI R30 , LOW ( 0x40200000 )
0002bd e0f0     +LDI R31 , HIGH ( 0x40200000 )
0002be e260     +LDI R22 , BYTE3 ( 0x40200000 )
0002bf e470     +LDI R23 , BYTE4 ( 0x40200000 )
                 	__GETD1N 0x40200000
0002c0 d169      	RCALL __CMPF12
0002c1 f418      	BRSH _0x36
                 ; 0000 025A {
                 ; 0000 025B out = CLC_LEVEL[1];
                +
0002c2 9110 02ca+LDS R17 , _CLC_LEVEL + ( 1 )
                 	__GETBRMN 17,_CLC_LEVEL,1
                 ; 0000 025C }
                 ; 0000 025D else if (PowerLevel < 5)     // 2.5 <= PowerLevel < 5 kW
0002c4 c015      	RJMP _0x37
                 _0x36:
0002c5 91a0 02c7 	LDS  R26,_PowerLevel
0002c7 91b0 02c8 	LDS  R27,_PowerLevel+1
0002c9 9715      	SBIW R26,5
0002ca f41c      	BRGE _0x38
                 ; 0000 025E {
                 ; 0000 025F out = CLC_LEVEL[2];
                +
0002cb 9110 02cb+LDS R17 , _CLC_LEVEL + ( 2 )
                 	__GETBRMN 17,_CLC_LEVEL,2
                 ; 0000 0260 }
                 ; 0000 0261 else if (PowerLevel < 7.5)   // 5 <= PowerLevel < 7.5 kW
0002cd c00c      	RJMP _0x39
                 _0x38:
0002ce d09e      	RCALL SUBOPT_0x4
                +
0002cf e0e0     +LDI R30 , LOW ( 0x40F00000 )
0002d0 e0f0     +LDI R31 , HIGH ( 0x40F00000 )
0002d1 ef60     +LDI R22 , BYTE3 ( 0x40F00000 )
0002d2 e470     +LDI R23 , BYTE4 ( 0x40F00000 )
                 	__GETD1N 0x40F00000
0002d3 d156      	RCALL __CMPF12
0002d4 f418      	BRSH _0x3A
                 ; 0000 0262 {
                 ; 0000 0263 out = CLC_LEVEL[3];
                +
0002d5 9110 02cc+LDS R17 , _CLC_LEVEL + ( 3 )
                 	__GETBRMN 17,_CLC_LEVEL,3
                 ; 0000 0264 }
                 ; 0000 0265 else                         // PowerLvel >= 7.5 kW
0002d7 c002      	RJMP _0x3B
                 _0x3A:
                 ; 0000 0266 {
                 ; 0000 0267 out = CLC_LEVEL[4];
                +
0002d8 9110 02cd+LDS R17 , _CLC_LEVEL + ( 4 )
                 	__GETBRMN 17,_CLC_LEVEL,4
                 ; 0000 0268 }
                 _0x3B:
                 _0x39:
                 _0x37:
                 _0x35:
                 ; 0000 0269 
                 ; 0000 026A // Delete PB7-PB4
                 ; 0000 026B PORTB &= 0x0f;
0002da b1e5      	IN   R30,0x5
0002db 70ef      	ANDI R30,LOW(0xF)
0002dc c06e      	RJMP _0x2000001
                 ; 0000 026C 
                 ; 0000 026D // Display out on PB7-PB4
                 ; 0000 026E PORTB |= out;
                 ; 0000 026F }
                 ; .FEND
                 ;void DisplayConsumptionDisplayMode()
                 ; 0000 0272 {
                 _DisplayConsumptionDisplayMode:
                 ; .FSTART _DisplayConsumptionDisplayMode
                 ; 0000 0273 char out;
                 ; 0000 0274 
                 ; 0000 0275 switch(S3)
0002dd 931a      	ST   -Y,R17
                 ;	out -> R17
0002de 2dec      	MOV  R30,R12
0002df e0f0      	LDI  R31,0
                 ; 0000 0276 {
                 ; 0000 0277 case 0:
0002e0 9730      	SBIW R30,0
0002e1 f439      	BRNE _0x3F
                 ; 0000 0278 {
                 ; 0000 0279 if (CA == 0)            // Pressed CA
0002e2 91e0 02c6 	LDS  R30,_CA
0002e4 30e0      	CPI  R30,0
0002e5 f411      	BRNE _0x40
                 ; 0000 027A {
                 ; 0000 027B S3 = 1;
0002e6 e0e1      	LDI  R30,LOW(1)
0002e7 2ece      	MOV  R12,R30
                 ; 0000 027C }
                 ; 0000 027D break;
                 _0x40:
0002e8 c052      	RJMP _0x3E
                 ; 0000 027E }
                 ; 0000 027F case 1:                 // Released CA
                 _0x3F:
0002e9 30e1      	CPI  R30,LOW(0x1)
0002ea e0a0      	LDI  R26,HIGH(0x1)
0002eb 07fa      	CPC  R31,R26
0002ec f449      	BRNE _0x41
                 ; 0000 0280 {
                 ; 0000 0281 if (CA)
0002ed 91e0 02c6 	LDS  R30,_CA
0002ef 30e0      	CPI  R30,0
0002f0 f021      	BREQ _0x42
                 ; 0000 0282 {
                 ; 0000 0283 S3 = 2;
0002f1 e0e2      	LDI  R30,LOW(2)
0002f2 2ece      	MOV  R12,R30
                 ; 0000 0284 Q1 = 1;
0002f3 e0e1      	LDI  R30,LOW(1)
0002f4 2e9e      	MOV  R9,R30
                 ; 0000 0285 }
                 ; 0000 0286 break;
                 _0x42:
0002f5 c045      	RJMP _0x3E
                 ; 0000 0287 }
                 ; 0000 0288 case 2:                //  Pressed CA
                 _0x41:
0002f6 30e2      	CPI  R30,LOW(0x2)
0002f7 e0a0      	LDI  R26,HIGH(0x2)
0002f8 07fa      	CPC  R31,R26
0002f9 f439      	BRNE _0x43
                 ; 0000 0289 {
                 ; 0000 028A if (CA == 0)
0002fa 91e0 02c6 	LDS  R30,_CA
0002fc 30e0      	CPI  R30,0
0002fd f411      	BRNE _0x44
                 ; 0000 028B {
                 ; 0000 028C S3 = 3;
0002fe e0e3      	LDI  R30,LOW(3)
0002ff 2ece      	MOV  R12,R30
                 ; 0000 028D }
                 ; 0000 028E break;
                 _0x44:
000300 c03a      	RJMP _0x3E
                 ; 0000 028F }
                 ; 0000 0290 case 3:                // Released CA
                 _0x43:
000301 30e3      	CPI  R30,LOW(0x3)
000302 e0a0      	LDI  R26,HIGH(0x3)
000303 07fa      	CPC  R31,R26
000304 f449      	BRNE _0x45
                 ; 0000 0291 {
                 ; 0000 0292 if (CA)
000305 91e0 02c6 	LDS  R30,_CA
000307 30e0      	CPI  R30,0
000308 f021      	BREQ _0x46
                 ; 0000 0293 {
                 ; 0000 0294 S3 = 4;
000309 e0e4      	LDI  R30,LOW(4)
00030a 2ece      	MOV  R12,R30
                 ; 0000 0295 Q1 = 2;
00030b e0e2      	LDI  R30,LOW(2)
00030c 2e9e      	MOV  R9,R30
                 ; 0000 0296 }
                 ; 0000 0297 break;
                 _0x46:
00030d c02d      	RJMP _0x3E
                 ; 0000 0298 }
                 ; 0000 0299 case 4:
                 _0x45:
00030e 30e4      	CPI  R30,LOW(0x4)
00030f e0a0      	LDI  R26,HIGH(0x4)
000310 07fa      	CPC  R31,R26
000311 f439      	BRNE _0x47
                 ; 0000 029A {
                 ; 0000 029B if (CA == 0)
000312 91e0 02c6 	LDS  R30,_CA
000314 30e0      	CPI  R30,0
000315 f411      	BRNE _0x48
                 ; 0000 029C {
                 ; 0000 029D S3 = 5;
000316 e0e5      	LDI  R30,LOW(5)
000317 2ece      	MOV  R12,R30
                 ; 0000 029E }
                 ; 0000 029F break;
                 _0x48:
000318 c022      	RJMP _0x3E
                 ; 0000 02A0 }
                 ; 0000 02A1 case 5:
                 _0x47:
000319 30e5      	CPI  R30,LOW(0x5)
00031a e0a0      	LDI  R26,HIGH(0x5)
00031b 07fa      	CPC  R31,R26
00031c f449      	BRNE _0x49
                 ; 0000 02A2 {
                 ; 0000 02A3 if (CA)
00031d 91e0 02c6 	LDS  R30,_CA
00031f 30e0      	CPI  R30,0
000320 f021      	BREQ _0x4A
                 ; 0000 02A4 {
                 ; 0000 02A5 S3 = 6;
000321 e0e6      	LDI  R30,LOW(6)
000322 2ece      	MOV  R12,R30
                 ; 0000 02A6 Q1 = 3;
000323 e0e3      	LDI  R30,LOW(3)
000324 2e9e      	MOV  R9,R30
                 ; 0000 02A7 }
                 ; 0000 02A8 break;
                 _0x4A:
000325 c015      	RJMP _0x3E
                 ; 0000 02A9 }
                 ; 0000 02AA case 6:
                 _0x49:
000326 30e6      	CPI  R30,LOW(0x6)
000327 e0a0      	LDI  R26,HIGH(0x6)
000328 07fa      	CPC  R31,R26
000329 f439      	BRNE _0x4B
                 ; 0000 02AB {
                 ; 0000 02AC if (CA == 0)
00032a 91e0 02c6 	LDS  R30,_CA
00032c 30e0      	CPI  R30,0
00032d f411      	BRNE _0x4C
                 ; 0000 02AD {
                 ; 0000 02AE S3 = 7;
00032e e0e7      	LDI  R30,LOW(7)
00032f 2ece      	MOV  R12,R30
                 ; 0000 02AF }
                 ; 0000 02B0 break;
                 _0x4C:
000330 c00a      	RJMP _0x3E
                 ; 0000 02B1 }
                 ; 0000 02B2 case 7:
                 _0x4B:
000331 30e7      	CPI  R30,LOW(0x7)
000332 e0a0      	LDI  R26,HIGH(0x7)
000333 07fa      	CPC  R31,R26
000334 f431      	BRNE _0x3E
                 ; 0000 02B3 {
                 ; 0000 02B4 if (CA)
000335 91e0 02c6 	LDS  R30,_CA
000337 30e0      	CPI  R30,0
000338 f011      	BREQ _0x4E
                 ; 0000 02B5 {
                 ; 0000 02B6 S3 = 0;
000339 24cc      	CLR  R12
                 ; 0000 02B7 Q1 = 0;
00033a 2499      	CLR  R9
                 ; 0000 02B8 }
                 ; 0000 02B9 break;
                 _0x4E:
                 ; 0000 02BA }
                 ; 0000 02BB }
                 _0x3E:
                 ; 0000 02BC 
                 ; 0000 02BD out = CLC_RANGE_OUTPUT[Q1] | (CLC_RANGE_OUTPUT[Q] << 2);
00033b 2de9      	MOV  R30,R9
00033c e0f0      	LDI  R31,0
00033d 53e2      	SUBI R30,LOW(-_CLC_RANGE_OUTPUT)
00033e 4ffd      	SBCI R31,HIGH(-_CLC_RANGE_OUTPUT)
00033f 81a0      	LD   R26,Z
000340 2dea      	MOV  R30,R10
000341 e0f0      	LDI  R31,0
000342 53e2      	SUBI R30,LOW(-_CLC_RANGE_OUTPUT)
000343 4ffd      	SBCI R31,HIGH(-_CLC_RANGE_OUTPUT)
000344 81e0      	LD   R30,Z
000345 0fee      	LSL  R30
000346 0fee      	LSL  R30
000347 2bea      	OR   R30,R26
000348 2f1e      	MOV  R17,R30
                 ; 0000 02BE 
                 ; 0000 02BF // Delete PB3-PB0
                 ; 0000 02C0 PORTB &= 0xf0;
000349 b1e5      	IN   R30,0x5
00034a 7fe0      	ANDI R30,LOW(0xF0)
                 _0x2000001:
00034b b9e5      	OUT  0x5,R30
                 ; 0000 02C1 
                 ; 0000 02C2 // Display out on PB3-PB0
                 ; 0000 02C3 PORTB |= out;
00034c b1e5      	IN   R30,0x5
00034d 2be1      	OR   R30,R17
00034e b9e5      	OUT  0x5,R30
                 ; 0000 02C4 }
                 _0x2000002:
00034f 9119      	LD   R17,Y+
000350 9508      	RET
                 ; .FEND
                 
                 	.DSEG
                 _A0:
000200           	.BYTE 0x30
                 _A1:
000230           	.BYTE 0x30
                 _A2:
000260           	.BYTE 0x30
                 _A3:
000290           	.BYTE 0x10
                 _Tout:
0002a0           	.BYTE 0x4
                 _TABA:
0002a4           	.BYTE 0x8
                 _Z:
0002ac           	.BYTE 0x4
                 _H:
0002b0           	.BYTE 0x4
                 _M:
0002b4           	.BYTE 0x4
                 _S:
0002b8           	.BYTE 0x4
                 _CONSUM:
0002bc           	.BYTE 0x8
                 _C2:
0002c4           	.BYTE 0x1
                 _C1:
0002c5           	.BYTE 0x1
                 _CA:
0002c6           	.BYTE 0x1
                 _PowerLevel:
0002c7           	.BYTE 0x2
                 _CLC_LEVEL:
0002c9           	.BYTE 0x5
                 _CLC_RANGE_OUTPUT:
0002ce           	.BYTE 0x4
                 _cntP:
0002d2           	.BYTE 0x1
                 _cntMockPulse:
0002d3           	.BYTE 0x1
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x0:
000351 ebac      	LDI  R26,LOW(_CONSUM)
000352 e0b2      	LDI  R27,HIGH(_CONSUM)
000353 e0f0      	LDI  R31,0
000354 0fee      	LSL  R30
000355 1fff      	ROL  R31
000356 0fae      	ADD  R26,R30
000357 1fbf      	ADC  R27,R31
000358 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x1:
                +
000359 2bea     +OR R30 , R26
00035a 2bfb     +OR R31 , R27
00035b 2b68     +OR R22 , R24
00035c 2b79     +OR R23 , R25
                 	__ORD12
00035d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x2:
00035e 01fa      	MOVW R30,R20
00035f 01d9      	MOVW R26,R18
000360 d046      	RCALL __LSLW2
000361 0fae      	ADD  R26,R30
000362 1fbf      	ADC  R27,R31
                +
000363 91ed     +LD R30 , X +
000364 91fd     +LD R31 , X +
000365 916d     +LD R22 , X +
000366 917d     +LD R23 , X +
                 	__GETD1P_INC
000367 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x3:
000368 91e0 02c7 	LDS  R30,_PowerLevel
00036a 91f0 02c8 	LDS  R31,_PowerLevel+1
00036c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x4:
00036d dffa      	RCALL SUBOPT_0x3
                +
00036e 2f6f     +MOV R22 , R31
00036f 0f66     +ADD R22 , R22
000370 0b66     +SBC R22 , R22
000371 2f76     +MOV R23 , R22
                 	__CWD1
000372 d08a      	RCALL __CDF1
000373 01df      	MOVW R26,R30
000374 01cb      	MOVW R24,R22
000375 9508      	RET
                 
                 ;RUNTIME LIBRARY
                 
                 	.CSEG
                 __SAVELOCR6:
000376 935a      	ST   -Y,R21
                 __SAVELOCR5:
000377 934a      	ST   -Y,R20
                 __SAVELOCR4:
000378 933a      	ST   -Y,R19
                 __SAVELOCR3:
000379 932a      	ST   -Y,R18
                 __SAVELOCR2:
00037a 931a      	ST   -Y,R17
00037b 930a      	ST   -Y,R16
00037c 9508      	RET
                 
                 __LOADLOCR6:
00037d 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
00037e 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
00037f 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
000380 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
000381 8119      	LDD  R17,Y+1
000382 8108      	LD   R16,Y
000383 9508      	RET
                 
                 __ANEGW1:
000384 95f1      	NEG  R31
000385 95e1      	NEG  R30
000386 40f0      	SBCI R31,0
000387 9508      	RET
                 
                 __ANEGD1:
000388 95f0      	COM  R31
000389 9560      	COM  R22
00038a 9570      	COM  R23
00038b 95e1      	NEG  R30
00038c 4fff      	SBCI R31,-1
00038d 4f6f      	SBCI R22,-1
00038e 4f7f      	SBCI R23,-1
00038f 9508      	RET
                 
                 __LSLD12:
000390 23ee      	TST  R30
000391 2e0e      	MOV  R0,R30
000392 e0e8      	LDI  R30,8
000393 2e1e      	MOV  R1,R30
000394 01fd      	MOVW R30,R26
000395 01bc      	MOVW R22,R24
000396 f079      	BREQ __LSLD12R
                 __LSLD12S8:
000397 1401      	CP   R0,R1
000398 f038      	BRLO __LSLD12L
000399 2f76      	MOV  R23,R22
00039a 2f6f      	MOV  R22,R31
00039b 2ffe      	MOV  R31,R30
00039c e0e0      	LDI  R30,0
00039d 1801      	SUB  R0,R1
00039e f7c1      	BRNE __LSLD12S8
00039f 9508      	RET
                 __LSLD12L:
0003a0 0fee      	LSL  R30
0003a1 1fff      	ROL  R31
0003a2 1f66      	ROL  R22
0003a3 1f77      	ROL  R23
0003a4 940a      	DEC  R0
0003a5 f7d1      	BRNE __LSLD12L
                 __LSLD12R:
0003a6 9508      	RET
                 
                 __LSLW2:
0003a7 0fee      	LSL  R30
0003a8 1fff      	ROL  R31
0003a9 0fee      	LSL  R30
0003aa 1fff      	ROL  R31
0003ab 9508      	RET
                 
                 __ASRW4:
0003ac 95f5      	ASR  R31
0003ad 95e7      	ROR  R30
                 __ASRW3:
0003ae 95f5      	ASR  R31
0003af 95e7      	ROR  R30
                 __ASRW2:
0003b0 95f5      	ASR  R31
0003b1 95e7      	ROR  R30
0003b2 95f5      	ASR  R31
0003b3 95e7      	ROR  R30
0003b4 9508      	RET
                 
                 __DIVW21U:
0003b5 2400      	CLR  R0
0003b6 2411      	CLR  R1
0003b7 e190      	LDI  R25,16
                 __DIVW21U1:
0003b8 0faa      	LSL  R26
0003b9 1fbb      	ROL  R27
0003ba 1c00      	ROL  R0
0003bb 1c11      	ROL  R1
0003bc 1a0e      	SUB  R0,R30
0003bd 0a1f      	SBC  R1,R31
0003be f418      	BRCC __DIVW21U2
0003bf 0e0e      	ADD  R0,R30
0003c0 1e1f      	ADC  R1,R31
0003c1 c001      	RJMP __DIVW21U3
                 __DIVW21U2:
0003c2 60a1      	SBR  R26,1
                 __DIVW21U3:
0003c3 959a      	DEC  R25
0003c4 f799      	BRNE __DIVW21U1
0003c5 01fd      	MOVW R30,R26
0003c6 01d0      	MOVW R26,R0
0003c7 9508      	RET
                 
                 __DIVW21:
0003c8 d012      	RCALL __CHKSIGNW
0003c9 dfeb      	RCALL __DIVW21U
0003ca f40e      	BRTC __DIVW211
0003cb dfb8      	RCALL __ANEGW1
                 __DIVW211:
0003cc 9508      	RET
                 
                 __MODW21:
0003cd 94e8      	CLT
0003ce ffb7      	SBRS R27,7
0003cf c004      	RJMP __MODW211
0003d0 95b1      	NEG  R27
0003d1 95a1      	NEG  R26
0003d2 40b0      	SBCI R27,0
0003d3 9468      	SET
                 __MODW211:
0003d4 fdf7      	SBRC R31,7
0003d5 dfae      	RCALL __ANEGW1
0003d6 dfde      	RCALL __DIVW21U
0003d7 01fd      	MOVW R30,R26
0003d8 f40e      	BRTC __MODW212
0003d9 dfaa      	RCALL __ANEGW1
                 __MODW212:
0003da 9508      	RET
                 
                 __CHKSIGNW:
0003db 94e8      	CLT
0003dc fff7      	SBRS R31,7
0003dd c002      	RJMP __CHKSW1
0003de dfa5      	RCALL __ANEGW1
0003df 9468      	SET
                 __CHKSW1:
0003e0 ffb7      	SBRS R27,7
0003e1 c006      	RJMP __CHKSW2
0003e2 95b1      	NEG  R27
0003e3 95a1      	NEG  R26
0003e4 40b0      	SBCI R27,0
0003e5 f800      	BLD  R0,0
0003e6 9403      	INC  R0
0003e7 fa00      	BST  R0,0
                 __CHKSW2:
0003e8 9508      	RET
                 
                 __REPACK:
0003e9 e850      	LDI  R21,0x80
0003ea 2757      	EOR  R21,R23
0003eb f411      	BRNE __REPACK0
0003ec 935f      	PUSH R21
0003ed c02b      	RJMP __ZERORES
                 __REPACK0:
0003ee 3f5f      	CPI  R21,0xFF
0003ef f031      	BREQ __REPACK1
0003f0 0f66      	LSL  R22
0003f1 0c00      	LSL  R0
0003f2 9557      	ROR  R21
0003f3 9567      	ROR  R22
0003f4 2f75      	MOV  R23,R21
0003f5 9508      	RET
                 __REPACK1:
0003f6 935f      	PUSH R21
0003f7 2000      	TST  R0
0003f8 f00a      	BRMI __REPACK2
0003f9 c02a      	RJMP __MAXRES
                 __REPACK2:
0003fa c023      	RJMP __MINRES
                 
                 __CDF1U:
0003fb 9468      	SET
0003fc c001      	RJMP __CDF1U0
                 __CDF1:
0003fd 94e8      	CLT
                 __CDF1U0:
0003fe 9730      	SBIW R30,0
0003ff 4060      	SBCI R22,0
000400 4070      	SBCI R23,0
000401 f0b1      	BREQ __CDF10
000402 2400      	CLR  R0
000403 f026      	BRTS __CDF11
000404 2377      	TST  R23
000405 f412      	BRPL __CDF11
000406 9400      	COM  R0
000407 df80      	RCALL __ANEGD1
                 __CDF11:
000408 2e17      	MOV  R1,R23
000409 e17e      	LDI  R23,30
00040a 2011      	TST  R1
                 __CDF12:
00040b f032      	BRMI __CDF13
00040c 957a      	DEC  R23
00040d 0fee      	LSL  R30
00040e 1fff      	ROL  R31
00040f 1f66      	ROL  R22
000410 1c11      	ROL  R1
000411 cff9      	RJMP __CDF12
                 __CDF13:
000412 2fef      	MOV  R30,R31
000413 2ff6      	MOV  R31,R22
000414 2d61      	MOV  R22,R1
000415 935f      	PUSH R21
000416 dfd2      	RCALL __REPACK
000417 915f      	POP  R21
                 __CDF10:
000418 9508      	RET
                 
                 __ZERORES:
000419 27ee      	CLR  R30
00041a 27ff      	CLR  R31
00041b 01bf      	MOVW R22,R30
00041c 915f      	POP  R21
00041d 9508      	RET
                 
                 __MINRES:
00041e efef      	SER  R30
00041f efff      	SER  R31
000420 e76f      	LDI  R22,0x7F
000421 ef7f      	SER  R23
000422 915f      	POP  R21
000423 9508      	RET
                 
                 __MAXRES:
000424 efef      	SER  R30
000425 efff      	SER  R31
000426 e76f      	LDI  R22,0x7F
000427 e77f      	LDI  R23,0x7F
000428 915f      	POP  R21
000429 9508      	RET
                 
                 __CMPF12:
00042a 2399      	TST  R25
00042b f09a      	BRMI __CMPF120
00042c 2377      	TST  R23
00042d f042      	BRMI __CMPF121
00042e 1797      	CP   R25,R23
00042f f048      	BRLO __CMPF122
000430 f429      	BRNE __CMPF121
000431 17ae      	CP   R26,R30
000432 07bf      	CPC  R27,R31
000433 0786      	CPC  R24,R22
000434 f020      	BRLO __CMPF122
000435 f031      	BREQ __CMPF123
                 __CMPF121:
000436 9498      	CLZ
000437 9488      	CLC
000438 9508      	RET
                 __CMPF122:
000439 9498      	CLZ
00043a 9408      	SEC
00043b 9508      	RET
                 __CMPF123:
00043c 9418      	SEZ
00043d 9488      	CLC
00043e 9508      	RET
                 __CMPF120:
00043f 2377      	TST  R23
000440 f7c2      	BRPL __CMPF122
000441 1797      	CP   R25,R23
000442 f398      	BRLO __CMPF121
000443 f7a9      	BRNE __CMPF122
000444 17ea      	CP   R30,R26
000445 07fb      	CPC  R31,R27
000446 0768      	CPC  R22,R24
000447 f388      	BRLO __CMPF122
000448 f399      	BREQ __CMPF123
000449 cfec      	RJMP __CMPF121
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega164A register use summary:
r0 :  24 r1 :  14 r2 :   0 r3 :   0 r4 :   1 r5 :   4 r6 :   0 r7 :   4 
r8 :   4 r9 :   7 r10:   6 r11:   0 r12:  10 r13:   2 r14:   2 r15:   2 
r16:   8 r17:  28 r18:   5 r19:   4 r20:   6 r21:  16 r22:  39 r23:  30 
r24:  21 r25:  16 r26:  84 r27:  34 r28:   4 r29:   1 r30: 287 r31:  90 
x  :  15 y  :  53 z  :  11 
Registers used: 31 out of 35 (88.6%)

ATmega164A instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   5 add   :   6 
adiw  :   5 and   :   0 andi  :   4 asr   :   4 bclr  :   0 bld   :   1 
brbc  :   0 brbs  :   0 brcc  :   1 brcs  :   0 break :   0 breq  :  12 
brge  :   1 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   5 
brlt  :   0 brmi  :   4 brne  :  36 brpl  :   2 brsh  :   2 brtc  :   2 
brts  :   1 brvc  :   0 brvs  :   0 bset  :   0 bst   :   1 call  :   0 
cbi   :   0 cbr   :   0 clc   :   2 clh   :   0 cli   :   1 cln   :   0 
clr   :  15 cls   :   0 clt   :   3 clv   :   0 clz   :   2 com   :   5 
cp    :   6 cpc   :  23 cpi   :  28 cpse  :   0 dec   :   4 des   :   0 
eor   :   1 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :   7 inc   :   1 jmp   :  32 ld    :  27 ldd   :  10 ldi   : 127 
lds   :  41 lpm   :   9 lsl   :  11 lsr   :   0 mov   :  60 movw  :  18 
mul   :   0 muls  :   0 mulsu :   0 neg   :   7 nop   :   0 or    :   7 
ori   :   0 out   :  30 pop   :   8 push  :   7 rcall :  51 ret   :  32 
reti  :   1 rjmp  :  35 rol   :  13 ror   :   6 sbc   :   2 sbci  :  13 
sbi   :   0 sbic  :   0 sbis  :   0 sbiw  :  11 sbr   :   1 sbrc  :   1 
sbrs  :   3 sec   :   1 seh   :   0 sei   :   1 sen   :   0 ser   :   5 
ses   :   0 set   :   3 sev   :   0 sez   :   1 sleep :   0 spm   :   0 
st    :  30 std   :   4 sts   :  40 sub   :   2 subi  :   7 swap  :   0 
tst   :   8 wdr   :   0 
Instructions used: 67 out of 116 (57.8%)

ATmega164A memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000894   1934    262   2196   16384  13.4%
[.dseg] 0x000100 0x0002d4      0    212    212    1024  20.7%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 19 warnings
