
AVRASM ver. 2.1.30  F:\AN 3 SEM 2\P2-ZOICAN\chestii alexutu\Electricity-Consumption-Meter\TestingProjects\ATmegaTests\MultiplexingTest\SourceCode\Debug\List\main.asm Fri Mar 31 12:36:52 2023

F:\AN 3 SEM 2\P2-ZOICAN\chestii alexutu\Electricity-Consumption-Meter\TestingProjects\ATmegaTests\MultiplexingTest\SourceCode\Debug\List\main.asm(1420): warning: Register r4 already defined by the .DEF directive
F:\AN 3 SEM 2\P2-ZOICAN\chestii alexutu\Electricity-Consumption-Meter\TestingProjects\ATmegaTests\MultiplexingTest\SourceCode\Debug\List\main.asm(1421): warning: Register r3 already defined by the .DEF directive
F:\AN 3 SEM 2\P2-ZOICAN\chestii alexutu\Electricity-Consumption-Meter\TestingProjects\ATmegaTests\MultiplexingTest\SourceCode\Debug\List\main.asm(1422): warning: Register r6 already defined by the .DEF directive
F:\AN 3 SEM 2\P2-ZOICAN\chestii alexutu\Electricity-Consumption-Meter\TestingProjects\ATmegaTests\MultiplexingTest\SourceCode\Debug\List\main.asm(1423): warning: Register r5 already defined by the .DEF directive
F:\AN 3 SEM 2\P2-ZOICAN\chestii alexutu\Electricity-Consumption-Meter\TestingProjects\ATmegaTests\MultiplexingTest\SourceCode\Debug\List\main.asm(1424): warning: Register r8 already defined by the .DEF directive
F:\AN 3 SEM 2\P2-ZOICAN\chestii alexutu\Electricity-Consumption-Meter\TestingProjects\ATmegaTests\MultiplexingTest\SourceCode\Debug\List\main.asm(1425): warning: Register r7 already defined by the .DEF directive
F:\AN 3 SEM 2\P2-ZOICAN\chestii alexutu\Electricity-Consumption-Meter\TestingProjects\ATmegaTests\MultiplexingTest\SourceCode\Debug\List\main.asm(1426): warning: Register r10 already defined by the .DEF directive
F:\AN 3 SEM 2\P2-ZOICAN\chestii alexutu\Electricity-Consumption-Meter\TestingProjects\ATmegaTests\MultiplexingTest\SourceCode\Debug\List\main.asm(1427): warning: Register r9 already defined by the .DEF directive
F:\AN 3 SEM 2\P2-ZOICAN\chestii alexutu\Electricity-Consumption-Meter\TestingProjects\ATmegaTests\MultiplexingTest\SourceCode\Debug\List\main.asm(1428): warning: Register r12 already defined by the .DEF directive
F:\AN 3 SEM 2\P2-ZOICAN\chestii alexutu\Electricity-Consumption-Meter\TestingProjects\ATmegaTests\MultiplexingTest\SourceCode\Debug\List\main.asm(1429): warning: Register r11 already defined by the .DEF directive
F:\AN 3 SEM 2\P2-ZOICAN\chestii alexutu\Electricity-Consumption-Meter\TestingProjects\ATmegaTests\MultiplexingTest\SourceCode\Debug\List\main.asm(1430): warning: Register r14 already defined by the .DEF directive
F:\AN 3 SEM 2\P2-ZOICAN\chestii alexutu\Electricity-Consumption-Meter\TestingProjects\ATmegaTests\MultiplexingTest\SourceCode\Debug\List\main.asm(1431): warning: Register r13 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.49a 
                 ;(C) Copyright 1998-2022 Pavel Haiduc, HP InfoTech S.R.L.
                 ;http://www.hpinfotech.ro
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega164A
                 ;Program type           : Application
                 ;Clock frequency        : 10.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 256 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Mode 2
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega164A
                 	#pragma AVRPART MEMORY PROG_FLASH 16384
                 	#pragma AVRPART MEMORY EEPROM 512
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 1024
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x100
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU EECR=0x1F
                 	.EQU EEDR=0x20
                 	.EQU EEARL=0x21
                 	.EQU EEARH=0x22
                 	.EQU SPSR=0x2D
                 	.EQU SPDR=0x2E
                 	.EQU SMCR=0x33
                 	.EQU MCUSR=0x34
                 	.EQU MCUCR=0x35
                 	.EQU WDTCSR=0x60
                 	.EQU UCSR0A=0xC0
                 	.EQU UDR0=0xC6
                 	.EQU SPMCSR=0x37
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 	.EQU GPIOR0=0x1E
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0100
                 	.EQU __SRAM_END=0x04FF
                 	.EQU __DSTACK_SIZE=0x0100
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.EQU __FLASH_PAGE_SIZE=0x40
                 	.EQU __EEPROM_PAGE_SIZE=0x04
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETW1P
                 	LD   R30,X+
                 	LD   R31,X
                 	SBIW R26,1
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD1P_INC
                 	LD   R30,X+
                 	LD   R31,X+
                 	LD   R22,X+
                 	LD   R23,X+
                 	.ENDM
                 
                 	.MACRO __GETD1P_DEC
                 	LD   R23,-X
                 	LD   R22,-X
                 	LD   R31,-X
                 	LD   R30,-X
                 	.ENDM
                 
                 	.MACRO __PUTDP1
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTDP1_DEC
                 	ST   -X,R23
                 	ST   -X,R22
                 	ST   -X,R31
                 	ST   -X,R30
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __CPD10
                 	SBIW R30,0
                 	SBCI R22,0
                 	SBCI R23,0
                 	.ENDM
                 
                 	.MACRO __CPD20
                 	SBIW R26,0
                 	SBCI R24,0
                 	SBCI R25,0
                 	.ENDM
                 
                 	.MACRO __ADDD12
                 	ADD  R30,R26
                 	ADC  R31,R27
                 	ADC  R22,R24
                 	ADC  R23,R25
                 	.ENDM
                 
                 	.MACRO __ADDD21
                 	ADD  R26,R30
                 	ADC  R27,R31
                 	ADC  R24,R22
                 	ADC  R25,R23
                 	.ENDM
                 
                 	.MACRO __SUBD12
                 	SUB  R30,R26
                 	SBC  R31,R27
                 	SBC  R22,R24
                 	SBC  R23,R25
                 	.ENDM
                 
                 	.MACRO __SUBD21
                 	SUB  R26,R30
                 	SBC  R27,R31
                 	SBC  R24,R22
                 	SBC  R25,R23
                 	.ENDM
                 
                 	.MACRO __ANDD12
                 	AND  R30,R26
                 	AND  R31,R27
                 	AND  R22,R24
                 	AND  R23,R25
                 	.ENDM
                 
                 	.MACRO __ORD12
                 	OR   R30,R26
                 	OR   R31,R27
                 	OR   R22,R24
                 	OR   R23,R25
                 	.ENDM
                 
                 	.MACRO __XORD12
                 	EOR  R30,R26
                 	EOR  R31,R27
                 	EOR  R22,R24
                 	EOR  R23,R25
                 	.ENDM
                 
                 	.MACRO __XORD21
                 	EOR  R26,R30
                 	EOR  R27,R31
                 	EOR  R24,R22
                 	EOR  R25,R23
                 	.ENDM
                 
                 	.MACRO __COMD1
                 	COM  R30
                 	COM  R31
                 	COM  R22
                 	COM  R23
                 	.ENDM
                 
                 	.MACRO __MULD2_2
                 	LSL  R26
                 	ROL  R27
                 	ROL  R24
                 	ROL  R25
                 	.ENDM
                 
                 	.MACRO __LSRD1
                 	LSR  R23
                 	ROR  R22
                 	ROR  R31
                 	ROR  R30
                 	.ENDM
                 
                 	.MACRO __LSLD1
                 	LSL  R30
                 	ROL  R31
                 	ROL  R22
                 	ROL  R23
                 	.ENDM
                 
                 	.MACRO __ASRB4
                 	ASR  R30
                 	ASR  R30
                 	ASR  R30
                 	ASR  R30
                 	.ENDM
                 
                 	.MACRO __ASRW8
                 	MOV  R30,R31
                 	CLR  R31
                 	SBRC R30,7
                 	SER  R31
                 	.ENDM
                 
                 	.MACRO __LSRD16
                 	MOV  R30,R22
                 	MOV  R31,R23
                 	LDI  R22,0
                 	LDI  R23,0
                 	.ENDM
                 
                 	.MACRO __LSLD16
                 	MOV  R22,R30
                 	MOV  R23,R31
                 	LDI  R30,0
                 	LDI  R31,0
                 	.ENDM
                 
                 	.MACRO __CWD1
                 	MOV  R22,R31
                 	ADD  R22,R22
                 	SBC  R22,R22
                 	MOV  R23,R22
                 	.ENDM
                 
                 	.MACRO __CWD2
                 	MOV  R24,R27
                 	ADD  R24,R24
                 	SBC  R24,R24
                 	MOV  R25,R24
                 	.ENDM
                 
                 	.MACRO __SETMSD1
                 	SER  R31
                 	SER  R22
                 	SER  R23
                 	.ENDM
                 
                 	.MACRO __ADDW1R15
                 	CLR  R0
                 	ADD  R30,R15
                 	ADC  R31,R0
                 	.ENDM
                 
                 	.MACRO __ADDW2R15
                 	CLR  R0
                 	ADD  R26,R15
                 	ADC  R27,R0
                 	.ENDM
                 
                 	.MACRO __EQB12
                 	CP   R30,R26
                 	LDI  R30,1
                 	BREQ PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __NEB12
                 	CP   R30,R26
                 	LDI  R30,1
                 	BRNE PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __LEB12
                 	CP   R30,R26
                 	LDI  R30,1
                 	BRGE PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __GEB12
                 	CP   R26,R30
                 	LDI  R30,1
                 	BRGE PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __LTB12
                 	CP   R26,R30
                 	LDI  R30,1
                 	BRLT PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __GTB12
                 	CP   R30,R26
                 	LDI  R30,1
                 	BRLT PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __LEB12U
                 	CP   R30,R26
                 	LDI  R30,1
                 	BRSH PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __GEB12U
                 	CP   R26,R30
                 	LDI  R30,1
                 	BRSH PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __LTB12U
                 	CP   R26,R30
                 	LDI  R30,1
                 	BRLO PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __GTB12U
                 	CP   R30,R26
                 	LDI  R30,1
                 	BRLO PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __CPW01
                 	CLR  R0
                 	CP   R0,R30
                 	CPC  R0,R31
                 	.ENDM
                 
                 	.MACRO __CPW02
                 	CLR  R0
                 	CP   R0,R26
                 	CPC  R0,R27
                 	.ENDM
                 
                 	.MACRO __CPD12
                 	CP   R30,R26
                 	CPC  R31,R27
                 	CPC  R22,R24
                 	CPC  R23,R25
                 	.ENDM
                 
                 	.MACRO __CPD21
                 	CP   R26,R30
                 	CPC  R27,R31
                 	CPC  R24,R22
                 	CPC  R25,R23
                 	.ENDM
                 
                 	.MACRO __BSTB1
                 	CLT
                 	TST  R30
                 	BREQ PC+2
                 	SET
                 	.ENDM
                 
                 	.MACRO __LNEGB1
                 	TST  R30
                 	LDI  R30,1
                 	BREQ PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __LNEGW1
                 	OR   R30,R31
                 	LDI  R30,1
                 	BREQ PC+2
                 	LDI  R30,0
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2M
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	CALL __GETW1Z
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	CALL __GETD1Z
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __GETW2X
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __GETD2X
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _S1=R4
                 	.DEF _cnt_time=R3
                 	.DEF _T_SEC=R6
                 	.DEF _S2=R5
                 	.DEF _S_PULSE=R8
                 	.DEF _MODE=R7
                 	.DEF _PULSE=R10
                 	.DEF _Q=R9
                 	.DEF _Q1=R12
                 	.DEF _S3=R11
                 	.DEF _TOTAL_CONS=R14
                 	.DEF _C4=R13
                 
                 ;GPIOR0 INITIALIZATION VALUE
                 	.EQU __GPIOR0_INIT=0x00
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 00be 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 00ed 	JMP  _timer0_ovf_isr
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
00002a 940c 0000 	JMP  0x00
00002c 940c 0000 	JMP  0x00
00002e 940c 0000 	JMP  0x00
000030 940c 0000 	JMP  0x00
000032 940c 0000 	JMP  0x00
000034 940c 0000 	JMP  0x00
000036 940c 0000 	JMP  0x00
000038 940c 0000 	JMP  0x00
00003a 940c 0000 	JMP  0x00
00003c 940c 0000 	JMP  0x00
                 
                 _DIGITS:
00003e f9c0
00003f b0a4
000040 9299
000041 f882      	.DB  0xC0,0xF9,0xA4,0xB0,0x99,0x92,0x82,0xF8
000042 9080      	.DB  0x80,0x90
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
000043 0000
000044 0000      	.DB  0x0,0x0,0x0,0x0
000045 0000
000046 0000      	.DB  0x0,0x0,0x0,0x0
000047 0000
000048 0000      	.DB  0x0,0x0,0x0,0x0
                 
                 _0x3:
000049 0000
00004a 0008
00004b 0001
00004c 0000      	.DB  0x0,0x0,0x8,0x0,0x1,0x0,0x0,0x0
00004d 0000
00004e 0008
00004f 0001
000050 0000      	.DB  0x0,0x0,0x8,0x0,0x1,0x0,0x0,0x0
000051 0000
000052 0008
000053 0001
000054 0000      	.DB  0x0,0x0,0x8,0x0,0x1,0x0,0x0,0x0
000055 0000
000056 0008
000057 0001
000058 0000      	.DB  0x0,0x0,0x8,0x0,0x1,0x0,0x0,0x0
000059 0000
00005a 0008
00005b 0001
00005c 0000      	.DB  0x0,0x0,0x8,0x0,0x1,0x0,0x0,0x0
00005d 0000
00005e 1000      	.DB  0x0,0x0,0x0,0x10
                 _0x4:
00005f 0000
000060 0010
000061 0002
000062 0000      	.DB  0x0,0x0,0x10,0x0,0x2,0x0,0x0,0x0
000063 0000
000064 0010
000065 0002
000066 0000      	.DB  0x0,0x0,0x10,0x0,0x2,0x0,0x0,0x0
000067 0000
000068 0010
000069 0002
00006a 0000      	.DB  0x0,0x0,0x10,0x0,0x2,0x0,0x0,0x0
00006b 0000
00006c 0010
00006d 0002
00006e 0000      	.DB  0x0,0x0,0x10,0x0,0x2,0x0,0x0,0x0
00006f 0000
000070 0010
000071 0002
000072 0000      	.DB  0x0,0x0,0x10,0x0,0x2,0x0,0x0,0x0
000073 0000
000074 1000
F:\AN 3 SEM 2\P2-ZOICAN\chestii alexutu\Electricity-Consumption-Meter\TestingProjects\ATmegaTests\MultiplexingTest\SourceCode\Debug\List\main.asm(1498): warning: .cseg .db misalignment - padding zero byte
000075 0001      	.DB  0x0,0x0,0x0,0x10,0x1
                 _0x5:
000076 0000
000077 0100
000078 0000
000079 0000      	.DB  0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0
00007a 0000
00007b 0200
00007c 0000
00007d 0000      	.DB  0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x0
00007e 0000
00007f 0300
000080 0000
000081 0000      	.DB  0x0,0x0,0x0,0x3,0x0,0x0,0x0,0x0
000082 0000
000083 0400
000084 0000
000085 0000      	.DB  0x0,0x0,0x0,0x4,0x0,0x0,0x0,0x0
000086 0000
000087 0500
000088 0003
000089 0000      	.DB  0x0,0x0,0x0,0x5,0x3,0x0,0x0,0x0
00008a 0000
00008b 1000
F:\AN 3 SEM 2\P2-ZOICAN\chestii alexutu\Electricity-Consumption-Meter\TestingProjects\ATmegaTests\MultiplexingTest\SourceCode\Debug\List\main.asm(1505): warning: .cseg .db misalignment - padding zero byte
00008c 0002      	.DB  0x0,0x0,0x0,0x10,0x2
                 _0x6:
00008d 0000
00008e 0000
00008f 0000
000090 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000091 0000
000092 1000
F:\AN 3 SEM 2\P2-ZOICAN\chestii alexutu\Electricity-Consumption-Meter\TestingProjects\ATmegaTests\MultiplexingTest\SourceCode\Debug\List\main.asm(1508): warning: .cseg .db misalignment - padding zero byte
000093 0003      	.DB  0x0,0x0,0x0,0x10,0x3
                 _0x7:
000094 0100
000095 0302      	.DB  0x0,0x1,0x2,0x3
                 _0x8:
000096 0200
000097 0230
000098 0260
000099 0290      	.DB  LOW(_A0),HIGH(_A0),LOW(_A1),HIGH(_A1),LOW(_A2),HIGH(_A2),LOW(_A3),HIGH(_A3)
                 _0x9:
F:\AN 3 SEM 2\P2-ZOICAN\chestii alexutu\Electricity-Consumption-Meter\TestingProjects\ATmegaTests\MultiplexingTest\SourceCode\Debug\List\main.asm(1514): warning: .cseg .db misalignment - padding zero byte
00009a 0015      	.DB  0x15
                 _0xA:
00009b 2000
00009c e060      	.DB  0x0,0x20,0x60,0xE0
                 _0xB:
00009d 0201
F:\AN 3 SEM 2\P2-ZOICAN\chestii alexutu\Electricity-Consumption-Meter\TestingProjects\ATmegaTests\MultiplexingTest\SourceCode\Debug\List\main.asm(1518): warning: .cseg .db misalignment - padding zero byte
00009e 0003      	.DB  0x1,0x2,0x3
                 
                 __GLOBAL_INI_TBL:
00009f 000c      	.DW  0x0C
0000a0 0003      	.DW  0x03
0000a1 0086      	.DW  __REG_VARS*2
                 
0000a2 002c      	.DW  0x2C
0000a3 0200      	.DW  _A0
0000a4 0092      	.DW  _0x3*2
                 
0000a5 002d      	.DW  0x2D
0000a6 0230      	.DW  _A1
0000a7 00be      	.DW  _0x4*2
                 
0000a8 002d      	.DW  0x2D
0000a9 0260      	.DW  _A2
0000aa 00ec      	.DW  _0x5*2
                 
0000ab 000d      	.DW  0x0D
0000ac 0290      	.DW  _A3
0000ad 011a      	.DW  _0x6*2
                 
0000ae 0004      	.DW  0x04
0000af 02a0      	.DW  _Tout
0000b0 0128      	.DW  _0x7*2
                 
0000b1 0008      	.DW  0x08
0000b2 02a4      	.DW  _TABA
0000b3 012c      	.DW  _0x8*2
                 
0000b4 0001      	.DW  0x01
0000b5 02bc      	.DW  _CONSUM
0000b6 0134      	.DW  _0x9*2
                 
0000b7 0004      	.DW  0x04
0000b8 02cc      	.DW  _CLC_LEVEL
0000b9 0136      	.DW  _0xA*2
                 
0000ba 0003      	.DW  0x03
0000bb 02d0      	.DW  _CLC_RANGE_OUTPUT
0000bc 013a      	.DW  _0xB*2
                 
                 _0xFFFFFFFF:
0000bd 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
0000be 94f8      	CLI
0000bf 27ee      	CLR  R30
0000c0 bbef      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
0000c1 e0f1      	LDI  R31,1
0000c2 bff5      	OUT  MCUCR,R31
0000c3 bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
0000c4 e08d      	LDI  R24,(14-2)+1
0000c5 e0a2      	LDI  R26,2
0000c6 27bb      	CLR  R27
                 __CLEAR_REG:
0000c7 93ed      	ST   X+,R30
0000c8 958a      	DEC  R24
0000c9 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
0000ca e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
0000cb e094      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
0000cc e0a0      	LDI  R26,LOW(__SRAM_START)
0000cd e0b1      	LDI  R27,HIGH(__SRAM_START)
                 __CLEAR_SRAM:
0000ce 93ed      	ST   X+,R30
0000cf 9701      	SBIW R24,1
0000d0 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
0000d1 e3ee      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
0000d2 e0f1      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
0000d3 9185      	LPM  R24,Z+
0000d4 9195      	LPM  R25,Z+
0000d5 9700      	SBIW R24,0
0000d6 f061      	BREQ __GLOBAL_INI_END
0000d7 91a5      	LPM  R26,Z+
0000d8 91b5      	LPM  R27,Z+
0000d9 9005      	LPM  R0,Z+
0000da 9015      	LPM  R1,Z+
0000db 01bf      	MOVW R22,R30
0000dc 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
0000dd 9005      	LPM  R0,Z+
0000de 920d      	ST   X+,R0
0000df 9701      	SBIW R24,1
0000e0 f7e1      	BRNE __GLOBAL_INI_LOOP
0000e1 01fb      	MOVW R30,R22
0000e2 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;GPIOR0 INITIALIZATION
0000e3 e0e0      	LDI  R30,__GPIOR0_INIT
0000e4 bbee      	OUT  GPIOR0,R30
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
0000e5 efef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
0000e6 bfed      	OUT  SPL,R30
0000e7 e0e4      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
0000e8 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
0000e9 e0c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
0000ea e0d2      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
0000eb 940c 0113 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0x00
                 
                 	.DSEG
                 	.ORG 0x200
                 
                 	.CSEG
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x01
                 	.EQU __sm_mask=0x0E
                 	.EQU __sm_powerdown=0x04
                 	.EQU __sm_powersave=0x06
                 	.EQU __sm_standby=0x0C
                 	.EQU __sm_ext_standby=0x0E
                 	.EQU __sm_adc_noise_red=0x02
                 	.SET power_ctrl_reg=smcr
                 	#endif
                 
                 	.DSEG
                 ;void Init();
                 ;void UpdateConsumption();
                 ;void DisplayConsumption();
                 ;void DisplayDigit(char currentDisplay, char digit);
                 ;void UpdateTime();
                 ;void CLS();
                 ;void DisplayInfo();
                 ;void DisplayPowerLevel();
                 ;void DisplayConsumptionDisplayMode();
                 ;void MockPULSE();
                 ;interrupt [19] void timer0_ovf_isr(void)
                 ; 0000 008E {
                 
                 	.CSEG
                 _timer0_ovf_isr:
                 ; .FSTART _timer0_ovf_isr
0000ed 920a      	ST   -Y,R0
0000ee 921a      	ST   -Y,R1
0000ef 92fa      	ST   -Y,R15
0000f0 936a      	ST   -Y,R22
0000f1 937a      	ST   -Y,R23
0000f2 938a      	ST   -Y,R24
0000f3 939a      	ST   -Y,R25
0000f4 93aa      	ST   -Y,R26
0000f5 93ba      	ST   -Y,R27
0000f6 93ea      	ST   -Y,R30
0000f7 93fa      	ST   -Y,R31
0000f8 b7ef      	IN   R30,SREG
0000f9 93ea      	ST   -Y,R30
                 ; 0000 008F // Reinitialize Timer 0 value
                 ; 0000 0090 TCNT0=0x3C;
0000fa e3ec      	LDI  R30,LOW(60)
0000fb bde6      	OUT  0x26,R30
                 ; 0000 0091 
                 ; 0000 0092 // Read CA
                 ; 0000 0093 CA = (PIND & 0x80) >> 7;
0000fc b1e9      	IN   R30,0x9
0000fd 78e0      	ANDI R30,LOW(0x80)
0000fe e0f0      	LDI  R31,0
0000ff d283      	RCALL __ASRW3
000100 d280      	RCALL __ASRW4
000101 93e0 02c9 	STS  _CA,R30
                 ; 0000 0094 
                 ; 0000 0095 // DisplayInfo
                 ; 0000 0096 DisplayInfo();
000103 d18d      	RCALL _DisplayInfo
                 ; 0000 0097 
                 ; 0000 0098 // Update mock pulse
                 ; 0000 0099 // MockPULSE();
                 ; 0000 009A 
                 ; 0000 009B // Check for pulses coming from ADSP
                 ; 0000 009C UpdateConsumption();
000104 d075      	RCALL _UpdateConsumption
                 ; 0000 009D }
000105 91e9      	LD   R30,Y+
000106 bfef      	OUT  SREG,R30
000107 91f9      	LD   R31,Y+
000108 91e9      	LD   R30,Y+
000109 91b9      	LD   R27,Y+
00010a 91a9      	LD   R26,Y+
00010b 9199      	LD   R25,Y+
00010c 9189      	LD   R24,Y+
00010d 9179      	LD   R23,Y+
00010e 9169      	LD   R22,Y+
00010f 90f9      	LD   R15,Y+
000110 9019      	LD   R1,Y+
000111 9009      	LD   R0,Y+
000112 9518      	RETI
                 ; .FEND
                 ;void main(void)
                 ; 0000 00A1 {
                 _main:
                 ; .FSTART _main
                 ; 0000 00A2 // Declare your local variables here
                 ; 0000 00A3 
                 ; 0000 00A4 // Crystal Oscillator division factor: 1
                 ; 0000 00A5 #pragma optsize-
                 ; 0000 00A6 CLKPR=(1<<CLKPCE);
000113 e8e0      	LDI  R30,LOW(128)
000114 93e0 0061 	STS  97,R30
                 ; 0000 00A7 CLKPR=(0<<CLKPCE) | (0<<CLKPS3) | (0<<CLKPS2) | (0<<CLKPS1) | (0<<CLKPS0);
000116 e0e0      	LDI  R30,LOW(0)
000117 93e0 0061 	STS  97,R30
                 ; 0000 00A8 #ifdef _OPTIMIZE_SIZE_
                 ; 0000 00A9 #pragma optsize+
                 ; 0000 00AA #endif
                 ; 0000 00AB 
                 ; 0000 00AC // Input/Output Ports initialization
                 ; 0000 00AD // Port A initialization
                 ; 0000 00AE // Function: Bit7=Out Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 00AF DDRA=(1<<DDA7) | (0<<DDA6) | (0<<DDA5) | (0<<DDA4) | (0<<DDA3) | (0<<DDA2) | (0<<DDA1) | (0<<DDA0);
000119 e8e0      	LDI  R30,LOW(128)
00011a b9e1      	OUT  0x1,R30
                 ; 0000 00B0 // State: Bit7=1 Bit6=P Bit5=P Bit4=P Bit3=P Bit2=P Bit1=P Bit0=P
                 ; 0000 00B1 PORTA=(1<<PORTA7) | (1<<PORTA6) | (1<<PORTA5) | (1<<PORTA4) | (1<<PORTA3) | (1<<PORTA2) | (1<<PORTA1) | (1<<PORTA0);
00011b efef      	LDI  R30,LOW(255)
00011c b9e2      	OUT  0x2,R30
                 ; 0000 00B2 
                 ; 0000 00B3 // Port B initialization
                 ; 0000 00B4 // Function: Bit7=Out Bit6=Out Bit5=Out Bit4=Out Bit3=Out Bit2=Out Bit1=Out Bit0=Out
                 ; 0000 00B5 DDRB=(1<<DDB7) | (1<<DDB6) | (1<<DDB5) | (1<<DDB4) | (1<<DDB3) | (1<<DDB2) | (1<<DDB1) | (1<<DDB0);
00011d b9e4      	OUT  0x4,R30
                 ; 0000 00B6 // State: Bit7=1 Bit6=1 Bit5=1 Bit4=1 Bit3=1 Bit2=1 Bit1=1 Bit0=1
                 ; 0000 00B7 PORTB=(1<<PORTB7) | (1<<PORTB6) | (1<<PORTB5) | (1<<PORTB4) | (1<<PORTB3) | (1<<PORTB2) | (1<<PORTB1) | (1<<PORTB0);
00011e b9e5      	OUT  0x5,R30
                 ; 0000 00B8 
                 ; 0000 00B9 // Port C initialization
                 ; 0000 00BA // Function: Bit7=Out Bit6=Out Bit5=Out Bit4=Out Bit3=Out Bit2=Out Bit1=Out Bit0=Out
                 ; 0000 00BB DDRC=(1<<DDC7) | (1<<DDC6) | (1<<DDC5) | (1<<DDC4) | (1<<DDC3) | (1<<DDC2) | (1<<DDC1) | (1<<DDC0);
00011f b9e7      	OUT  0x7,R30
                 ; 0000 00BC // State: Bit7=1 Bit6=1 Bit5=1 Bit4=1 Bit3=1 Bit2=1 Bit1=1 Bit0=1
                 ; 0000 00BD PORTC=(1<<PORTC7) | (1<<PORTC6) | (1<<PORTC5) | (1<<PORTC4) | (1<<PORTC3) | (1<<PORTC2) | (1<<PORTC1) | (1<<PORTC0);
000120 b9e8      	OUT  0x8,R30
                 ; 0000 00BE 
                 ; 0000 00BF // Port D initialization
                 ; 0000 00C0 // Function: Bit7=In Bit6=In Bit5=Out Bit4=In Bit3=Out Bit2=Out Bit1=Out Bit0=Out
                 ; 0000 00C1 DDRD=(0<<DDD7) | (0<<DDD6) | (0<<DDD5) | (0<<DDD4) | (1<<DDD3) | (1<<DDD2) | (1<<DDD1) | (1<<DDD0);
000121 e0ef      	LDI  R30,LOW(15)
000122 b9ea      	OUT  0xA,R30
                 ; 0000 00C2 // State: Bit7=T Bit6=T Bit5=1 Bit4=0 Bit3=1 Bit2=1 Bit1=1 Bit0=1
                 ; 0000 00C3 PORTD=(1<<PORTD7) | (1<<PORTD6) | (1<<PORTD5) | (1<<PORTD4) | (1<<PORTD3) | (1<<PORTD2) | (1<<PORTD1) | (1<<PORTD0);
000123 efef      	LDI  R30,LOW(255)
000124 b9eb      	OUT  0xB,R30
                 ; 0000 00C4 
                 ; 0000 00C5 // Timer/Counter 0 initialization
                 ; 0000 00C6 // Clock source: System Clock
                 ; 0000 00C7 // Clock value: 9.766 kHz
                 ; 0000 00C8 // Mode: Normal top=0xFF
                 ; 0000 00C9 // OC0A output: Disconnected
                 ; 0000 00CA // OC0B output: Disconnected
                 ; 0000 00CB // Timer Period: 20.07 ms
                 ; 0000 00CC TCCR0A=(0<<COM0A1) | (0<<COM0A0) | (0<<COM0B1) | (0<<COM0B0) | (0<<WGM01) | (0<<WGM00);
000125 e0e0      	LDI  R30,LOW(0)
000126 bde4      	OUT  0x24,R30
                 ; 0000 00CD TCCR0B=(0<<WGM02) | (1<<CS02) | (0<<CS01) | (1<<CS00);
000127 e0e5      	LDI  R30,LOW(5)
000128 bde5      	OUT  0x25,R30
                 ; 0000 00CE TCNT0=0x3C;
000129 e3ec      	LDI  R30,LOW(60)
00012a bde6      	OUT  0x26,R30
                 ; 0000 00CF OCR0A=0x00;
00012b e0e0      	LDI  R30,LOW(0)
00012c bde7      	OUT  0x27,R30
                 ; 0000 00D0 OCR0B=0x00;
00012d bde8      	OUT  0x28,R30
                 ; 0000 00D1 
                 ; 0000 00D2 // Timer/Counter 1 initialization
                 ; 0000 00D3 // Clock source: System Clock
                 ; 0000 00D4 // Clock value: Timer1 Stopped
                 ; 0000 00D5 // Mode: Normal top=0xFFFF
                 ; 0000 00D6 // OC1A output: Disconnected
                 ; 0000 00D7 // OC1B output: Disconnected
                 ; 0000 00D8 // Noise Canceler: Off
                 ; 0000 00D9 // Input Capture on Falling Edge
                 ; 0000 00DA // Timer1 Overflow Interrupt: Off
                 ; 0000 00DB // Input Capture Interrupt: Off
                 ; 0000 00DC // Compare A Match Interrupt: Off
                 ; 0000 00DD // Compare B Match Interrupt: Off
                 ; 0000 00DE TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
00012e 93e0 0080 	STS  128,R30
                 ; 0000 00DF TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (0<<CS11) | (0<<CS10);
000130 93e0 0081 	STS  129,R30
                 ; 0000 00E0 TCNT1H=0x00;
000132 93e0 0085 	STS  133,R30
                 ; 0000 00E1 TCNT1L=0x00;
000134 93e0 0084 	STS  132,R30
                 ; 0000 00E2 ICR1H=0x00;
000136 93e0 0087 	STS  135,R30
                 ; 0000 00E3 ICR1L=0x00;
000138 93e0 0086 	STS  134,R30
                 ; 0000 00E4 OCR1AH=0x00;
00013a 93e0 0089 	STS  137,R30
                 ; 0000 00E5 OCR1AL=0x00;
00013c 93e0 0088 	STS  136,R30
                 ; 0000 00E6 OCR1BH=0x00;
00013e 93e0 008b 	STS  139,R30
                 ; 0000 00E7 OCR1BL=0x00;
000140 93e0 008a 	STS  138,R30
                 ; 0000 00E8 
                 ; 0000 00E9 // Timer/Counter 2 initialization
                 ; 0000 00EA // Clock source: System Clock
                 ; 0000 00EB // Clock value: Timer2 Stopped
                 ; 0000 00EC // Mode: Normal top=0xFF
                 ; 0000 00ED // OC2A output: Disconnected
                 ; 0000 00EE // OC2B output: Disconnected
                 ; 0000 00EF ASSR=(0<<EXCLK) | (0<<AS2);
000142 93e0 00b6 	STS  182,R30
                 ; 0000 00F0 TCCR2A=(0<<COM2A1) | (0<<COM2A0) | (0<<COM2B1) | (0<<COM2B0) | (0<<WGM21) | (0<<WGM20);
000144 93e0 00b0 	STS  176,R30
                 ; 0000 00F1 TCCR2B=(0<<WGM22) | (0<<CS22) | (0<<CS21) | (0<<CS20);
000146 93e0 00b1 	STS  177,R30
                 ; 0000 00F2 TCNT2=0x00;
000148 93e0 00b2 	STS  178,R30
                 ; 0000 00F3 OCR2A=0x00;
00014a 93e0 00b3 	STS  179,R30
                 ; 0000 00F4 OCR2B=0x00;
00014c 93e0 00b4 	STS  180,R30
                 ; 0000 00F5 
                 ; 0000 00F6 // Timer/Counter 0 Interrupt(s) initialization
                 ; 0000 00F7 TIMSK0=(0<<OCIE0B) | (0<<OCIE0A) | (1<<TOIE0);
00014e e0e1      	LDI  R30,LOW(1)
00014f 93e0 006e 	STS  110,R30
                 ; 0000 00F8 
                 ; 0000 00F9 // Timer/Counter 1 Interrupt(s) initialization
                 ; 0000 00FA TIMSK1=(0<<ICIE1) | (0<<OCIE1B) | (0<<OCIE1A) | (0<<TOIE1);
000151 e0e0      	LDI  R30,LOW(0)
000152 93e0 006f 	STS  111,R30
                 ; 0000 00FB 
                 ; 0000 00FC // Timer/Counter 2 Interrupt(s) initialization
                 ; 0000 00FD TIMSK2=(0<<OCIE2B) | (0<<OCIE2A) | (0<<TOIE2);
000154 93e0 0070 	STS  112,R30
                 ; 0000 00FE 
                 ; 0000 00FF // External Interrupt(s) initialization
                 ; 0000 0100 // INT0: Off
                 ; 0000 0101 // INT1: Off
                 ; 0000 0102 // INT2: Off
                 ; 0000 0103 // Interrupt on any change on pins PCINT0-7: Off
                 ; 0000 0104 // Interrupt on any change on pins PCINT8-15: Off
                 ; 0000 0105 // Interrupt on any change on pins PCINT16-23: Off
                 ; 0000 0106 // Interrupt on any change on pins PCINT24-31: Off
                 ; 0000 0107 EICRA=(0<<ISC21) | (0<<ISC20) | (0<<ISC11) | (0<<ISC10) | (0<<ISC01) | (0<<ISC00);
000156 93e0 0069 	STS  105,R30
                 ; 0000 0108 EIMSK=(0<<INT2) | (0<<INT1) | (0<<INT0);
000158 bbed      	OUT  0x1D,R30
                 ; 0000 0109 PCICR=(0<<PCIE3) | (0<<PCIE2) | (0<<PCIE1) | (0<<PCIE0);
000159 93e0 0068 	STS  104,R30
                 ; 0000 010A 
                 ; 0000 010B // USART0 initialization
                 ; 0000 010C // USART0 disabled
                 ; 0000 010D UCSR0B=(0<<RXCIE0) | (0<<TXCIE0) | (0<<UDRIE0) | (0<<RXEN0) | (0<<TXEN0) | (0<<UCSZ02) | (0<<RXB80) | (0<<TXB80);
00015b 93e0 00c1 	STS  193,R30
                 ; 0000 010E 
                 ; 0000 010F // USART1 initialization
                 ; 0000 0110 // USART1 disabled
                 ; 0000 0111 UCSR1B=(0<<RXCIE1) | (0<<TXCIE1) | (0<<UDRIE1) | (0<<RXEN1) | (0<<TXEN1) | (0<<UCSZ12) | (0<<RXB81) | (0<<TXB81);
00015d 93e0 00c9 	STS  201,R30
                 ; 0000 0112 
                 ; 0000 0113 // Analog Comparator initialization
                 ; 0000 0114 // Analog Comparator: Off
                 ; 0000 0115 // The Analog Comparator's positive input is
                 ; 0000 0116 // connected to the AIN0 pin
                 ; 0000 0117 // The Analog Comparator's negative input is
                 ; 0000 0118 // connected to the AIN1 pin
                 ; 0000 0119 ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
00015f e8e0      	LDI  R30,LOW(128)
000160 bfe0      	OUT  0x30,R30
                 ; 0000 011A ADCSRB=(0<<ACME);
000161 e0e0      	LDI  R30,LOW(0)
000162 93e0 007b 	STS  123,R30
                 ; 0000 011B // Digital input buffer on AIN0: On
                 ; 0000 011C // Digital input buffer on AIN1: On
                 ; 0000 011D DIDR1=(0<<AIN0D) | (0<<AIN1D);
000164 93e0 007f 	STS  127,R30
                 ; 0000 011E 
                 ; 0000 011F // ADC initialization
                 ; 0000 0120 // ADC disabled
                 ; 0000 0121 ADCSRA=(0<<ADEN) | (0<<ADSC) | (0<<ADATE) | (0<<ADIF) | (0<<ADIE) | (0<<ADPS2) | (0<<ADPS1) | (0<<ADPS0);
000166 93e0 007a 	STS  122,R30
                 ; 0000 0122 
                 ; 0000 0123 // SPI initialization
                 ; 0000 0124 // SPI disabled
                 ; 0000 0125 SPCR=(0<<SPIE) | (0<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
000168 bdec      	OUT  0x2C,R30
                 ; 0000 0126 
                 ; 0000 0127 // TWI initialization
                 ; 0000 0128 // TWI disabled
                 ; 0000 0129 TWCR=(0<<TWEA) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWEN) | (0<<TWIE);
000169 93e0 00bc 	STS  188,R30
                 ; 0000 012A 
                 ; 0000 012B // Globally enable interrupts
                 ; 0000 012C #asm("sei")
00016b 9478      	SEI
                 ; 0000 012D 
                 ; 0000 012E // Initialize the device
                 ; 0000 012F Init();
00016c d003      	RCALL _Init
                 ; 0000 0130 
                 ; 0000 0131 while (1)
                 _0xC:
                 ; 0000 0132 {
                 ; 0000 0133 // Display the consumption
                 ; 0000 0134 DisplayConsumption();
00016d d047      	RCALL _DisplayConsumption
                 ; 0000 0135 
                 ; 0000 0136 // Wait for interruptions
                 ; 0000 0137 }
00016e cffe      	RJMP _0xC
                 ; 0000 0138 }
                 _0xF:
00016f cfff      	RJMP _0xF
                 ; .FEND
                 ;void Init()
                 ; 0000 013C {
                 _Init:
                 ; .FSTART _Init
                 ; 0000 013D // Setting initial states = 0
                 ; 0000 013E Q = Q1 = S1 = S2 = S3 = S_PULSE = 0;
000170 e0e0      	LDI  R30,LOW(0)
000171 2e8e      	MOV  R8,R30
000172 2ebe      	MOV  R11,R30
000173 2e5e      	MOV  R5,R30
000174 2e4e      	MOV  R4,R30
000175 2ece      	MOV  R12,R30
000176 2e9e      	MOV  R9,R30
                 ; 0000 013F 
                 ; 0000 0140 // Setting the working mode
                 ; 0000 0141 MODE = 1;
000177 e0e1      	LDI  R30,LOW(1)
000178 2e7e      	MOV  R7,R30
                 ; 0000 0142 }
000179 9508      	RET
                 ; .FEND
                 ;void UpdateConsumption()
                 ; 0000 0145 {
                 _UpdateConsumption:
                 ; .FSTART _UpdateConsumption
                 ; 0000 0146 // Identify PULSE
                 ; 0000 0147 // PULSE = PINA & 0x01;
                 ; 0000 0148 
                 ; 0000 0149 /* switch(S2)
                 ; 0000 014A {
                 ; 0000 014B case 0:
                 ; 0000 014C {
                 ; 0000 014D char cntP = 0;
                 ; 0000 014E 
                 ; 0000 014F // PD6 -> Sending request from ADSP
                 ; 0000 0150 // PD7 -> Reading ack from ATmega164A
                 ; 0000 0151 
                 ; 0000 0152 // Check if sending request flag is up
                 ; 0000 0153 // (Receiving sending request on PD6)
                 ; 0000 0154 if (PORTD && 0x40)
                 ; 0000 0155 {
                 ; 0000 0156 // Send reading ack
                 ; 0000 0157 // (Sending ack on PD7)
                 ; 0000 0158 PORTD |= 0x80;
                 ; 0000 0159 
                 ; 0000 015A // Going further to reading the pulses
                 ; 0000 015B S2 = 1;
                 ; 0000 015C }
                 ; 0000 015D break;
                 ; 0000 015E }
                 ; 0000 015F case 1:
                 ; 0000 0160 {
                 ; 0000 0161 // If PULSE is on, start counting
                 ; 0000 0162 if (PULSE)
                 ; 0000 0163 {
                 ; 0000 0164 // Increment cntP
                 ; 0000 0165 cntP += 1;
                 ; 0000 0166 
                 ; 0000 0167 // Reset reading flag
                 ; 0000 0168 PORTD &= 0x7f;
                 ; 0000 0169 
                 ; 0000 016A // Go further if the pulse period has passed,
                 ; 0000 016B // otherwise go back wait for sensding ack again.
                 ; 0000 016C S2 = (cntP == DP) ? 2 : 1;
                 ; 0000 016D }
                 ; 0000 016E break;
                 ; 0000 016F }
                 ; 0000 0170 case 2:
                 ; 0000 0171 {
                 ; 0000 0172 if (~PULSE)
                 ; 0000 0173 {
                 ; 0000 0174 // Update current consumption range
                 ; 0000 0175 Q = CLS();
                 ; 0000 0176 
                 ; 0000 0177 // Increment consumption
                 ; 0000 0178 CONS[Q] += 1;
                 ; 0000 0179 
                 ; 0000 017A // Wait for another pulse
                 ; 0000 017B S2 = 0;
                 ; 0000 017C }
                 ; 0000 017D break;
                 ; 0000 017E }
                 ; 0000 017F } */
                 ; 0000 0180 
                 ; 0000 0181 
                 ; 0000 0182 // Read power level
                 ; 0000 0183 // PowerLevel = (PINA & 0xfe) >> 1;
                 ; 0000 0184 
                 ; 0000 0185 // For testing purposes, we will assume PowerLevel = 6 kW
                 ; 0000 0186 PowerLevel = 6;
00017a e0e6      	LDI  R30,LOW(6)
00017b e0f0      	LDI  R31,HIGH(6)
00017c 93e0 02ca 	STS  _PowerLevel,R30
00017e 93f0 02cb 	STS  _PowerLevel+1,R31
                 ; 0000 0187 
                 ; 0000 0188 switch(S2)
000180 2de5      	MOV  R30,R5
000181 e0f0      	LDI  R31,0
                 ; 0000 0189 {
                 ; 0000 018A case 0:
000182 9730      	SBIW R30,0
000183 f499      	BRNE _0x13
                 ; 0000 018B {
                 ; 0000 018C PULSE = PINA & 0x01;
000184 b1e0      	IN   R30,0x0
000185 70e1      	ANDI R30,LOW(0x1)
000186 2eae      	MOV  R10,R30
                 ; 0000 018D // If PULSE is on, start counting
                 ; 0000 018E if (PULSE)
000187 20aa      	TST  R10
000188 f069      	BREQ _0x14
                 ; 0000 018F {
                 ; 0000 0190 // Increment cntP
                 ; 0000 0191 cntP += 1;
000189 91e0 02d4 	LDS  R30,_cntP
00018b 5fef      	SUBI R30,-LOW(1)
00018c 93e0 02d4 	STS  _cntP,R30
                 ; 0000 0192 
                 ; 0000 0193 // Reset reading flag
                 ; 0000 0194 // PORTD &= 0x7f;
                 ; 0000 0195 
                 ; 0000 0196 // Go further if the pulse period has passed,
                 ; 0000 0197 // otherwise go back wait for sensding ack again.
                 ; 0000 0198 S2 = (cntP == DP) ? 1 : 0;
00018e 91a0 02d4 	LDS  R26,_cntP
000190 30a1      	CPI  R26,LOW(0x1)
000191 f411      	BRNE _0x15
000192 e0e1      	LDI  R30,LOW(1)
000193 c001      	RJMP _0x16
                 _0x15:
000194 e0e0      	LDI  R30,LOW(0)
                 _0x16:
000195 2e5e      	MOV  R5,R30
                 ; 0000 0199 }
                 ; 0000 019A break;
                 _0x14:
000196 c01d      	RJMP _0x12
                 ; 0000 019B }
                 ; 0000 019C case 1:
                 _0x13:
000197 30e1      	CPI  R30,LOW(0x1)
000198 e0a0      	LDI  R26,HIGH(0x1)
000199 07fa      	CPC  R31,R26
00019a f4c9      	BRNE _0x12
                 ; 0000 019D {
                 ; 0000 019E PULSE = PINA & 0x01;
00019b b1e0      	IN   R30,0x0
00019c 70e1      	ANDI R30,LOW(0x1)
00019d 2eae      	MOV  R10,R30
                 ; 0000 019F if (~PULSE)
00019e 95e0      	COM  R30
00019f 30e0      	CPI  R30,0
0001a0 f099      	BREQ _0x19
                 ; 0000 01A0 {
                 ; 0000 01A1 // Update current consumption range
                 ; 0000 01A2 CLS();
0001a1 d07a      	RCALL _CLS
                 ; 0000 01A3 
                 ; 0000 01A4 // Increment consumption
                 ; 0000 01A5 if (MODE == 0)
0001a2 2077      	TST  R7
0001a3 f431      	BRNE _0x1A
                 ; 0000 01A6 {
                 ; 0000 01A7 CONSUM[Q] += 1;    // Working range on
0001a4 2de9      	MOV  R30,R9
0001a5 d185      	RCALL SUBOPT_0x0
0001a6 9631      	ADIW R30,1
0001a7 93fe      	ST   -X,R31
0001a8 93ee      	ST   -X,R30
                 ; 0000 01A8 }
                 ; 0000 01A9 else
0001a9 c006      	RJMP _0x1B
                 _0x1A:
                 ; 0000 01AA {
                 ; 0000 01AB CONSUM[4] += 1;    // Working range off
0001aa d18a      	RCALL SUBOPT_0x1
0001ab 9631      	ADIW R30,1
                +
0001ac 93e0 02c4+STS _CONSUM + ( 8 ) , R30
0001ae 93f0 02c5+STS _CONSUM + ( 8 ) + 1 , R31
                 	__PUTW1MN _CONSUM,8
                 ; 0000 01AC }
                 _0x1B:
                 ; 0000 01AD 
                 ; 0000 01AE // Wait for another pulse
                 ; 0000 01AF S2 = 0;
0001b0 2455      	CLR  R5
                 ; 0000 01B0 cntP = 0;
0001b1 e0e0      	LDI  R30,LOW(0)
0001b2 93e0 02d4 	STS  _cntP,R30
                 ; 0000 01B1 }
                 ; 0000 01B2 break;
                 _0x19:
                 ; 0000 01B3 }
                 ; 0000 01B4 }
                 _0x12:
                 ; 0000 01B5 }
0001b4 9508      	RET
                 ; .FEND
                 ;void MockPULSE()
                 ; 0000 01BA {
                 ; 0000 01BB switch(S_PULSE)
                 ; 0000 01BC {
                 ; 0000 01BD case 0:
                 ; 0000 01BE {
                 ; 0000 01BF cntMockPulse = 0;
                 ; 0000 01C0 PULSE = 1;
                 ; 0000 01C1 S_PULSE = 1;
                 ; 0000 01C2 break;
                 ; 0000 01C3 }
                 ; 0000 01C4 case 1:
                 ; 0000 01C5 {
                 ; 0000 01C6 cntMockPulse += 1;
                 ; 0000 01C7 PULSE = 0;
                 ; 0000 01C8 if (cntMockPulse == 49)
                 ; 0000 01C9 S_PULSE = 0;
                 ; 0000 01CA break;
                 ; 0000 01CB }
                 ; 0000 01CC }
                 ; 0000 01CD }
                 ;void DisplayConsumption()
                 ; 0000 01D0 {
                 _DisplayConsumption:
                 ; .FSTART _DisplayConsumption
                 ; 0000 01D1 // We assume:
                 ; 0000 01D2 // PORTC: PC0 - PC6 -> 7 segments (A-G)
                 ; 0000 01D3 // PORTD: PD0 - PD3 -> select the common cathode for each digit (multiplexing)
                 ; 0000 01D4 // PD3 - C4, PD2 - C3, PD1 - C2, PD0 - C1
                 ; 0000 01D5 // Q - consumption range:
                 ; 0000 01D6 // 0 -> 00:00 - H1:00
                 ; 0000 01D7 // 1 -> H1:00 - H2:00               (MON - FRI)
                 ; 0000 01D8 // 2 -> H2:00 - 00:00 (next day)
                 ; 0000 01D9 // 3 -> SAT - SUN
                 ; 0000 01DA 
                 ; 0000 01DB // The actual approach:
                 ; 0000 01DC // Each main loop iteration we multiplex the digits and display one at a time
                 ; 0000 01DD 
                 ; 0000 01DE // If MODE = 1 -> display total consumption,
                 ; 0000 01DF // else -> display consumption based on current range.
                 ; 0000 01E0 int cons = (MODE) ?  CONSUM[4] : CONSUM[Q1];
                 ; 0000 01E1 
                 ; 0000 01E2 // Compute and display C4
                 ; 0000 01E3 C4 = cons / 1000;
0001b5 931a      	ST   -Y,R17
0001b6 930a      	ST   -Y,R16
                 ;	cons -> R16,R17
0001b7 2de7      	MOV  R30,R7
0001b8 e0f0      	LDI  R31,0
0001b9 9730      	SBIW R30,0
0001ba f011      	BREQ _0x22
0001bb d179      	RCALL SUBOPT_0x1
0001bc c002      	RJMP _0x23
                 _0x22:
0001bd 2dec      	MOV  R30,R12
0001be d16c      	RCALL SUBOPT_0x0
                 _0x23:
0001bf 018f      	MOVW R16,R30
0001c0 01d8      	MOVW R26,R16
0001c1 eee8      	LDI  R30,LOW(1000)
0001c2 e0f3      	LDI  R31,HIGH(1000)
0001c3 d1d9      	RCALL __DIVW21
0001c4 2ede      	MOV  R13,R30
                 ; 0000 01E4 cons %= 1000;
0001c5 01d8      	MOVW R26,R16
0001c6 eee8      	LDI  R30,LOW(1000)
0001c7 e0f3      	LDI  R31,HIGH(1000)
0001c8 d1d9      	RCALL __MODW21
0001c9 018f      	MOVW R16,R30
                 ; 0000 01E5 DisplayDigit(4, C4);
0001ca e0e4      	LDI  R30,LOW(4)
0001cb 93ea      	ST   -Y,R30
0001cc 2dad      	MOV  R26,R13
0001cd d023      	RCALL _DisplayDigit
                 ; 0000 01E6 
                 ; 0000 01E7 // Compute and display C3
                 ; 0000 01E8 C3 = cons / 100;
0001ce 01d8      	MOVW R26,R16
0001cf e6e4      	LDI  R30,LOW(100)
0001d0 e0f0      	LDI  R31,HIGH(100)
0001d1 d1cb      	RCALL __DIVW21
0001d2 93e0 02c6 	STS  _C3,R30
                 ; 0000 01E9 cons %= 100;
0001d4 01d8      	MOVW R26,R16
0001d5 e6e4      	LDI  R30,LOW(100)
0001d6 e0f0      	LDI  R31,HIGH(100)
0001d7 d1ca      	RCALL __MODW21
0001d8 018f      	MOVW R16,R30
                 ; 0000 01EA DisplayDigit(3, C3);
0001d9 e0e3      	LDI  R30,LOW(3)
0001da 93ea      	ST   -Y,R30
0001db 91a0 02c6 	LDS  R26,_C3
0001dd d15c      	RCALL SUBOPT_0x2
                 ; 0000 01EB 
                 ; 0000 01EC // Compute and display C2
                 ; 0000 01ED C2 = cons / 10;
0001de d1be      	RCALL __DIVW21
0001df 93e0 02c7 	STS  _C2,R30
                 ; 0000 01EE DisplayDigit(2, C2);
0001e1 e0e2      	LDI  R30,LOW(2)
0001e2 93ea      	ST   -Y,R30
0001e3 91a0 02c7 	LDS  R26,_C2
0001e5 d154      	RCALL SUBOPT_0x2
                 ; 0000 01EF 
                 ; 0000 01F0 // Compute and display C1
                 ; 0000 01F1 C1 = cons % 10;
0001e6 d1bb      	RCALL __MODW21
0001e7 93e0 02c8 	STS  _C1,R30
                 ; 0000 01F2 DisplayDigit(1, C1);
0001e9 e0e1      	LDI  R30,LOW(1)
0001ea 93ea      	ST   -Y,R30
0001eb 91a0 02c8 	LDS  R26,_C1
0001ed d003      	RCALL _DisplayDigit
                 ; 0000 01F3 }
0001ee 9109      	LD   R16,Y+
0001ef 9119      	LD   R17,Y+
0001f0 9508      	RET
                 ; .FEND
                 ;void DisplayDigit(char currentDisplay, char digit)
                 ; 0000 01F6 {
                 _DisplayDigit:
                 ; .FSTART _DisplayDigit
                 ; 0000 01F7 // Select the desired display (turn on the pin
                 ; 0000 01F8 // corresponding to the desired digit (C4/C3/C2/C1)
                 ; 0000 01F9 char output;
                 ; 0000 01FA 
                 ; 0000 01FB // Set PORTC pins to the corresponding digit
                 ; 0000 01FC // PORTC = DIGITS[digit];
                 ; 0000 01FD 
                 ; 0000 01FE switch (currentDisplay)
0001f1 d163      	RCALL __SAVELOCR4
0001f2 2f0a      	MOV  R16,R26
0001f3 813c      	LDD  R19,Y+4
                 ;	currentDisplay -> R19
                 ;	digit -> R16
                 ;	output -> R17
0001f4 2fe3      	MOV  R30,R19
0001f5 e0f0      	LDI  R31,0
                 ; 0000 01FF {
                 ; 0000 0200 case 4:
0001f6 30e4      	CPI  R30,LOW(0x4)
0001f7 e0a0      	LDI  R26,HIGH(0x4)
0001f8 07fa      	CPC  R31,R26
0001f9 f411      	BRNE _0x28
                 ; 0000 0201 // Turn PD3 on
                 ; 0000 0202 //output &= 0b00000111;
                 ; 0000 0203 output = 0x08;
0001fa e018      	LDI  R17,LOW(8)
                 ; 0000 0204 break;
0001fb c011      	RJMP _0x27
                 ; 0000 0205 case 3:
                 _0x28:
0001fc 30e3      	CPI  R30,LOW(0x3)
0001fd e0a0      	LDI  R26,HIGH(0x3)
0001fe 07fa      	CPC  R31,R26
0001ff f411      	BRNE _0x29
                 ; 0000 0206 // Turn PD2 on
                 ; 0000 0207 // output &= 0b00001011;
                 ; 0000 0208 output = 0x04;
000200 e014      	LDI  R17,LOW(4)
                 ; 0000 0209 break;
000201 c00b      	RJMP _0x27
                 ; 0000 020A case 2:
                 _0x29:
000202 30e2      	CPI  R30,LOW(0x2)
000203 e0a0      	LDI  R26,HIGH(0x2)
000204 07fa      	CPC  R31,R26
000205 f411      	BRNE _0x2A
                 ; 0000 020B // Turn PD1 on
                 ; 0000 020C output = 0x02;
000206 e012      	LDI  R17,LOW(2)
                 ; 0000 020D break;
000207 c005      	RJMP _0x27
                 ; 0000 020E case 1:
                 _0x2A:
000208 30e1      	CPI  R30,LOW(0x1)
000209 e0a0      	LDI  R26,HIGH(0x1)
00020a 07fa      	CPC  R31,R26
00020b f409      	BRNE _0x27
                 ; 0000 020F // Turn PD0 on
                 ; 0000 0210 output = 0x01;
00020c e011      	LDI  R17,LOW(1)
                 ; 0000 0211 break;
                 ; 0000 0212 }
                 _0x27:
                 ; 0000 0213 
                 ; 0000 0214 // Delete PD0-3
                 ; 0000 0215 PORTD &= 0xF0;
00020d b1eb      	IN   R30,0xB
00020e 7fe0      	ANDI R30,LOW(0xF0)
00020f b9eb      	OUT  0xB,R30
                 ; 0000 0216 
                 ; 0000 0217 // Assign output to PORTC in order to select the desired display;
                 ; 0000 0218 PORTD |= output;
000210 b1eb      	IN   R30,0xB
000211 2be1      	OR   R30,R17
000212 b9eb      	OUT  0xB,R30
                 ; 0000 0219 
                 ; 0000 021A // Set PORTC pins to the corresponding digit
                 ; 0000 021B PORTC = DIGITS[digit];
000213 2fe0      	MOV  R30,R16
000214 e0f0      	LDI  R31,0
000215 58e4      	SUBI R30,LOW(-_DIGITS*2)
000216 4fff      	SBCI R31,HIGH(-_DIGITS*2)
000217 9004      	LPM  R0,Z
000218 b808      	OUT  0x8,R0
                 ; 0000 021C 
                 ; 0000 021D // Add delay (10 us)
                 ; 0000 021E // _display_us(10);
                 ; 0000 021F }
000219 d142      	RCALL __LOADLOCR4
00021a 9625      	ADIW R28,5
00021b 9508      	RET
                 ; .FEND
                 ;void UpdateTime(){
                 ; 0000 0222 void UpdateTime(){
                 ; 0000 0223 cnt_time += 1; //incrementare contor de timp
                 ; 0000 0224 if(cnt_time != T_SEC) return;
                 ; 0000 0225 
                 ; 0000 0226 cnt_time = 0; // se reseteaza contorul
                 ; 0000 0227 S+=1;  //incrementeaza contor secunde
                 ; 0000 0228 
                 ; 0000 0229 if(S!=60) return;
                 ; 0000 022A S = 0;//se reseteaza nr de secunde
                 ; 0000 022B M += 1; //incrementeaza contor minute
                 ; 0000 022C 
                 ; 0000 022D if(M!=60) return;
                 ; 0000 022E M = 0;
                 ; 0000 022F H += 1;
                 ; 0000 0230 
                 ; 0000 0231 if(H!=24) return;
                 ; 0000 0232 H = 0;
                 ; 0000 0233 Z += 1;
                 ; 0000 0234 
                 ; 0000 0235 if (Z == 7) Z = 0;
                 ; 0000 0236 return;
                 ; 0000 0237 }
                 ;void CLS()
                 ; 0000 023A {
                 _CLS:
                 ; .FSTART _CLS
                 ; 0000 023B char out;
                 ; 0000 023C 
                 ; 0000 023D //exemplu
                 ; 0000 023E // Ziua 3, ora 8, min 6, sec 3
                 ; 0000 023F // 0x03080603
                 ; 0000 0240 long int now = (Z<<24) | (H<<16) | (M<<8) | S;
                 ; 0000 0241 
                 ; 0000 0242 long int *adr = TABA[Q];
                 ; 0000 0243 char ready = 0;
                 ; 0000 0244 int i = 0;
                 ; 0000 0245 
                 ; 0000 0246 while (!ready)
00021c 9724      	SBIW R28,4
00021d d135      	RCALL __SAVELOCR6
                 ;	out -> R17
                 ;	now -> Y+6
                 ;	*adr -> R18,R19
                 ;	ready -> R16
                 ;	i -> R20,R21
00021e 91a0 02ac 	LDS  R26,_Z
000220 91b0 02ad 	LDS  R27,_Z+1
000222 9180 02ae 	LDS  R24,_Z+2
000224 9190 02af 	LDS  R25,_Z+3
000226 e1e8      	LDI  R30,LOW(24)
000227 d13d      	RCALL __LSLD12
000228 01df      	MOVW R26,R30
000229 01cb      	MOVW R24,R22
00022a 91e0 02b0 	LDS  R30,_H
00022c 91f0 02b1 	LDS  R31,_H+1
00022e 9160 02b2 	LDS  R22,_H+2
000230 9170 02b3 	LDS  R23,_H+3
                +
000232 2f6e     +MOV R22 , R30
000233 2f7f     +MOV R23 , R31
000234 e0e0     +LDI R30 , 0
000235 e0f0     +LDI R31 , 0
                 	__LSLD16
000236 d108      	RCALL SUBOPT_0x3
000237 937f      	PUSH R23
000238 936f      	PUSH R22
000239 93ff      	PUSH R31
00023a 93ef      	PUSH R30
00023b 91a0 02b4 	LDS  R26,_M
00023d 91b0 02b5 	LDS  R27,_M+1
00023f 9180 02b6 	LDS  R24,_M+2
000241 9190 02b7 	LDS  R25,_M+3
000243 e0e8      	LDI  R30,LOW(8)
000244 d120      	RCALL __LSLD12
000245 91af      	POP  R26
000246 91bf      	POP  R27
000247 918f      	POP  R24
000248 919f      	POP  R25
000249 d0f5      	RCALL SUBOPT_0x3
00024a 91a0 02b8 	LDS  R26,_S
00024c 91b0 02b9 	LDS  R27,_S+1
00024e 9180 02ba 	LDS  R24,_S+2
000250 9190 02bb 	LDS  R25,_S+3
000252 d0ec      	RCALL SUBOPT_0x3
                +
000253 83ee     +STD Y + 6 , R30
000254 83ff     +STD Y + 6 + 1 , R31
000255 8768     +STD Y + 6 + 2 , R22
000256 8779     +STD Y + 6 + 3 , R23
                 	__PUTD1S 6
000257 2de9      	MOV  R30,R9
000258 eaa4      	LDI  R26,LOW(_TABA)
000259 e0b2      	LDI  R27,HIGH(_TABA)
00025a e0f0      	LDI  R31,0
00025b 0fee      	LSL  R30
00025c 1fff      	ROL  R31
00025d 0fae      	ADD  R26,R30
00025e 1fbf      	ADC  R27,R31
                +
00025f 91ed     +LD R30 , X +
000260 91fc     +LD R31 , X
000261 9711     +SBIW R26 , 1
                 	__GETW1P
000262 019f      	MOVW R18,R30
000263 e000      	LDI  R16,0
                +
000264 e040     +LDI R20 , LOW ( 0 )
000265 e050     +LDI R21 , HIGH ( 0 )
                 	__GETWRN 20,21,0
                 _0x31:
000266 3000      	CPI  R16,0
000267 f509      	BRNE _0x33
                 ; 0000 0247 {
                 ; 0000 0248 if (now == adr[i]) {
000268 d0db      	RCALL SUBOPT_0x4
                +
000269 81ae     +LDD R26 , Y + 6
00026a 81bf     +LDD R27 , Y + 6 + 1
00026b 8588     +LDD R24 , Y + 6 + 2
00026c 8599     +LDD R25 , Y + 6 + 3
                 	__GETD2S 6
                +
00026d 17ea     +CP R30 , R26
00026e 07fb     +CPC R31 , R27
00026f 0768     +CPC R22 , R24
000270 0779     +CPC R23 , R25
                 	__CPD12
000271 f449      	BRNE _0x34
                 ; 0000 0249 Q = adr[i + 1];
000272 01fa      	MOVW R30,R20
000273 9631      	ADIW R30,1
000274 01d9      	MOVW R26,R18
000275 d106      	RCALL __LSLW2
000276 0fae      	ADD  R26,R30
000277 1fbf      	ADC  R27,R31
000278 909c      	LD   R9,X
                 ; 0000 024A ready = 1;
000279 e001      	LDI  R16,LOW(1)
                 ; 0000 024B }
                 ; 0000 024C else if (adr[i] == Ter) ready = 1;
00027a c00d      	RJMP _0x35
                 _0x34:
00027b d0c8      	RCALL SUBOPT_0x4
                +
00027c 30e0     +CPI R30 , LOW ( 0x10000000 )
00027d e0a0     +LDI R26 , HIGH ( 0x10000000 )
00027e 07fa     +CPC R31 , R26
00027f e0a0     +LDI R26 , BYTE3 ( 0x10000000 )
000280 076a     +CPC R22 , R26
000281 e1a0     +LDI R26 , BYTE4 ( 0x10000000 )
000282 077a     +CPC R23 , R26
                 	__CPD1N 0x10000000
000283 f411      	BRNE _0x36
000284 e001      	LDI  R16,LOW(1)
                 ; 0000 024D else i = i+2;
000285 c002      	RJMP _0x37
                 _0x36:
                +
000286 5f4e     +SUBI R20 , LOW ( - 2 )
000287 4f5f     +SBCI R21 , HIGH ( - 2 )
                 	__ADDWRN 20,21,2
                 ; 0000 024E }
                 _0x37:
                 _0x35:
000288 cfdd      	RJMP _0x31
                 _0x33:
                 ; 0000 024F 
                 ; 0000 0250 out = Tout[Q];
000289 2de9      	MOV  R30,R9
00028a e0f0      	LDI  R31,0
00028b 56e0      	SUBI R30,LOW(-_Tout)
00028c 4ffd      	SBCI R31,HIGH(-_Tout)
00028d 8110      	LD   R17,Z
                 ; 0000 0251 }
00028e d0cb      	RCALL __LOADLOCR6
00028f 962a      	ADIW R28,10
000290 9508      	RET
                 ; .FEND
                 ;void DisplayInfo()
                 ; 0000 0254 {
                 _DisplayInfo:
                 ; .FSTART _DisplayInfo
                 ; 0000 0255 DisplayConsumptionDisplayMode();
000291 d01d      	RCALL _DisplayConsumptionDisplayMode
                 ; 0000 0256 DisplayPowerLevel();
000292 d001      	RCALL _DisplayPowerLevel
                 ; 0000 0257 }
000293 9508      	RET
                 ; .FEND
                 ;void DisplayPowerLevel()
                 ; 0000 025A {
                 _DisplayPowerLevel:
                 ; .FSTART _DisplayPowerLevel
                 ; 0000 025B char out;
                 ; 0000 025C 
                 ; 0000 025D //   if (!PowerLevel)          PowerLevel = 0 kW
                 ; 0000 025E //   {
                 ; 0000 025F //        out = CLC_LEVEL[0];
                 ; 0000 0260 //   }
                 ; 0000 0261 //   else if (PowerLevel < 2.5)    0 < PowerLevel < 2.5 kW
                 ; 0000 0262 //   {
                 ; 0000 0263 //        out = CLC_LEVEL[1];
                 ; 0000 0264 //   }
                 ; 0000 0265 //   else if (PowerLevel < 5)      2.5 <= PowerLevel < 5 kW
                 ; 0000 0266 //   {
                 ; 0000 0267 //        out = CLC_LEVEL[2];
                 ; 0000 0268 //   }
                 ; 0000 0269 //   else if (PowerLevel < 7.5)    5 <= PowerLevel < 7.5 kW
                 ; 0000 026A //   {
                 ; 0000 026B //        out = CLC_LEVEL[3];
                 ; 0000 026C //   }
                 ; 0000 026D //   else                          PowerLvel >= 7.5 kW
                 ; 0000 026E //   {
                 ; 0000 026F //        out = CLC_LEVEL[4];
                 ; 0000 0270 //   }
                 ; 0000 0271 
                 ; 0000 0272 if (!PowerLevel)         // PowerLevel = 0 kW
000294 931a      	ST   -Y,R17
                 ;	out -> R17
000295 91e0 02ca 	LDS  R30,_PowerLevel
000297 91f0 02cb 	LDS  R31,_PowerLevel+1
000299 9730      	SBIW R30,0
00029a f419      	BRNE _0x38
                 ; 0000 0273 {
                 ; 0000 0274 out = CLC_LEVEL[0];
00029b 9110 02cc 	LDS  R17,_CLC_LEVEL
                 ; 0000 0275 }
                 ; 0000 0276 else if (PowerLevel < 3)   // 0 < PowerLevel < 3 kW
00029d c00e      	RJMP _0x39
                 _0x38:
00029e d0af      	RCALL SUBOPT_0x5
00029f 9713      	SBIW R26,3
0002a0 f41c      	BRGE _0x3A
                 ; 0000 0277 {
                 ; 0000 0278 out = CLC_LEVEL[1];
                +
0002a1 9110 02cd+LDS R17 , _CLC_LEVEL + ( 1 )
                 	__GETBRMN 17,_CLC_LEVEL,1
                 ; 0000 0279 }
                 ; 0000 027A else if (PowerLevel < 6)     // 3 <= PowerLevel < 6 kW
0002a3 c008      	RJMP _0x3B
                 _0x3A:
0002a4 d0a9      	RCALL SUBOPT_0x5
0002a5 9716      	SBIW R26,6
0002a6 f41c      	BRGE _0x3C
                 ; 0000 027B {
                 ; 0000 027C out = CLC_LEVEL[2];
                +
0002a7 9110 02ce+LDS R17 , _CLC_LEVEL + ( 2 )
                 	__GETBRMN 17,_CLC_LEVEL,2
                 ; 0000 027D }
                 ; 0000 027E else                         // PowerLvel >= 6 kW
0002a9 c002      	RJMP _0x3D
                 _0x3C:
                 ; 0000 027F {
                 ; 0000 0280 out = CLC_LEVEL[3];
                +
0002aa 9110 02cf+LDS R17 , _CLC_LEVEL + ( 3 )
                 	__GETBRMN 17,_CLC_LEVEL,3
                 ; 0000 0281 }
                 _0x3D:
                 _0x3B:
                 _0x39:
                 ; 0000 0282 
                 ; 0000 0283 // Delete PB7-PB5
                 ; 0000 0284 PORTB &= 0x1f;
0002ac b1e5      	IN   R30,0x5
0002ad 71ef      	ANDI R30,LOW(0x1F)
0002ae c076      	RJMP _0x2000002
                 ; 0000 0285 
                 ; 0000 0286 // Display out on PB7-PB5
                 ; 0000 0287 PORTB |= out;
                 ; 0000 0288 }
                 ; .FEND
                 ;void DisplayConsumptionDisplayMode()
                 ; 0000 028B {
                 _DisplayConsumptionDisplayMode:
                 ; .FSTART _DisplayConsumptionDisplayMode
                 ; 0000 028C char out;
                 ; 0000 028D 
                 ; 0000 028E if (MODE == 1)  // Working without ranges
0002af 931a      	ST   -Y,R17
                 ;	out -> R17
0002b0 e0e1      	LDI  R30,LOW(1)
0002b1 15e7      	CP   R30,R7
0002b2 f429      	BRNE _0x3E
                 ; 0000 028F {
                 ; 0000 0290 // Clear PB4-0
                 ; 0000 0291 PORTB &= 0xE0;
0002b3 b1e5      	IN   R30,0x5
0002b4 7ee0      	ANDI R30,LOW(0xE0)
0002b5 b9e5      	OUT  0x5,R30
                 ; 0000 0292 
                 ; 0000 0293 // Display on PB4-0
                 ; 0000 0294 PORTB |= 0x10;
0002b6 9a2c      	SBI  0x5,4
                 ; 0000 0295 
                 ; 0000 0296 return;
0002b7 c071      	RJMP _0x2000001
                 ; 0000 0297 }
                 ; 0000 0298 
                 ; 0000 0299 switch(S3)
                 _0x3E:
0002b8 2deb      	MOV  R30,R11
0002b9 e0f0      	LDI  R31,0
                 ; 0000 029A {
                 ; 0000 029B case 0:
0002ba 9730      	SBIW R30,0
0002bb f439      	BRNE _0x42
                 ; 0000 029C {
                 ; 0000 029D if (CA == 0)            // Pressed CA
0002bc 91e0 02c9 	LDS  R30,_CA
0002be 30e0      	CPI  R30,0
0002bf f411      	BRNE _0x43
                 ; 0000 029E {
                 ; 0000 029F S3 = 1;
0002c0 e0e1      	LDI  R30,LOW(1)
0002c1 2ebe      	MOV  R11,R30
                 ; 0000 02A0 }
                 ; 0000 02A1 break;
                 _0x43:
0002c2 c052      	RJMP _0x41
                 ; 0000 02A2 }
                 ; 0000 02A3 case 1:                 // Released CA
                 _0x42:
0002c3 30e1      	CPI  R30,LOW(0x1)
0002c4 e0a0      	LDI  R26,HIGH(0x1)
0002c5 07fa      	CPC  R31,R26
0002c6 f449      	BRNE _0x44
                 ; 0000 02A4 {
                 ; 0000 02A5 if (CA)
0002c7 91e0 02c9 	LDS  R30,_CA
0002c9 30e0      	CPI  R30,0
0002ca f021      	BREQ _0x45
                 ; 0000 02A6 {
                 ; 0000 02A7 S3 = 2;
0002cb e0e2      	LDI  R30,LOW(2)
0002cc 2ebe      	MOV  R11,R30
                 ; 0000 02A8 Q1 = 1;
0002cd e0e1      	LDI  R30,LOW(1)
0002ce 2ece      	MOV  R12,R30
                 ; 0000 02A9 }
                 ; 0000 02AA break;
                 _0x45:
0002cf c045      	RJMP _0x41
                 ; 0000 02AB }
                 ; 0000 02AC case 2:                //  Pressed CA
                 _0x44:
0002d0 30e2      	CPI  R30,LOW(0x2)
0002d1 e0a0      	LDI  R26,HIGH(0x2)
0002d2 07fa      	CPC  R31,R26
0002d3 f439      	BRNE _0x46
                 ; 0000 02AD {
                 ; 0000 02AE if (CA == 0)
0002d4 91e0 02c9 	LDS  R30,_CA
0002d6 30e0      	CPI  R30,0
0002d7 f411      	BRNE _0x47
                 ; 0000 02AF {
                 ; 0000 02B0 S3 = 3;
0002d8 e0e3      	LDI  R30,LOW(3)
0002d9 2ebe      	MOV  R11,R30
                 ; 0000 02B1 }
                 ; 0000 02B2 break;
                 _0x47:
0002da c03a      	RJMP _0x41
                 ; 0000 02B3 }
                 ; 0000 02B4 case 3:                // Released CA
                 _0x46:
0002db 30e3      	CPI  R30,LOW(0x3)
0002dc e0a0      	LDI  R26,HIGH(0x3)
0002dd 07fa      	CPC  R31,R26
0002de f449      	BRNE _0x48
                 ; 0000 02B5 {
                 ; 0000 02B6 if (CA)
0002df 91e0 02c9 	LDS  R30,_CA
0002e1 30e0      	CPI  R30,0
0002e2 f021      	BREQ _0x49
                 ; 0000 02B7 {
                 ; 0000 02B8 S3 = 4;
0002e3 e0e4      	LDI  R30,LOW(4)
0002e4 2ebe      	MOV  R11,R30
                 ; 0000 02B9 Q1 = 2;
0002e5 e0e2      	LDI  R30,LOW(2)
0002e6 2ece      	MOV  R12,R30
                 ; 0000 02BA }
                 ; 0000 02BB break;
                 _0x49:
0002e7 c02d      	RJMP _0x41
                 ; 0000 02BC }
                 ; 0000 02BD case 4:
                 _0x48:
0002e8 30e4      	CPI  R30,LOW(0x4)
0002e9 e0a0      	LDI  R26,HIGH(0x4)
0002ea 07fa      	CPC  R31,R26
0002eb f439      	BRNE _0x4A
                 ; 0000 02BE {
                 ; 0000 02BF if (CA == 0)
0002ec 91e0 02c9 	LDS  R30,_CA
0002ee 30e0      	CPI  R30,0
0002ef f411      	BRNE _0x4B
                 ; 0000 02C0 {
                 ; 0000 02C1 S3 = 5;
0002f0 e0e5      	LDI  R30,LOW(5)
0002f1 2ebe      	MOV  R11,R30
                 ; 0000 02C2 }
                 ; 0000 02C3 break;
                 _0x4B:
0002f2 c022      	RJMP _0x41
                 ; 0000 02C4 }
                 ; 0000 02C5 case 5:
                 _0x4A:
0002f3 30e5      	CPI  R30,LOW(0x5)
0002f4 e0a0      	LDI  R26,HIGH(0x5)
0002f5 07fa      	CPC  R31,R26
0002f6 f449      	BRNE _0x4C
                 ; 0000 02C6 {
                 ; 0000 02C7 if (CA)
0002f7 91e0 02c9 	LDS  R30,_CA
0002f9 30e0      	CPI  R30,0
0002fa f021      	BREQ _0x4D
                 ; 0000 02C8 {
                 ; 0000 02C9 S3 = 6;
0002fb e0e6      	LDI  R30,LOW(6)
0002fc 2ebe      	MOV  R11,R30
                 ; 0000 02CA Q1 = 3;
0002fd e0e3      	LDI  R30,LOW(3)
0002fe 2ece      	MOV  R12,R30
                 ; 0000 02CB }
                 ; 0000 02CC break;
                 _0x4D:
0002ff c015      	RJMP _0x41
                 ; 0000 02CD }
                 ; 0000 02CE case 6:
                 _0x4C:
000300 30e6      	CPI  R30,LOW(0x6)
000301 e0a0      	LDI  R26,HIGH(0x6)
000302 07fa      	CPC  R31,R26
000303 f439      	BRNE _0x4E
                 ; 0000 02CF {
                 ; 0000 02D0 if (CA == 0)
000304 91e0 02c9 	LDS  R30,_CA
000306 30e0      	CPI  R30,0
000307 f411      	BRNE _0x4F
                 ; 0000 02D1 {
                 ; 0000 02D2 S3 = 7;
000308 e0e7      	LDI  R30,LOW(7)
000309 2ebe      	MOV  R11,R30
                 ; 0000 02D3 }
                 ; 0000 02D4 break;
                 _0x4F:
00030a c00a      	RJMP _0x41
                 ; 0000 02D5 }
                 ; 0000 02D6 case 7:
                 _0x4E:
00030b 30e7      	CPI  R30,LOW(0x7)
00030c e0a0      	LDI  R26,HIGH(0x7)
00030d 07fa      	CPC  R31,R26
00030e f431      	BRNE _0x41
                 ; 0000 02D7 {
                 ; 0000 02D8 if (CA)
00030f 91e0 02c9 	LDS  R30,_CA
000311 30e0      	CPI  R30,0
000312 f011      	BREQ _0x51
                 ; 0000 02D9 {
                 ; 0000 02DA S3 = 0;
000313 24bb      	CLR  R11
                 ; 0000 02DB Q1 = 0;
000314 24cc      	CLR  R12
                 ; 0000 02DC }
                 ; 0000 02DD break;
                 _0x51:
                 ; 0000 02DE }
                 ; 0000 02DF }
                 _0x41:
                 ; 0000 02E0 
                 ; 0000 02E1 out = CLC_RANGE_OUTPUT[Q1] | (CLC_RANGE_OUTPUT[Q] << 2);
000315 2dec      	MOV  R30,R12
000316 e0f0      	LDI  R31,0
000317 53e0      	SUBI R30,LOW(-_CLC_RANGE_OUTPUT)
000318 4ffd      	SBCI R31,HIGH(-_CLC_RANGE_OUTPUT)
000319 81a0      	LD   R26,Z
00031a 2de9      	MOV  R30,R9
00031b e0f0      	LDI  R31,0
00031c 53e0      	SUBI R30,LOW(-_CLC_RANGE_OUTPUT)
00031d 4ffd      	SBCI R31,HIGH(-_CLC_RANGE_OUTPUT)
00031e 81e0      	LD   R30,Z
00031f 0fee      	LSL  R30
000320 0fee      	LSL  R30
000321 2bea      	OR   R30,R26
000322 2f1e      	MOV  R17,R30
                 ; 0000 02E2 
                 ; 0000 02E3 // Delete PB4-PB0
                 ; 0000 02E4 PORTB &= 0xE0;
000323 b1e5      	IN   R30,0x5
000324 7ee0      	ANDI R30,LOW(0xE0)
                 _0x2000002:
000325 b9e5      	OUT  0x5,R30
                 ; 0000 02E5 
                 ; 0000 02E6 // Display out on PB3-PB0
                 ; 0000 02E7 PORTB |= out;
000326 b1e5      	IN   R30,0x5
000327 2be1      	OR   R30,R17
000328 b9e5      	OUT  0x5,R30
                 ; 0000 02E8 }
                 _0x2000001:
000329 9119      	LD   R17,Y+
00032a 9508      	RET
                 ; .FEND
                 
                 	.DSEG
                 _A0:
000200           	.BYTE 0x30
                 _A1:
000230           	.BYTE 0x30
                 _A2:
000260           	.BYTE 0x30
                 _A3:
000290           	.BYTE 0x10
                 _Tout:
0002a0           	.BYTE 0x4
                 _TABA:
0002a4           	.BYTE 0x8
                 _Z:
0002ac           	.BYTE 0x4
                 _H:
0002b0           	.BYTE 0x4
                 _M:
0002b4           	.BYTE 0x4
                 _S:
0002b8           	.BYTE 0x4
                 _CONSUM:
0002bc           	.BYTE 0xA
                 _C3:
0002c6           	.BYTE 0x1
                 _C2:
0002c7           	.BYTE 0x1
                 _C1:
0002c8           	.BYTE 0x1
                 _CA:
0002c9           	.BYTE 0x1
                 _PowerLevel:
0002ca           	.BYTE 0x2
                 _CLC_LEVEL:
0002cc           	.BYTE 0x4
                 _CLC_RANGE_OUTPUT:
0002d0           	.BYTE 0x4
                 _cntP:
0002d4           	.BYTE 0x1
                 _cntMockPulse:
0002d5           	.BYTE 0x1
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x0:
00032b ebac      	LDI  R26,LOW(_CONSUM)
00032c e0b2      	LDI  R27,HIGH(_CONSUM)
00032d e0f0      	LDI  R31,0
00032e 0fee      	LSL  R30
00032f 1fff      	ROL  R31
000330 0fae      	ADD  R26,R30
000331 1fbf      	ADC  R27,R31
000332 91ed      	LD   R30,X+
000333 91fd      	LD   R31,X+
000334 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1:
                +
000335 91e0 02c4+LDS R30 , _CONSUM + ( 8 )
000337 91f0 02c5+LDS R31 , _CONSUM + ( 8 ) + 1
                 	__GETW1MN _CONSUM,8
000339 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x2:
00033a deb6      	RCALL _DisplayDigit
00033b 01d8      	MOVW R26,R16
00033c e0ea      	LDI  R30,LOW(10)
00033d e0f0      	LDI  R31,HIGH(10)
00033e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x3:
                +
00033f 2bea     +OR R30 , R26
000340 2bfb     +OR R31 , R27
000341 2b68     +OR R22 , R24
000342 2b79     +OR R23 , R25
                 	__ORD12
000343 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x4:
000344 01fa      	MOVW R30,R20
000345 01d9      	MOVW R26,R18
000346 d035      	RCALL __LSLW2
000347 0fae      	ADD  R26,R30
000348 1fbf      	ADC  R27,R31
                +
000349 91ed     +LD R30 , X +
00034a 91fd     +LD R31 , X +
00034b 916d     +LD R22 , X +
00034c 917d     +LD R23 , X +
                 	__GETD1P_INC
00034d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x5:
00034e 91a0 02ca 	LDS  R26,_PowerLevel
000350 91b0 02cb 	LDS  R27,_PowerLevel+1
000352 9508      	RET
                 
                 ;RUNTIME LIBRARY
                 
                 	.CSEG
                 __SAVELOCR6:
000353 935a      	ST   -Y,R21
                 __SAVELOCR5:
000354 934a      	ST   -Y,R20
                 __SAVELOCR4:
000355 933a      	ST   -Y,R19
                 __SAVELOCR3:
000356 932a      	ST   -Y,R18
                 __SAVELOCR2:
000357 931a      	ST   -Y,R17
000358 930a      	ST   -Y,R16
000359 9508      	RET
                 
                 __LOADLOCR6:
00035a 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
00035b 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
00035c 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
00035d 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
00035e 8119      	LDD  R17,Y+1
00035f 8108      	LD   R16,Y
000360 9508      	RET
                 
                 __ANEGW1:
000361 95f1      	NEG  R31
000362 95e1      	NEG  R30
000363 40f0      	SBCI R31,0
000364 9508      	RET
                 
                 __LSLD12:
000365 23ee      	TST  R30
000366 2e0e      	MOV  R0,R30
000367 e0e8      	LDI  R30,8
000368 2e1e      	MOV  R1,R30
000369 01fd      	MOVW R30,R26
00036a 01bc      	MOVW R22,R24
00036b f079      	BREQ __LSLD12R
                 __LSLD12S8:
00036c 1401      	CP   R0,R1
00036d f038      	BRLO __LSLD12L
00036e 2f76      	MOV  R23,R22
00036f 2f6f      	MOV  R22,R31
000370 2ffe      	MOV  R31,R30
000371 e0e0      	LDI  R30,0
000372 1801      	SUB  R0,R1
000373 f7c1      	BRNE __LSLD12S8
000374 9508      	RET
                 __LSLD12L:
000375 0fee      	LSL  R30
000376 1fff      	ROL  R31
000377 1f66      	ROL  R22
000378 1f77      	ROL  R23
000379 940a      	DEC  R0
00037a f7d1      	BRNE __LSLD12L
                 __LSLD12R:
00037b 9508      	RET
                 
                 __LSLW2:
00037c 0fee      	LSL  R30
00037d 1fff      	ROL  R31
00037e 0fee      	LSL  R30
00037f 1fff      	ROL  R31
000380 9508      	RET
                 
                 __ASRW4:
000381 95f5      	ASR  R31
000382 95e7      	ROR  R30
                 __ASRW3:
000383 95f5      	ASR  R31
000384 95e7      	ROR  R30
                 __ASRW2:
000385 95f5      	ASR  R31
000386 95e7      	ROR  R30
000387 95f5      	ASR  R31
000388 95e7      	ROR  R30
000389 9508      	RET
                 
                 __DIVW21U:
00038a 2400      	CLR  R0
00038b 2411      	CLR  R1
00038c e190      	LDI  R25,16
                 __DIVW21U1:
00038d 0faa      	LSL  R26
00038e 1fbb      	ROL  R27
00038f 1c00      	ROL  R0
000390 1c11      	ROL  R1
000391 1a0e      	SUB  R0,R30
000392 0a1f      	SBC  R1,R31
000393 f418      	BRCC __DIVW21U2
000394 0e0e      	ADD  R0,R30
000395 1e1f      	ADC  R1,R31
000396 c001      	RJMP __DIVW21U3
                 __DIVW21U2:
000397 60a1      	SBR  R26,1
                 __DIVW21U3:
000398 959a      	DEC  R25
000399 f799      	BRNE __DIVW21U1
00039a 01fd      	MOVW R30,R26
00039b 01d0      	MOVW R26,R0
00039c 9508      	RET
                 
                 __DIVW21:
00039d d012      	RCALL __CHKSIGNW
00039e dfeb      	RCALL __DIVW21U
00039f f40e      	BRTC __DIVW211
0003a0 dfc0      	RCALL __ANEGW1
                 __DIVW211:
0003a1 9508      	RET
                 
                 __MODW21:
0003a2 94e8      	CLT
0003a3 ffb7      	SBRS R27,7
0003a4 c004      	RJMP __MODW211
0003a5 95b1      	NEG  R27
0003a6 95a1      	NEG  R26
0003a7 40b0      	SBCI R27,0
0003a8 9468      	SET
                 __MODW211:
0003a9 fdf7      	SBRC R31,7
0003aa dfb6      	RCALL __ANEGW1
0003ab dfde      	RCALL __DIVW21U
0003ac 01fd      	MOVW R30,R26
0003ad f40e      	BRTC __MODW212
0003ae dfb2      	RCALL __ANEGW1
                 __MODW212:
0003af 9508      	RET
                 
                 __CHKSIGNW:
0003b0 94e8      	CLT
0003b1 fff7      	SBRS R31,7
0003b2 c002      	RJMP __CHKSW1
0003b3 dfad      	RCALL __ANEGW1
0003b4 9468      	SET
                 __CHKSW1:
0003b5 ffb7      	SBRS R27,7
0003b6 c006      	RJMP __CHKSW2
0003b7 95b1      	NEG  R27
0003b8 95a1      	NEG  R26
0003b9 40b0      	SBCI R27,0
0003ba f800      	BLD  R0,0
0003bb 9403      	INC  R0
0003bc fa00      	BST  R0,0
                 __CHKSW2:
0003bd 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega164A register use summary:
r0 :  20 r1 :  10 r2 :   0 r3 :   0 r4 :   1 r5 :   4 r6 :   0 r7 :   4 
r8 :   1 r9 :   6 r10:   3 r11:  10 r12:   7 r13:   2 r14:   0 r15:   2 
r16:  18 r17:  19 r18:   5 r19:   4 r20:   6 r21:   4 r22:  17 r23:  12 
r24:  18 r25:  13 r26:  77 r27:  26 r28:   4 r29:   1 r30: 272 r31:  75 
x  :  14 y  :  56 z  :  11 
Registers used: 31 out of 35 (88.6%)

ATmega164A instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   5 add   :   5 
adiw  :   5 and   :   0 andi  :   7 asr   :   4 bclr  :   0 bld   :   1 
brbc  :   0 brbs  :   0 brcc  :   1 brcs  :   0 break :   0 breq  :   9 
brge  :   2 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   1 
brlt  :   0 brmi  :   0 brne  :  31 brpl  :   0 brsh  :   0 brtc  :   2 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   1 call  :   0 
cbi   :   0 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :   7 cls   :   0 clt   :   2 clv   :   0 clz   :   0 com   :   1 
cp    :   3 cpc   :  18 cpi   :  24 cpse  :   0 dec   :   3 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :  10 inc   :   1 jmp   :  32 ld    :  28 ldd   :  10 ldi   : 107 
lds   :  39 lpm   :   9 lsl   :   8 lsr   :   0 mov   :  42 movw  :  23 
mul   :   0 muls  :   0 mulsu :   0 neg   :   6 nop   :   0 or    :   7 
ori   :   0 out   :  30 pop   :   4 push  :   4 rcall :  46 ret   :  24 
reti  :   1 rjmp  :  29 rol   :  10 ror   :   4 sbc   :   1 sbci  :   8 
sbi   :   1 sbic  :   0 sbis  :   0 sbiw  :  11 sbr   :   1 sbrc  :   1 
sbrs  :   3 sec   :   0 seh   :   0 sei   :   1 sen   :   0 ser   :   0 
ses   :   0 set   :   2 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  31 std   :   4 sts   :  39 sub   :   2 subi  :   6 swap  :   0 
tst   :   3 wdr   :   0 
Instructions used: 58 out of 116 (50.0%)

ATmega164A memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x00077c   1660    256   1916   16384  11.7%
[.dseg] 0x000100 0x0002d6      0    214    214    1024  20.9%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 17 warnings
