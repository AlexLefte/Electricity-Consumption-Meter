;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x01
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x0E
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x04
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x06
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x0C
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x0E
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x02
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=smcr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0

	.DSEG
;void Init();
;void UpdateConsumption();
;void DisplayConsumption();
;void DisplayDigit(char currentDisplay, char digit);
;void UpdateTime();
;void CLS();
;void DisplayInfo();
;void DisplayPowerLevel();
;void DisplayConsumptionDisplayMode();
;void MockPULSE();
;interrupt [19] void timer0_ovf_isr(void)
; 0000 008D {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 008E // Reinitialize Timer 0 value
; 0000 008F TCNT0=0x3C;
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
; 0000 0090 
; 0000 0091 // Read CA
; 0000 0092 CA = (PIND & 0x80) >> 7;
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
; 0000 0093 
; 0000 0094 // DisplayInfo
; 0000 0095 DisplayInfo();
;PCODE: $00000017 VOL: 0
; 0000 0096 
; 0000 0097 // Update mock pulse
; 0000 0098 MockPULSE();
;PCODE: $00000018 VOL: 0
; 0000 0099 
; 0000 009A // Check for pulses coming from ADSP
; 0000 009B UpdateConsumption();
;PCODE: $00000019 VOL: 0
; 0000 009C }
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;void main(void)
; 0000 00A0 {
;PCODE: $0000001D VOL: 0
; 0000 00A1 // Declare your local variables here
; 0000 00A2 
; 0000 00A3 // Crystal Oscillator division factor: 1
; 0000 00A4 #pragma optsize-
; 0000 00A5 CLKPR=(1<<CLKPCE);
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
; 0000 00A6 CLKPR=(0<<CLKPCE) | (0<<CLKPS3) | (0<<CLKPS2) | (0<<CLKPS1) | (0<<CLKPS0);
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
; 0000 00A7 #ifdef _OPTIMIZE_SIZE_
; 0000 00A8 #pragma optsize+
; 0000 00A9 #endif
; 0000 00AA 
; 0000 00AB // Input/Output Ports initialization
; 0000 00AC // Port A initialization
; 0000 00AD // Function: Bit7=Out Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 00AE DDRA=(1<<DDA7) | (0<<DDA6) | (0<<DDA5) | (0<<DDA4) | (0<<DDA3) | (0<<DDA2) | (0<<DDA1) | (0<<DDA0);
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
; 0000 00AF // State: Bit7=1 Bit6=P Bit5=P Bit4=P Bit3=P Bit2=P Bit1=P Bit0=P
; 0000 00B0 PORTA=(1<<PORTA7) | (1<<PORTA6) | (1<<PORTA5) | (1<<PORTA4) | (1<<PORTA3) | (1<<PORTA2) | (1<<PORTA1) | (1<<PORTA0);
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
; 0000 00B1 
; 0000 00B2 // Port B initialization
; 0000 00B3 // Function: Bit7=Out Bit6=Out Bit5=Out Bit4=Out Bit3=Out Bit2=Out Bit1=Out Bit0=Out
; 0000 00B4 DDRB=(1<<DDB7) | (1<<DDB6) | (1<<DDB5) | (1<<DDB4) | (1<<DDB3) | (1<<DDB2) | (1<<DDB1) | (1<<DDB0);
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
; 0000 00B5 // State: Bit7=1 Bit6=1 Bit5=1 Bit4=1 Bit3=1 Bit2=1 Bit1=1 Bit0=1
; 0000 00B6 PORTB=(1<<PORTB7) | (1<<PORTB6) | (1<<PORTB5) | (1<<PORTB4) | (1<<PORTB3) | (1<<PORTB2) | (1<<PORTB1) | (1<<PORTB0);
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
; 0000 00B7 
; 0000 00B8 // Port C initialization
; 0000 00B9 // Function: Bit7=Out Bit6=Out Bit5=Out Bit4=Out Bit3=Out Bit2=Out Bit1=Out Bit0=Out
; 0000 00BA DDRC=(1<<DDC7) | (1<<DDC6) | (1<<DDC5) | (1<<DDC4) | (1<<DDC3) | (1<<DDC2) | (1<<DDC1) | (1<<DDC0);
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
; 0000 00BB // State: Bit7=1 Bit6=1 Bit5=1 Bit4=1 Bit3=1 Bit2=1 Bit1=1 Bit0=1
; 0000 00BC PORTC=(1<<PORTC7) | (1<<PORTC6) | (1<<PORTC5) | (1<<PORTC4) | (1<<PORTC3) | (1<<PORTC2) | (1<<PORTC1) | (1<<PORTC0);
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
; 0000 00BD 
; 0000 00BE // Port D initialization
; 0000 00BF // Function: Bit7=In Bit6=In Bit5=Out Bit4=In Bit3=Out Bit2=Out Bit1=Out Bit0=Out
; 0000 00C0 DDRD=(0<<DDD7) | (0<<DDD6) | (0<<DDD5) | (0<<DDD4) | (1<<DDD3) | (1<<DDD2) | (1<<DDD1) | (1<<DDD0);
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
; 0000 00C1 // State: Bit7=T Bit6=T Bit5=1 Bit4=0 Bit3=1 Bit2=1 Bit1=1 Bit0=1
; 0000 00C2 PORTD=(1<<PORTD7) | (1<<PORTD6) | (1<<PORTD5) | (1<<PORTD4) | (1<<PORTD3) | (1<<PORTD2) | (1<<PORTD1) | (1<<PORTD0);
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
; 0000 00C3 
; 0000 00C4 // Timer/Counter 0 initialization
; 0000 00C5 // Clock source: System Clock
; 0000 00C6 // Clock value: 9.766 kHz
; 0000 00C7 // Mode: Normal top=0xFF
; 0000 00C8 // OC0A output: Disconnected
; 0000 00C9 // OC0B output: Disconnected
; 0000 00CA // Timer Period: 20.07 ms
; 0000 00CB TCCR0A=(0<<COM0A1) | (0<<COM0A0) | (0<<COM0B1) | (0<<COM0B0) | (0<<WGM01) | (0<<WGM00);
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
; 0000 00CC TCCR0B=(0<<WGM02) | (1<<CS02) | (0<<CS01) | (1<<CS00);
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
; 0000 00CD TCNT0=0x3C;
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
; 0000 00CE OCR0A=0x00;
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
; 0000 00CF OCR0B=0x00;
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
; 0000 00D0 
; 0000 00D1 // Timer/Counter 1 initialization
; 0000 00D2 // Clock source: System Clock
; 0000 00D3 // Clock value: Timer1 Stopped
; 0000 00D4 // Mode: Normal top=0xFFFF
; 0000 00D5 // OC1A output: Disconnected
; 0000 00D6 // OC1B output: Disconnected
; 0000 00D7 // Noise Canceler: Off
; 0000 00D8 // Input Capture on Falling Edge
; 0000 00D9 // Timer1 Overflow Interrupt: Off
; 0000 00DA // Input Capture Interrupt: Off
; 0000 00DB // Compare A Match Interrupt: Off
; 0000 00DC // Compare B Match Interrupt: Off
; 0000 00DD TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
; 0000 00DE TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (0<<CS11) | (0<<CS10);
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
; 0000 00DF TCNT1H=0x00;
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
; 0000 00E0 TCNT1L=0x00;
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
; 0000 00E1 ICR1H=0x00;
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
; 0000 00E2 ICR1L=0x00;
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
; 0000 00E3 OCR1AH=0x00;
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
; 0000 00E4 OCR1AL=0x00;
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
; 0000 00E5 OCR1BH=0x00;
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
; 0000 00E6 OCR1BL=0x00;
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
; 0000 00E7 
; 0000 00E8 // Timer/Counter 2 initialization
; 0000 00E9 // Clock source: System Clock
; 0000 00EA // Clock value: Timer2 Stopped
; 0000 00EB // Mode: Normal top=0xFF
; 0000 00EC // OC2A output: Disconnected
; 0000 00ED // OC2B output: Disconnected
; 0000 00EE ASSR=(0<<EXCLK) | (0<<AS2);
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
; 0000 00EF TCCR2A=(0<<COM2A1) | (0<<COM2A0) | (0<<COM2B1) | (0<<COM2B0) | (0<<WGM21) | (0<<WGM20);
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
; 0000 00F0 TCCR2B=(0<<WGM22) | (0<<CS22) | (0<<CS21) | (0<<CS20);
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
; 0000 00F1 TCNT2=0x00;
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
; 0000 00F2 OCR2A=0x00;
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
; 0000 00F3 OCR2B=0x00;
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
; 0000 00F4 
; 0000 00F5 // Timer/Counter 0 Interrupt(s) initialization
; 0000 00F6 TIMSK0=(0<<OCIE0B) | (0<<OCIE0A) | (1<<TOIE0);
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
; 0000 00F7 
; 0000 00F8 // Timer/Counter 1 Interrupt(s) initialization
; 0000 00F9 TIMSK1=(0<<ICIE1) | (0<<OCIE1B) | (0<<OCIE1A) | (0<<TOIE1);
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
; 0000 00FA 
; 0000 00FB // Timer/Counter 2 Interrupt(s) initialization
; 0000 00FC TIMSK2=(0<<OCIE2B) | (0<<OCIE2A) | (0<<TOIE2);
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
; 0000 00FD 
; 0000 00FE // External Interrupt(s) initialization
; 0000 00FF // INT0: Off
; 0000 0100 // INT1: Off
; 0000 0101 // INT2: Off
; 0000 0102 // Interrupt on any change on pins PCINT0-7: Off
; 0000 0103 // Interrupt on any change on pins PCINT8-15: Off
; 0000 0104 // Interrupt on any change on pins PCINT16-23: Off
; 0000 0105 // Interrupt on any change on pins PCINT24-31: Off
; 0000 0106 EICRA=(0<<ISC21) | (0<<ISC20) | (0<<ISC11) | (0<<ISC10) | (0<<ISC01) | (0<<ISC00);
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
; 0000 0107 EIMSK=(0<<INT2) | (0<<INT1) | (0<<INT0);
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
; 0000 0108 PCICR=(0<<PCIE3) | (0<<PCIE2) | (0<<PCIE1) | (0<<PCIE0);
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
; 0000 0109 
; 0000 010A // USART0 initialization
; 0000 010B // USART0 disabled
; 0000 010C UCSR0B=(0<<RXCIE0) | (0<<TXCIE0) | (0<<UDRIE0) | (0<<RXEN0) | (0<<TXEN0) | (0<<UCSZ02) | (0<<RXB80) | (0<<TXB80);
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
; 0000 010D 
; 0000 010E // USART1 initialization
; 0000 010F // USART1 disabled
; 0000 0110 UCSR1B=(0<<RXCIE1) | (0<<TXCIE1) | (0<<UDRIE1) | (0<<RXEN1) | (0<<TXEN1) | (0<<UCSZ12) | (0<<RXB81) | (0<<TXB81);
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
; 0000 0111 
; 0000 0112 // Analog Comparator initialization
; 0000 0113 // Analog Comparator: Off
; 0000 0114 // The Analog Comparator's positive input is
; 0000 0115 // connected to the AIN0 pin
; 0000 0116 // The Analog Comparator's negative input is
; 0000 0117 // connected to the AIN1 pin
; 0000 0118 ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
; 0000 0119 ADCSRB=(0<<ACME);
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
; 0000 011A // Digital input buffer on AIN0: On
; 0000 011B // Digital input buffer on AIN1: On
; 0000 011C DIDR1=(0<<AIN0D) | (0<<AIN1D);
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
; 0000 011D 
; 0000 011E // ADC initialization
; 0000 011F // ADC disabled
; 0000 0120 ADCSRA=(0<<ADEN) | (0<<ADSC) | (0<<ADATE) | (0<<ADIF) | (0<<ADIE) | (0<<ADPS2) | (0<<ADPS1) | (0<<ADPS0);
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
; 0000 0121 
; 0000 0122 // SPI initialization
; 0000 0123 // SPI disabled
; 0000 0124 SPCR=(0<<SPIE) | (0<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
; 0000 0125 
; 0000 0126 // TWI initialization
; 0000 0127 // TWI disabled
; 0000 0128 TWCR=(0<<TWEA) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWEN) | (0<<TWIE);
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
; 0000 0129 
; 0000 012A // Globally enable interrupts
; 0000 012B #asm("sei")
;PCODE: $00000078 VOL: 0
; 0000 012C 
; 0000 012D // Initialize the device
; 0000 012E Init();
;PCODE: $00000079 VOL: 0
; 0000 012F 
; 0000 0130 while (1)
;PCODE: $0000007A VOL: 0
; 0000 0131 {
; 0000 0132 // Display the consumption
; 0000 0133 DisplayConsumption();
;PCODE: $0000007B VOL: 0
; 0000 0134 
; 0000 0135 // Wait for interruptions
; 0000 0136 }
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
; 0000 0137 }
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
;void Init()
; 0000 013B {
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
; 0000 013C // Setting initial states = 0
; 0000 013D Q = Q1 = S1 = S2 = S3 = S_PULSE = 0;
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
; 0000 013E 
; 0000 013F // Setting the working mode
; 0000 0140 MODE = 0;
;PCODE: $0000008A VOL: 0
; 0000 0141 }
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;void UpdateConsumption()
; 0000 0144 {
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
; 0000 0145 // Identify PULSE
; 0000 0146 // PULSE = PINA & 0x01;
; 0000 0147 
; 0000 0148 /* switch(S2)
; 0000 0149 {
; 0000 014A case 0:
; 0000 014B {
; 0000 014C char cntP = 0;
; 0000 014D 
; 0000 014E // PD6 -> Sending request from ADSP
; 0000 014F // PD7 -> Reading ack from ATmega164A
; 0000 0150 
; 0000 0151 // Check if sending request flag is up
; 0000 0152 // (Receiving sending request on PD6)
; 0000 0153 if (PORTD && 0x40)
; 0000 0154 {
; 0000 0155 // Send reading ack
; 0000 0156 // (Sending ack on PD7)
; 0000 0157 PORTD |= 0x80;
; 0000 0158 
; 0000 0159 // Going further to reading the pulses
; 0000 015A S2 = 1;
; 0000 015B }
; 0000 015C break;
; 0000 015D }
; 0000 015E case 1:
; 0000 015F {
; 0000 0160 // If PULSE is on, start counting
; 0000 0161 if (PULSE)
; 0000 0162 {
; 0000 0163 // Increment cntP
; 0000 0164 cntP += 1;
; 0000 0165 
; 0000 0166 // Reset reading flag
; 0000 0167 PORTD &= 0x7f;
; 0000 0168 
; 0000 0169 // Go further if the pulse period has passed,
; 0000 016A // otherwise go back wait for sensding ack again.
; 0000 016B S2 = (cntP == DP) ? 2 : 1;
; 0000 016C }
; 0000 016D break;
; 0000 016E }
; 0000 016F case 2:
; 0000 0170 {
; 0000 0171 if (~PULSE)
; 0000 0172 {
; 0000 0173 // Update current consumption range
; 0000 0174 Q = CLS();
; 0000 0175 
; 0000 0176 // Increment consumption
; 0000 0177 CONS[Q] += 1;
; 0000 0178 
; 0000 0179 // Wait for another pulse
; 0000 017A S2 = 0;
; 0000 017B }
; 0000 017C break;
; 0000 017D }
; 0000 017E } */
; 0000 017F 
; 0000 0180 
; 0000 0181 // Read power level
; 0000 0182 // PowerLevel = (PINA & 0xfe) >> 1;
; 0000 0183 
; 0000 0184 // For testing purposes, we will assume PowerLevel = 6 kW
; 0000 0185 PowerLevel = 6;
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
; 0000 0186 
; 0000 0187 switch(S2)
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
; 0000 0188 {
; 0000 0189 case 0:
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
; 0000 018A {
; 0000 018B // If PULSE is on, start counting
; 0000 018C if (PULSE)
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
; 0000 018D {
; 0000 018E // Increment cntP
; 0000 018F cntP += 1;
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
; 0000 0190 
; 0000 0191 // Reset reading flag
; 0000 0192 // PORTD &= 0x7f;
; 0000 0193 
; 0000 0194 // Go further if the pulse period has passed,
; 0000 0195 // otherwise go back wait for sensding ack again.
; 0000 0196 S2 = (cntP == DP) ? 1 : 0;
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
; 0000 0197 }
; 0000 0198 break;
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
; 0000 0199 }
; 0000 019A case 1:
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
; 0000 019B {
; 0000 019C if (~PULSE)
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
; 0000 019D {
; 0000 019E // Update current consumption range
; 0000 019F CLS();
;PCODE: $000000AE VOL: 0
; 0000 01A0 
; 0000 01A1 // Increment consumption
; 0000 01A2 if (MODE == 0)
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
; 0000 01A3 {
; 0000 01A4 CONSUM[Q] += 1;    // Working range on
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
; 0000 01A5 }
; 0000 01A6 else
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
; 0000 01A7 {
; 0000 01A8 CONSUM[4] += 1;    // Working range off
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
; 0000 01A9 }
;PCODE: $000000C0 VOL: 0
; 0000 01AA 
; 0000 01AB // Wait for another pulse
; 0000 01AC S2 = 0;
;PCODE: $000000C1 VOL: 0
; 0000 01AD cntP = 0;
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
; 0000 01AE }
; 0000 01AF break;
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
; 0000 01B0 }
; 0000 01B1 }
;PCODE: $000000C6 VOL: 0
; 0000 01B2 }
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
;void MockPULSE()
; 0000 01B7 {
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
; 0000 01B8 switch(S_PULSE)
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
; 0000 01B9 {
; 0000 01BA case 0:
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
; 0000 01BB {
; 0000 01BC cntMockPulse = 0;
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
; 0000 01BD PULSE = 1;
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
; 0000 01BE S_PULSE = 1;
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
; 0000 01BF break;
;PCODE: $000000D5 VOL: 0
; 0000 01C0 }
; 0000 01C1 case 1:
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
; 0000 01C2 {
; 0000 01C3 cntMockPulse += 1;
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
; 0000 01C4 PULSE = 0;
;PCODE: $000000DD VOL: 0
; 0000 01C5 if (cntMockPulse == 49)
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
; 0000 01C6 S_PULSE = 0;
;PCODE: $000000E1 VOL: 0
; 0000 01C7 break;
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
; 0000 01C8 }
; 0000 01C9 }
;PCODE: $000000E4 VOL: 0
; 0000 01CA }
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
;void DisplayConsumption()
; 0000 01CD {
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
; 0000 01CE // We assume:
; 0000 01CF // PORTC: PC0 - PC6 -> 7 segments (A-G)
; 0000 01D0 // PORTD: PD0 - PD3 -> select the common cathode for each digit (multiplexing)
; 0000 01D1 // PD3 - C4, PD2 - C3, PD1 - C2, PD0 - C1
; 0000 01D2 // Q - consumption range:
; 0000 01D3 // 0 -> 00:00 - H1:00
; 0000 01D4 // 1 -> H1:00 - H2:00               (MON - FRI)
; 0000 01D5 // 2 -> H2:00 - 00:00 (next day)
; 0000 01D6 // 3 -> SAT - SUN
; 0000 01D7 
; 0000 01D8 // The actual approach:
; 0000 01D9 // Each main loop iteration we multiplex the digits and display one at a time
; 0000 01DA 
; 0000 01DB // If CA is pressed -> display total consumption,
; 0000 01DC // else -> display consumption based on current range.
; 0000 01DD int cons = (MODE) ?  CONSUM[4] : CONSUM[Q1];
; 0000 01DE 
; 0000 01DF // Compute and display C4
; 0000 01E0 C4 = cons / 1000;
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
;	cons -> R16,R17
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
; 0000 01E1 cons %= 1000;
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
; 0000 01E2 DisplayDigit(4, C4);
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
; 0000 01E3 
; 0000 01E4 // Compute and display C3
; 0000 01E5 C3 = cons / 100;
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
; 0000 01E6 cons %= 100;
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
; 0000 01E7 DisplayDigit(3, C3);
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
; 0000 01E8 
; 0000 01E9 // Compute and display C2
; 0000 01EA C2 = cons / 10;
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
; 0000 01EB DisplayDigit(2, C2);
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
;PCODE: $0000011B VOL: 0
; 0000 01EC 
; 0000 01ED // Compute and display C1
; 0000 01EE C1 = cons % 10;
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 0
;PCODE: $0000011F VOL: 0
; 0000 01EF DisplayDigit(1, C1);
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
; 0000 01F0 }
;PCODE: $00000124 VOL: 0
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
;void DisplayDigit(char currentDisplay, char digit)
; 0000 01F3 {
;PCODE: $00000127 VOL: 0
;PCODE: $00000128 VOL: 0
; 0000 01F4 // Select the desired display (turn on the pin
; 0000 01F5 // corresponding to the desired digit (C4/C3/C2/C1)
; 0000 01F6 char output;
; 0000 01F7 
; 0000 01F8 // Set PORTC pins to the corresponding digit
; 0000 01F9 // PORTC = DIGITS[digit];
; 0000 01FA 
; 0000 01FB switch (currentDisplay)
;PCODE: $00000129 VOL: 0
;PCODE: $0000012A VOL: 0
;PCODE: $0000012B VOL: 0
;PCODE: $0000012C VOL: 0
;	currentDisplay -> R19
;	digit -> R16
;	output -> R17
;PCODE: $0000012D VOL: 0
;PCODE: $0000012E VOL: 0
; 0000 01FC {
; 0000 01FD case 4:
;PCODE: $0000012F VOL: 0
;PCODE: $00000130 VOL: 0
;PCODE: $00000131 VOL: 0
; 0000 01FE // Turn PD3 on
; 0000 01FF //output &= 0b00000111;
; 0000 0200 output = 0x08;
;PCODE: $00000132 VOL: 0
;PCODE: $00000133 VOL: 0
; 0000 0201 break;
;PCODE: $00000134 VOL: 0
; 0000 0202 case 3:
;PCODE: $00000135 VOL: 0
;PCODE: $00000136 VOL: 0
;PCODE: $00000137 VOL: 0
;PCODE: $00000138 VOL: 0
; 0000 0203 // Turn PD2 on
; 0000 0204 // output &= 0b00001011;
; 0000 0205 output = 0x04;
;PCODE: $00000139 VOL: 0
;PCODE: $0000013A VOL: 0
; 0000 0206 break;
;PCODE: $0000013B VOL: 0
; 0000 0207 case 2:
;PCODE: $0000013C VOL: 0
;PCODE: $0000013D VOL: 0
;PCODE: $0000013E VOL: 0
;PCODE: $0000013F VOL: 0
; 0000 0208 // Turn PD1 on
; 0000 0209 output = 0x02;
;PCODE: $00000140 VOL: 0
;PCODE: $00000141 VOL: 0
; 0000 020A break;
;PCODE: $00000142 VOL: 0
; 0000 020B case 1:
;PCODE: $00000143 VOL: 0
;PCODE: $00000144 VOL: 0
;PCODE: $00000145 VOL: 0
;PCODE: $00000146 VOL: 0
; 0000 020C // Turn PD0 on
; 0000 020D output = 0x01;
;PCODE: $00000147 VOL: 0
;PCODE: $00000148 VOL: 0
; 0000 020E break;
;PCODE: $00000149 VOL: 0
; 0000 020F }
;PCODE: $0000014A VOL: 0
; 0000 0210 
; 0000 0211 // Delete PD0-3
; 0000 0212 PORTD &= 0xF0;
;PCODE: $0000014B VOL: 0
;PCODE: $0000014C VOL: 0
;PCODE: $0000014D VOL: 0
; 0000 0213 
; 0000 0214 // Assign output to PORTC in order to select the desired display;
; 0000 0215 PORTD |= output;
;PCODE: $0000014E VOL: 0
;PCODE: $0000014F VOL: 0
;PCODE: $00000150 VOL: 0
; 0000 0216 
; 0000 0217 // Set PORTC pins to the corresponding digit
; 0000 0218 PORTC = DIGITS[digit];
;PCODE: $00000151 VOL: 0
;PCODE: $00000152 VOL: 0
;PCODE: $00000153 VOL: 0
;PCODE: $00000154 VOL: 0
;PCODE: $00000155 VOL: 0
; 0000 0219 
; 0000 021A // Add delay (10 us)
; 0000 021B // _display_us(10);
; 0000 021C }
;PCODE: $00000156 VOL: 0
;PCODE: $00000157 VOL: 0
;PCODE: $00000158 VOL: 0
;PCODE: $00000159 VOL: 0
;void UpdateTime(){
; 0000 021F void UpdateTime(){
;PCODE: $0000015A VOL: 0
;PCODE: $0000015B VOL: 0
; 0000 0220 cnt_time += 1; //incrementare contor de timp
;PCODE: $0000015C VOL: 0
; 0000 0221 if(cnt_time != T_SEC) return;
;PCODE: $0000015D VOL: 0
;PCODE: $0000015E VOL: 0
;PCODE: $0000015F VOL: 0
;PCODE: $00000160 VOL: 0
; 0000 0222 
; 0000 0223 cnt_time = 0; // se reseteaza contorul
;PCODE: $00000161 VOL: 0
;PCODE: $00000162 VOL: 0
; 0000 0224 S+=1;  //incrementeaza contor secunde
;PCODE: $00000163 VOL: 0
;PCODE: $00000164 VOL: 0
;PCODE: $00000165 VOL: 0
; 0000 0225 
; 0000 0226 if(S!=60) return;
;PCODE: $00000166 VOL: 0
;PCODE: $00000167 VOL: 0
;PCODE: $00000168 VOL: 0
;PCODE: $00000169 VOL: 0
; 0000 0227 S = 0;//se reseteaza nr de secunde
;PCODE: $0000016A VOL: 0
;PCODE: $0000016B VOL: 0
;PCODE: $0000016C VOL: 0
; 0000 0228 M += 1; //incrementeaza contor minute
;PCODE: $0000016D VOL: 0
;PCODE: $0000016E VOL: 0
;PCODE: $0000016F VOL: 0
; 0000 0229 
; 0000 022A if(M!=60) return;
;PCODE: $00000170 VOL: 0
;PCODE: $00000171 VOL: 0
;PCODE: $00000172 VOL: 0
;PCODE: $00000173 VOL: 0
; 0000 022B M = 0;
;PCODE: $00000174 VOL: 0
;PCODE: $00000175 VOL: 0
;PCODE: $00000176 VOL: 0
; 0000 022C H += 1;
;PCODE: $00000177 VOL: 0
;PCODE: $00000178 VOL: 0
;PCODE: $00000179 VOL: 0
; 0000 022D 
; 0000 022E if(H!=24) return;
;PCODE: $0000017A VOL: 0
;PCODE: $0000017B VOL: 0
;PCODE: $0000017C VOL: 0
;PCODE: $0000017D VOL: 0
; 0000 022F H = 0;
;PCODE: $0000017E VOL: 0
;PCODE: $0000017F VOL: 0
;PCODE: $00000180 VOL: 0
; 0000 0230 Z += 1;
;PCODE: $00000181 VOL: 0
;PCODE: $00000182 VOL: 0
;PCODE: $00000183 VOL: 0
; 0000 0231 
; 0000 0232 if (Z == 7) Z = 0;
;PCODE: $00000184 VOL: 0
;PCODE: $00000185 VOL: 0
;PCODE: $00000186 VOL: 0
;PCODE: $00000187 VOL: 0
;PCODE: $00000188 VOL: 0
; 0000 0233 return;
;PCODE: $00000189 VOL: 0
;PCODE: $0000018A VOL: 0
; 0000 0234 }
;PCODE: $0000018B VOL: 0
;void CLS()
; 0000 0237 {
;PCODE: $0000018C VOL: 0
;PCODE: $0000018D VOL: 0
; 0000 0238 char out;
; 0000 0239 
; 0000 023A //exemplu
; 0000 023B // Ziua 3, ora 8, min 6, sec 3
; 0000 023C // 0x03080603
; 0000 023D long int now = (Z<<24) | (H<<16) | (M<<8) | S;
; 0000 023E 
; 0000 023F long int *adr = TABA[Q];
; 0000 0240 char ready = 0;
; 0000 0241 int i = 0;
; 0000 0242 
; 0000 0243 while (!ready)
;PCODE: $0000018E VOL: 0
;PCODE: $0000018F VOL: 0
;	out -> R17
;	now -> Y+6
;	*adr -> R18,R19
;	ready -> R16
;	i -> R20,R21
;PCODE: $00000190 VOL: 0
;PCODE: $00000191 VOL: 0
;PCODE: $00000192 VOL: 0
;PCODE: $00000193 VOL: 0
;PCODE: $00000194 VOL: 0
;PCODE: $00000195 VOL: 0
;PCODE: $00000196 VOL: 0
;PCODE: $00000197 VOL: 0
;PCODE: $00000198 VOL: 0
;PCODE: $00000199 VOL: 0
;PCODE: $0000019A VOL: 0
;PCODE: $0000019B VOL: 0
;PCODE: $0000019C VOL: 0
;PCODE: $0000019D VOL: 0
;PCODE: $0000019E VOL: 0
;PCODE: $0000019F VOL: 0
;PCODE: $000001A0 VOL: 0
;PCODE: $000001A1 VOL: 0
;PCODE: $000001A2 VOL: 0
;PCODE: $000001A3 VOL: 0
;PCODE: $000001A4 VOL: 0
;PCODE: $000001A5 VOL: 0
;PCODE: $000001A6 VOL: 0
;PCODE: $000001A7 VOL: 0
;PCODE: $000001A8 VOL: 0
;PCODE: $000001A9 VOL: 0
;PCODE: $000001AA VOL: 0
;PCODE: $000001AB VOL: 0
;PCODE: $000001AC VOL: 0
;PCODE: $000001AD VOL: 0
; 0000 0244 {
; 0000 0245 if (now == adr[i]) {
;PCODE: $000001AE VOL: 0
;PCODE: $000001AF VOL: 0
;PCODE: $000001B0 VOL: 0
;PCODE: $000001B1 VOL: 0
;PCODE: $000001B2 VOL: 0
;PCODE: $000001B3 VOL: 0
;PCODE: $000001B4 VOL: 0
;PCODE: $000001B5 VOL: 0
; 0000 0246 Q = adr[i + 1];
;PCODE: $000001B6 VOL: 0
;PCODE: $000001B7 VOL: 0
;PCODE: $000001B8 VOL: 0
;PCODE: $000001B9 VOL: 0
;PCODE: $000001BA VOL: 0
;PCODE: $000001BB VOL: 0
; 0000 0247 ready = 1;
;PCODE: $000001BC VOL: 0
;PCODE: $000001BD VOL: 0
; 0000 0248 }
; 0000 0249 else if (adr[i] == Ter) ready = 1;
;PCODE: $000001BE VOL: 0
;PCODE: $000001BF VOL: 0
;PCODE: $000001C0 VOL: 0
;PCODE: $000001C1 VOL: 0
;PCODE: $000001C2 VOL: 0
;PCODE: $000001C3 VOL: 0
;PCODE: $000001C4 VOL: 0
;PCODE: $000001C5 VOL: 0
;PCODE: $000001C6 VOL: 0
;PCODE: $000001C7 VOL: 0
;PCODE: $000001C8 VOL: 0
; 0000 024A else i = i+2;
;PCODE: $000001C9 VOL: 0
;PCODE: $000001CA VOL: 0
;PCODE: $000001CB VOL: 0
;PCODE: $000001CC VOL: 0
; 0000 024B }
;PCODE: $000001CD VOL: 0
;PCODE: $000001CE VOL: 0
;PCODE: $000001CF VOL: 0
;PCODE: $000001D0 VOL: 0
; 0000 024C 
; 0000 024D out = Tout[Q];
;PCODE: $000001D1 VOL: 0
;PCODE: $000001D2 VOL: 0
;PCODE: $000001D3 VOL: 0
;PCODE: $000001D4 VOL: 0
; 0000 024E }
;PCODE: $000001D5 VOL: 0
;PCODE: $000001D6 VOL: 0
;PCODE: $000001D7 VOL: 0
;PCODE: $000001D8 VOL: 0
;void DisplayInfo()
; 0000 0251 {
;PCODE: $000001D9 VOL: 0
;PCODE: $000001DA VOL: 0
; 0000 0252 DisplayConsumptionDisplayMode();
;PCODE: $000001DB VOL: 0
; 0000 0253 DisplayPowerLevel();
;PCODE: $000001DC VOL: 0
; 0000 0254 }
;PCODE: $000001DD VOL: 0
;PCODE: $000001DE VOL: 0
;void DisplayPowerLevel()
; 0000 0257 {
;PCODE: $000001DF VOL: 0
;PCODE: $000001E0 VOL: 0
; 0000 0258 char out;
; 0000 0259 
; 0000 025A //   if (!PowerLevel)          PowerLevel = 0 kW
; 0000 025B //   {
; 0000 025C //        out = CLC_LEVEL[0];
; 0000 025D //   }
; 0000 025E //   else if (PowerLevel < 2.5)    0 < PowerLevel < 2.5 kW
; 0000 025F //   {
; 0000 0260 //        out = CLC_LEVEL[1];
; 0000 0261 //   }
; 0000 0262 //   else if (PowerLevel < 5)      2.5 <= PowerLevel < 5 kW
; 0000 0263 //   {
; 0000 0264 //        out = CLC_LEVEL[2];
; 0000 0265 //   }
; 0000 0266 //   else if (PowerLevel < 7.5)    5 <= PowerLevel < 7.5 kW
; 0000 0267 //   {
; 0000 0268 //        out = CLC_LEVEL[3];
; 0000 0269 //   }
; 0000 026A //   else                          PowerLvel >= 7.5 kW
; 0000 026B //   {
; 0000 026C //        out = CLC_LEVEL[4];
; 0000 026D //   }
; 0000 026E 
; 0000 026F if (!PowerLevel)         // PowerLevel = 0 kW
;PCODE: $000001E1 VOL: 0
;	out -> R17
;PCODE: $000001E2 VOL: 0
;PCODE: $000001E3 VOL: 0
;PCODE: $000001E4 VOL: 0
; 0000 0270 {
; 0000 0271 out = CLC_LEVEL[0];
;PCODE: $000001E5 VOL: 0
;PCODE: $000001E6 VOL: 0
; 0000 0272 }
; 0000 0273 else if (PowerLevel < 3)   // 0 < PowerLevel < 3 kW
;PCODE: $000001E7 VOL: 0
;PCODE: $000001E8 VOL: 0
;PCODE: $000001E9 VOL: 0
;PCODE: $000001EA VOL: 0
;PCODE: $000001EB VOL: 0
; 0000 0274 {
; 0000 0275 out = CLC_LEVEL[1];
;PCODE: $000001EC VOL: 0
;PCODE: $000001ED VOL: 0
;PCODE: $000001EE VOL: 0
; 0000 0276 }
; 0000 0277 else if (PowerLevel < 6)     // 3 <= PowerLevel < 6 kW
;PCODE: $000001EF VOL: 0
;PCODE: $000001F0 VOL: 0
;PCODE: $000001F1 VOL: 0
;PCODE: $000001F2 VOL: 0
;PCODE: $000001F3 VOL: 0
; 0000 0278 {
; 0000 0279 out = CLC_LEVEL[2];
;PCODE: $000001F4 VOL: 0
;PCODE: $000001F5 VOL: 0
;PCODE: $000001F6 VOL: 0
; 0000 027A }
; 0000 027B else                         // PowerLvel >= 6 kW
;PCODE: $000001F7 VOL: 0
;PCODE: $000001F8 VOL: 0
; 0000 027C {
; 0000 027D out = CLC_LEVEL[3];
;PCODE: $000001F9 VOL: 0
;PCODE: $000001FA VOL: 0
;PCODE: $000001FB VOL: 0
; 0000 027E }
;PCODE: $000001FC VOL: 0
;PCODE: $000001FD VOL: 0
;PCODE: $000001FE VOL: 0
; 0000 027F 
; 0000 0280 // Delete PB7-PB5
; 0000 0281 PORTB &= 0x1f;
;PCODE: $000001FF VOL: 0
;PCODE: $00000200 VOL: 0
;PCODE: $00000201 VOL: 0
; 0000 0282 
; 0000 0283 // Display out on PB7-PB5
; 0000 0284 PORTB |= out;
;PCODE: $00000202 VOL: 0
;PCODE: $00000203 VOL: 0
;PCODE: $00000204 VOL: 0
; 0000 0285 }
;PCODE: $00000205 VOL: 0
;PCODE: $00000206 VOL: 0
;PCODE: $00000207 VOL: 0
;void DisplayConsumptionDisplayMode()
; 0000 0288 {
;PCODE: $00000208 VOL: 0
;PCODE: $00000209 VOL: 0
; 0000 0289 char out;
; 0000 028A 
; 0000 028B if (MODE == 1)  // Working without ranges
;PCODE: $0000020A VOL: 0
;	out -> R17
;PCODE: $0000020B VOL: 0
;PCODE: $0000020C VOL: 0
;PCODE: $0000020D VOL: 0
; 0000 028C {
; 0000 028D // Clear PB4-0
; 0000 028E PORTB &= 0xE0;
;PCODE: $0000020E VOL: 0
;PCODE: $0000020F VOL: 0
;PCODE: $00000210 VOL: 0
; 0000 028F 
; 0000 0290 // Display on PB4-0
; 0000 0291 PORTB |= 0x10;
;PCODE: $00000211 VOL: 0
;PCODE: $00000212 VOL: 0
; 0000 0292 
; 0000 0293 return;
;PCODE: $00000213 VOL: 0
;PCODE: $00000214 VOL: 0
; 0000 0294 }
; 0000 0295 
; 0000 0296 switch(S3)
;PCODE: $00000215 VOL: 0
;PCODE: $00000216 VOL: 0
;PCODE: $00000217 VOL: 0
; 0000 0297 {
; 0000 0298 case 0:
;PCODE: $00000218 VOL: 0
;PCODE: $00000219 VOL: 0
; 0000 0299 {
; 0000 029A if (CA == 0)            // Pressed CA
;PCODE: $0000021A VOL: 0
;PCODE: $0000021B VOL: 0
;PCODE: $0000021C VOL: 0
; 0000 029B {
; 0000 029C S3 = 1;
;PCODE: $0000021D VOL: 0
;PCODE: $0000021E VOL: 0
; 0000 029D }
; 0000 029E break;
;PCODE: $0000021F VOL: 0
;PCODE: $00000220 VOL: 0
; 0000 029F }
; 0000 02A0 case 1:                 // Released CA
;PCODE: $00000221 VOL: 0
;PCODE: $00000222 VOL: 0
;PCODE: $00000223 VOL: 0
;PCODE: $00000224 VOL: 0
; 0000 02A1 {
; 0000 02A2 if (CA)
;PCODE: $00000225 VOL: 0
;PCODE: $00000226 VOL: 0
;PCODE: $00000227 VOL: 0
; 0000 02A3 {
; 0000 02A4 S3 = 2;
;PCODE: $00000228 VOL: 0
;PCODE: $00000229 VOL: 0
; 0000 02A5 Q1 = 1;
;PCODE: $0000022A VOL: 0
;PCODE: $0000022B VOL: 0
; 0000 02A6 }
; 0000 02A7 break;
;PCODE: $0000022C VOL: 0
;PCODE: $0000022D VOL: 0
; 0000 02A8 }
; 0000 02A9 case 2:                //  Pressed CA
;PCODE: $0000022E VOL: 0
;PCODE: $0000022F VOL: 0
;PCODE: $00000230 VOL: 0
;PCODE: $00000231 VOL: 0
; 0000 02AA {
; 0000 02AB if (CA == 0)
;PCODE: $00000232 VOL: 0
;PCODE: $00000233 VOL: 0
;PCODE: $00000234 VOL: 0
; 0000 02AC {
; 0000 02AD S3 = 3;
;PCODE: $00000235 VOL: 0
;PCODE: $00000236 VOL: 0
; 0000 02AE }
; 0000 02AF break;
;PCODE: $00000237 VOL: 0
;PCODE: $00000238 VOL: 0
; 0000 02B0 }
; 0000 02B1 case 3:                // Released CA
;PCODE: $00000239 VOL: 0
;PCODE: $0000023A VOL: 0
;PCODE: $0000023B VOL: 0
;PCODE: $0000023C VOL: 0
; 0000 02B2 {
; 0000 02B3 if (CA)
;PCODE: $0000023D VOL: 0
;PCODE: $0000023E VOL: 0
;PCODE: $0000023F VOL: 0
; 0000 02B4 {
; 0000 02B5 S3 = 4;
;PCODE: $00000240 VOL: 0
;PCODE: $00000241 VOL: 0
; 0000 02B6 Q1 = 2;
;PCODE: $00000242 VOL: 0
;PCODE: $00000243 VOL: 0
; 0000 02B7 }
; 0000 02B8 break;
;PCODE: $00000244 VOL: 0
;PCODE: $00000245 VOL: 0
; 0000 02B9 }
; 0000 02BA case 4:
;PCODE: $00000246 VOL: 0
;PCODE: $00000247 VOL: 0
;PCODE: $00000248 VOL: 0
;PCODE: $00000249 VOL: 0
; 0000 02BB {
; 0000 02BC if (CA == 0)
;PCODE: $0000024A VOL: 0
;PCODE: $0000024B VOL: 0
;PCODE: $0000024C VOL: 0
; 0000 02BD {
; 0000 02BE S3 = 5;
;PCODE: $0000024D VOL: 0
;PCODE: $0000024E VOL: 0
; 0000 02BF }
; 0000 02C0 break;
;PCODE: $0000024F VOL: 0
;PCODE: $00000250 VOL: 0
; 0000 02C1 }
; 0000 02C2 case 5:
;PCODE: $00000251 VOL: 0
;PCODE: $00000252 VOL: 0
;PCODE: $00000253 VOL: 0
;PCODE: $00000254 VOL: 0
; 0000 02C3 {
; 0000 02C4 if (CA)
;PCODE: $00000255 VOL: 0
;PCODE: $00000256 VOL: 0
;PCODE: $00000257 VOL: 0
; 0000 02C5 {
; 0000 02C6 S3 = 6;
;PCODE: $00000258 VOL: 0
;PCODE: $00000259 VOL: 0
; 0000 02C7 Q1 = 3;
;PCODE: $0000025A VOL: 0
;PCODE: $0000025B VOL: 0
; 0000 02C8 }
; 0000 02C9 break;
;PCODE: $0000025C VOL: 0
;PCODE: $0000025D VOL: 0
; 0000 02CA }
; 0000 02CB case 6:
;PCODE: $0000025E VOL: 0
;PCODE: $0000025F VOL: 0
;PCODE: $00000260 VOL: 0
;PCODE: $00000261 VOL: 0
; 0000 02CC {
; 0000 02CD if (CA == 0)
;PCODE: $00000262 VOL: 0
;PCODE: $00000263 VOL: 0
;PCODE: $00000264 VOL: 0
; 0000 02CE {
; 0000 02CF S3 = 7;
;PCODE: $00000265 VOL: 0
;PCODE: $00000266 VOL: 0
; 0000 02D0 }
; 0000 02D1 break;
;PCODE: $00000267 VOL: 0
;PCODE: $00000268 VOL: 0
; 0000 02D2 }
; 0000 02D3 case 7:
;PCODE: $00000269 VOL: 0
;PCODE: $0000026A VOL: 0
;PCODE: $0000026B VOL: 0
;PCODE: $0000026C VOL: 0
; 0000 02D4 {
; 0000 02D5 if (CA)
;PCODE: $0000026D VOL: 0
;PCODE: $0000026E VOL: 0
;PCODE: $0000026F VOL: 0
; 0000 02D6 {
; 0000 02D7 S3 = 0;
;PCODE: $00000270 VOL: 0
; 0000 02D8 Q1 = 0;
;PCODE: $00000271 VOL: 0
; 0000 02D9 }
; 0000 02DA break;
;PCODE: $00000272 VOL: 0
;PCODE: $00000273 VOL: 0
; 0000 02DB }
; 0000 02DC }
;PCODE: $00000274 VOL: 0
; 0000 02DD 
; 0000 02DE out = CLC_RANGE_OUTPUT[Q1] | (CLC_RANGE_OUTPUT[Q] << 2);
;PCODE: $00000275 VOL: 0
;PCODE: $00000276 VOL: 0
;PCODE: $00000277 VOL: 0
;PCODE: $00000278 VOL: 0
;PCODE: $00000279 VOL: 0
;PCODE: $0000027A VOL: 0
;PCODE: $0000027B VOL: 0
;PCODE: $0000027C VOL: 0
;PCODE: $0000027D VOL: 0
;PCODE: $0000027E VOL: 0
;PCODE: $0000027F VOL: 0
; 0000 02DF 
; 0000 02E0 // Delete PB4-PB0
; 0000 02E1 PORTB &= 0xE0;
;PCODE: $00000280 VOL: 0
;PCODE: $00000281 VOL: 0
;PCODE: $00000282 VOL: 0
; 0000 02E2 
; 0000 02E3 // Display out on PB3-PB0
; 0000 02E4 PORTB |= out;
;PCODE: $00000283 VOL: 0
;PCODE: $00000284 VOL: 0
;PCODE: $00000285 VOL: 0
; 0000 02E5 }
;PCODE: $00000286 VOL: 0
;PCODE: $00000287 VOL: 0
;PCODE: $00000288 VOL: 0
