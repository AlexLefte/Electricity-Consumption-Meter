;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x01
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x0E
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x04
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x06
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x0C
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x0E
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x02
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=smcr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0

	.DSEG
;void Init();
;void UpdateConsumption();
;void DisplayConsumption();
;void DisplayDigit(char currentDisplay, char digit);
;void UpdateTime();
;void CLS();
;void MockPULSE();
;interrupt [19] void timer0_ovf_isr(void)
; 0000 0079 {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 007A // Reinitialize Timer 0 value
; 0000 007B TCNT0=0x3C;
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
; 0000 007C 
; 0000 007D // Update CA
; 0000 007E CA = (PORTD & 0x20) >> 5;
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
; 0000 007F 
; 0000 0080 // Update mock pulse
; 0000 0081 MockPULSE();
;PCODE: $00000017 VOL: 0
; 0000 0082 
; 0000 0083 // Check for pulses coming from ADSP
; 0000 0084 UpdateConsumption();
;PCODE: $00000018 VOL: 0
; 0000 0085 }
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;void main(void)
; 0000 0089 {
;PCODE: $0000001C VOL: 0
; 0000 008A // Declare your local variables here
; 0000 008B 
; 0000 008C // Crystal Oscillator division factor: 1
; 0000 008D #pragma optsize-
; 0000 008E CLKPR=(1<<CLKPCE);
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
; 0000 008F CLKPR=(0<<CLKPCE) | (0<<CLKPS3) | (0<<CLKPS2) | (0<<CLKPS1) | (0<<CLKPS0);
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
; 0000 0090 #ifdef _OPTIMIZE_SIZE_
; 0000 0091 #pragma optsize+
; 0000 0092 #endif
; 0000 0093 
; 0000 0094 // Input/Output Ports initialization
; 0000 0095 // Port A initialization
; 0000 0096 // Function: Bit7=Out Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 0097 DDRA=(1<<DDA7) | (0<<DDA6) | (0<<DDA5) | (0<<DDA4) | (0<<DDA3) | (0<<DDA2) | (0<<DDA1) | (0<<DDA0);
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
; 0000 0098 // State: Bit7=1 Bit6=P Bit5=P Bit4=P Bit3=P Bit2=P Bit1=P Bit0=P
; 0000 0099 PORTA=(1<<PORTA7) | (1<<PORTA6) | (1<<PORTA5) | (1<<PORTA4) | (1<<PORTA3) | (1<<PORTA2) | (1<<PORTA1) | (1<<PORTA0);
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
; 0000 009A 
; 0000 009B // Port B initialization
; 0000 009C // Function: Bit7=Out Bit6=Out Bit5=Out Bit4=Out Bit3=Out Bit2=Out Bit1=Out Bit0=Out
; 0000 009D DDRB=(1<<DDB7) | (1<<DDB6) | (1<<DDB5) | (1<<DDB4) | (1<<DDB3) | (1<<DDB2) | (1<<DDB1) | (1<<DDB0);
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
; 0000 009E // State: Bit7=1 Bit6=1 Bit5=1 Bit4=1 Bit3=1 Bit2=1 Bit1=1 Bit0=1
; 0000 009F PORTB=(1<<PORTB7) | (1<<PORTB6) | (1<<PORTB5) | (1<<PORTB4) | (1<<PORTB3) | (1<<PORTB2) | (1<<PORTB1) | (1<<PORTB0);
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
; 0000 00A0 
; 0000 00A1 // Port C initialization
; 0000 00A2 // Function: Bit7=Out Bit6=Out Bit5=Out Bit4=Out Bit3=Out Bit2=Out Bit1=Out Bit0=Out
; 0000 00A3 DDRC=(1<<DDC7) | (1<<DDC6) | (1<<DDC5) | (1<<DDC4) | (1<<DDC3) | (1<<DDC2) | (1<<DDC1) | (1<<DDC0);
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
; 0000 00A4 // State: Bit7=1 Bit6=1 Bit5=1 Bit4=1 Bit3=1 Bit2=1 Bit1=1 Bit0=1
; 0000 00A5 PORTC=(1<<PORTC7) | (1<<PORTC6) | (1<<PORTC5) | (1<<PORTC4) | (1<<PORTC3) | (1<<PORTC2) | (1<<PORTC1) | (1<<PORTC0);
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
; 0000 00A6 
; 0000 00A7 // Port D initialization
; 0000 00A8 // Function: Bit7=In Bit6=In Bit5=Out Bit4=Out Bit3=Out Bit2=Out Bit1=Out Bit0=Out
; 0000 00A9 DDRD=(0<<DDD7) | (0<<DDD6) | (1<<DDD5) | (1<<DDD4) | (1<<DDD3) | (1<<DDD2) | (1<<DDD1) | (1<<DDD0);
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
; 0000 00AA // State: Bit7=T Bit6=T Bit5=1 Bit4=1 Bit3=1 Bit2=1 Bit1=1 Bit0=1
; 0000 00AB PORTD=(0<<PORTD7) | (0<<PORTD6) | (1<<PORTD5) | (1<<PORTD4) | (1<<PORTD3) | (1<<PORTD2) | (1<<PORTD1) | (1<<PORTD0);
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
; 0000 00AC 
; 0000 00AD // Timer/Counter 0 initialization
; 0000 00AE // Clock source: System Clock
; 0000 00AF // Clock value: 9.766 kHz
; 0000 00B0 // Mode: Normal top=0xFF
; 0000 00B1 // OC0A output: Disconnected
; 0000 00B2 // OC0B output: Disconnected
; 0000 00B3 // Timer Period: 20.07 ms
; 0000 00B4 TCCR0A=(0<<COM0A1) | (0<<COM0A0) | (0<<COM0B1) | (0<<COM0B0) | (0<<WGM01) | (0<<WGM00);
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
; 0000 00B5 TCCR0B=(0<<WGM02) | (1<<CS02) | (0<<CS01) | (1<<CS00);
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
; 0000 00B6 TCNT0=0x3C;
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
; 0000 00B7 OCR0A=0x00;
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
; 0000 00B8 OCR0B=0x00;
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
; 0000 00B9 
; 0000 00BA // Timer/Counter 1 initialization
; 0000 00BB // Clock source: System Clock
; 0000 00BC // Clock value: Timer1 Stopped
; 0000 00BD // Mode: Normal top=0xFFFF
; 0000 00BE // OC1A output: Disconnected
; 0000 00BF // OC1B output: Disconnected
; 0000 00C0 // Noise Canceler: Off
; 0000 00C1 // Input Capture on Falling Edge
; 0000 00C2 // Timer1 Overflow Interrupt: Off
; 0000 00C3 // Input Capture Interrupt: Off
; 0000 00C4 // Compare A Match Interrupt: Off
; 0000 00C5 // Compare B Match Interrupt: Off
; 0000 00C6 TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
; 0000 00C7 TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (0<<CS11) | (0<<CS10);
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
; 0000 00C8 TCNT1H=0x00;
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
; 0000 00C9 TCNT1L=0x00;
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
; 0000 00CA ICR1H=0x00;
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
; 0000 00CB ICR1L=0x00;
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
; 0000 00CC OCR1AH=0x00;
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
; 0000 00CD OCR1AL=0x00;
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
; 0000 00CE OCR1BH=0x00;
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
; 0000 00CF OCR1BL=0x00;
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
; 0000 00D0 
; 0000 00D1 // Timer/Counter 2 initialization
; 0000 00D2 // Clock source: System Clock
; 0000 00D3 // Clock value: Timer2 Stopped
; 0000 00D4 // Mode: Normal top=0xFF
; 0000 00D5 // OC2A output: Disconnected
; 0000 00D6 // OC2B output: Disconnected
; 0000 00D7 ASSR=(0<<EXCLK) | (0<<AS2);
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
; 0000 00D8 TCCR2A=(0<<COM2A1) | (0<<COM2A0) | (0<<COM2B1) | (0<<COM2B0) | (0<<WGM21) | (0<<WGM20);
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
; 0000 00D9 TCCR2B=(0<<WGM22) | (0<<CS22) | (0<<CS21) | (0<<CS20);
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
; 0000 00DA TCNT2=0x00;
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
; 0000 00DB OCR2A=0x00;
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
; 0000 00DC OCR2B=0x00;
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
; 0000 00DD 
; 0000 00DE // Timer/Counter 0 Interrupt(s) initialization
; 0000 00DF TIMSK0=(0<<OCIE0B) | (0<<OCIE0A) | (1<<TOIE0);
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
; 0000 00E0 
; 0000 00E1 // Timer/Counter 1 Interrupt(s) initialization
; 0000 00E2 TIMSK1=(0<<ICIE1) | (0<<OCIE1B) | (0<<OCIE1A) | (0<<TOIE1);
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
; 0000 00E3 
; 0000 00E4 // Timer/Counter 2 Interrupt(s) initialization
; 0000 00E5 TIMSK2=(0<<OCIE2B) | (0<<OCIE2A) | (0<<TOIE2);
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
; 0000 00E6 
; 0000 00E7 // External Interrupt(s) initialization
; 0000 00E8 // INT0: Off
; 0000 00E9 // INT1: Off
; 0000 00EA // INT2: Off
; 0000 00EB // Interrupt on any change on pins PCINT0-7: Off
; 0000 00EC // Interrupt on any change on pins PCINT8-15: Off
; 0000 00ED // Interrupt on any change on pins PCINT16-23: Off
; 0000 00EE // Interrupt on any change on pins PCINT24-31: Off
; 0000 00EF EICRA=(0<<ISC21) | (0<<ISC20) | (0<<ISC11) | (0<<ISC10) | (0<<ISC01) | (0<<ISC00);
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
; 0000 00F0 EIMSK=(0<<INT2) | (0<<INT1) | (0<<INT0);
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
; 0000 00F1 PCICR=(0<<PCIE3) | (0<<PCIE2) | (0<<PCIE1) | (0<<PCIE0);
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
; 0000 00F2 
; 0000 00F3 // USART0 initialization
; 0000 00F4 // USART0 disabled
; 0000 00F5 UCSR0B=(0<<RXCIE0) | (0<<TXCIE0) | (0<<UDRIE0) | (0<<RXEN0) | (0<<TXEN0) | (0<<UCSZ02) | (0<<RXB80) | (0<<TXB80);
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
; 0000 00F6 
; 0000 00F7 // USART1 initialization
; 0000 00F8 // USART1 disabled
; 0000 00F9 UCSR1B=(0<<RXCIE1) | (0<<TXCIE1) | (0<<UDRIE1) | (0<<RXEN1) | (0<<TXEN1) | (0<<UCSZ12) | (0<<RXB81) | (0<<TXB81);
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
; 0000 00FA 
; 0000 00FB // Analog Comparator initialization
; 0000 00FC // Analog Comparator: Off
; 0000 00FD // The Analog Comparator's positive input is
; 0000 00FE // connected to the AIN0 pin
; 0000 00FF // The Analog Comparator's negative input is
; 0000 0100 // connected to the AIN1 pin
; 0000 0101 ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
; 0000 0102 ADCSRB=(0<<ACME);
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
; 0000 0103 // Digital input buffer on AIN0: On
; 0000 0104 // Digital input buffer on AIN1: On
; 0000 0105 DIDR1=(0<<AIN0D) | (0<<AIN1D);
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
; 0000 0106 
; 0000 0107 // ADC initialization
; 0000 0108 // ADC disabled
; 0000 0109 ADCSRA=(0<<ADEN) | (0<<ADSC) | (0<<ADATE) | (0<<ADIF) | (0<<ADIE) | (0<<ADPS2) | (0<<ADPS1) | (0<<ADPS0);
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
; 0000 010A 
; 0000 010B // SPI initialization
; 0000 010C // SPI disabled
; 0000 010D SPCR=(0<<SPIE) | (0<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
; 0000 010E 
; 0000 010F // TWI initialization
; 0000 0110 // TWI disabled
; 0000 0111 TWCR=(0<<TWEA) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWEN) | (0<<TWIE);
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
; 0000 0112 
; 0000 0113 // Globally enable interrupts
; 0000 0114 #asm("sei")
;PCODE: $00000077 VOL: 0
; 0000 0115 
; 0000 0116 // Initialize the device
; 0000 0117 Init();
;PCODE: $00000078 VOL: 0
; 0000 0118 
; 0000 0119 while (1)
;PCODE: $00000079 VOL: 0
; 0000 011A {
; 0000 011B // Display the consumption
; 0000 011C DisplayConsumption();
;PCODE: $0000007A VOL: 0
; 0000 011D 
; 0000 011E // Wait for interruptions
; 0000 011F }
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
; 0000 0120 }
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
;void Init()
; 0000 0124 {
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
; 0000 0125 // Setting initial states = 0
; 0000 0126 Q = S1 = S2 = S3 = S_PULSE = 0;
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
; 0000 0127 
; 0000 0128 // Turn off displays
; 0000 0129 PORTC = 0xff;
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
; 0000 012A PORTD = 0xff;
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
; 0000 012B PORTB = 0xff;
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
; 0000 012C }
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
;void UpdateConsumption()
; 0000 012F {
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
; 0000 0130 // Identify PULSE
; 0000 0131 // PULSE = PINA & 0x01;
; 0000 0132 
; 0000 0133 /* switch(S2)
; 0000 0134 {
; 0000 0135 case 0:
; 0000 0136 {
; 0000 0137 char cntP = 0;
; 0000 0138 
; 0000 0139 // PD6 -> Sending request from ADSP
; 0000 013A // PD7 -> Reading ack from ATmega164A
; 0000 013B 
; 0000 013C // Check if sending request flag is up
; 0000 013D // (Receiving sending request on PD6)
; 0000 013E if (PORTD && 0x40)
; 0000 013F {
; 0000 0140 // Send reading ack
; 0000 0141 // (Sending ack on PD7)
; 0000 0142 PORTD |= 0x80;
; 0000 0143 
; 0000 0144 // Going further to reading the pulses
; 0000 0145 S2 = 1;
; 0000 0146 }
; 0000 0147 break;
; 0000 0148 }
; 0000 0149 case 1:
; 0000 014A {
; 0000 014B // If PULSE is on, start counting
; 0000 014C if (PULSE)
; 0000 014D {
; 0000 014E // Increment cntP
; 0000 014F cntP += 1;
; 0000 0150 
; 0000 0151 // Reset reading flag
; 0000 0152 PORTD &= 0x7f;
; 0000 0153 
; 0000 0154 // Go further if the pulse period has passed,
; 0000 0155 // otherwise go back wait for sensding ack again.
; 0000 0156 S2 = (cntP == DP) ? 2 : 1;
; 0000 0157 }
; 0000 0158 break;
; 0000 0159 }
; 0000 015A case 2:
; 0000 015B {
; 0000 015C if (~PULSE)
; 0000 015D {
; 0000 015E // Update current consumption range
; 0000 015F Q = CLS();
; 0000 0160 
; 0000 0161 // Increment consumption
; 0000 0162 CONS[Q] += 1;
; 0000 0163 
; 0000 0164 // Wait for another pulse
; 0000 0165 S2 = 0;
; 0000 0166 }
; 0000 0167 break;
; 0000 0168 }
; 0000 0169 } */
; 0000 016A 
; 0000 016B switch(S2)
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
; 0000 016C {
; 0000 016D case 0:
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
; 0000 016E {
; 0000 016F // If PULSE is on, start counting
; 0000 0170 if (PULSE)
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
; 0000 0171 {
; 0000 0172 // Increment cntP
; 0000 0173 cntP += 1;
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
; 0000 0174 
; 0000 0175 // Reset reading flag
; 0000 0176 PORTD &= 0x7f;
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
; 0000 0177 
; 0000 0178 // Go further if the pulse period has passed,
; 0000 0179 // otherwise go back wait for sensding ack again.
; 0000 017A S2 = (cntP == DP) ? 1 : 0;
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
; 0000 017B }
; 0000 017C break;
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
; 0000 017D }
; 0000 017E case 1:
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
; 0000 017F {
; 0000 0180 if (~PULSE)
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
; 0000 0181 {
; 0000 0182 // Update current consumption range
; 0000 0183 CLS();
;PCODE: $000000B1 VOL: 0
; 0000 0184 
; 0000 0185 // Increment consumption
; 0000 0186 CONSUM[Q] += 1;
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
; 0000 0187 
; 0000 0188 // Wait for another pulse
; 0000 0189 S2 = 0;
;PCODE: $000000BA VOL: 0
; 0000 018A cntP = 0;
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
; 0000 018B }
; 0000 018C break;
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
; 0000 018D }
; 0000 018E }
;PCODE: $000000BF VOL: 0
; 0000 018F }
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
;void MockPULSE()
; 0000 0194 {
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
; 0000 0195 switch(S_PULSE)
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
; 0000 0196 {
; 0000 0197 case 0:
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
; 0000 0198 {
; 0000 0199 cntMockPulse = 0;
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
; 0000 019A PULSE = 1;
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
; 0000 019B S_PULSE = 1;
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
; 0000 019C break;
;PCODE: $000000CE VOL: 0
; 0000 019D }
; 0000 019E case 1:
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
; 0000 019F {
; 0000 01A0 cntMockPulse += 1;
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
; 0000 01A1 PULSE = 0;
;PCODE: $000000D6 VOL: 0
; 0000 01A2 if (cntMockPulse == 49)
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
; 0000 01A3 S_PULSE = 0;
;PCODE: $000000DA VOL: 0
; 0000 01A4 break;
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
; 0000 01A5 }
; 0000 01A6 }
;PCODE: $000000DD VOL: 0
; 0000 01A7 }
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
;void DisplayConsumption()
; 0000 01AA {
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
; 0000 01AB // We assume:
; 0000 01AC // PORTC: PC0 - PC6 -> 7 segments (A-G)
; 0000 01AD // PORTD: PD0 - PD3 -> select the common cathode for each digit (multiplexing)
; 0000 01AE // PD3 - C4, PD2 - C3, PD1 - C2, PD0 - C1
; 0000 01AF // Q - consumption range:
; 0000 01B0 // 0 -> 00:00 - H1:00
; 0000 01B1 // 1 -> H1:00 - H2:00               (MON - FRI)
; 0000 01B2 // 2 -> H2:00 - 00:00 (next day)
; 0000 01B3 // 3 -> SAT - SUN
; 0000 01B4 
; 0000 01B5 // The actual approach:
; 0000 01B6 // Each main loop iteration we multiplex the digits and display one at a time
; 0000 01B7 
; 0000 01B8 // If CA is pressed -> display total consumption,
; 0000 01B9 // else -> display consumption based on current range.
; 0000 01BA char cons;
; 0000 01BB CA = 1;
;PCODE: $000000E2 VOL: 0
;	cons -> R17
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
; 0000 01BC cons = (!CA) ? TOTAL_CONS : CONSUM[Q];
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
; 0000 01BD 
; 0000 01BE // Compute and display C4
; 0000 01BF C4 = cons / 1000;
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
; 0000 01C0 cons %= 1000;
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
; 0000 01C1 DisplayDigit(4, C4);
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
; 0000 01C2 
; 0000 01C3 // Compute and display C3
; 0000 01C4 C3 = cons / 100;
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
; 0000 01C5 cons %= 100;
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
; 0000 01C6 DisplayDigit(3, C3);
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
; 0000 01C7 
; 0000 01C8 // Compute and display C2
; 0000 01C9 C2 = cons / 10;
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
; 0000 01CA DisplayDigit(2, C2);
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
;PCODE: $00000118 VOL: 0
; 0000 01CB 
; 0000 01CC // Compute and display C1
; 0000 01CD C1 = cons % 10;
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
; 0000 01CE DisplayDigit(1, C1);
;PCODE: $0000011E VOL: 0
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 0
; 0000 01CF }
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
;void DisplayDigit(char currentDisplay, char digit)
; 0000 01D2 {
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
; 0000 01D3 // Select the desired display (turn on the pin
; 0000 01D4 // corresponding to the desired digit (C4/C3/C2/C1)
; 0000 01D5 char output = 0xff;
; 0000 01D6 
; 0000 01D7 // Set PORTC pins to the corresponding digit
; 0000 01D8 // PORTC = DIGITS[digit];
; 0000 01D9 
; 0000 01DA switch (currentDisplay)
;PCODE: $00000127 VOL: 0
;PCODE: $00000128 VOL: 0
;PCODE: $00000129 VOL: 0
;PCODE: $0000012A VOL: 0
;	currentDisplay -> R19
;	digit -> R16
;	output -> R17
;PCODE: $0000012B VOL: 0
;PCODE: $0000012C VOL: 0
;PCODE: $0000012D VOL: 0
;PCODE: $0000012E VOL: 0
; 0000 01DB {
; 0000 01DC case 4:
;PCODE: $0000012F VOL: 0
;PCODE: $00000130 VOL: 0
;PCODE: $00000131 VOL: 0
; 0000 01DD // Turn PD3 on
; 0000 01DE //output &= 0b11110111;
; 0000 01DF output &= 0b11111000;
;PCODE: $00000132 VOL: 0
;PCODE: $00000133 VOL: 0
; 0000 01E0 break;
;PCODE: $00000134 VOL: 0
; 0000 01E1 case 3:
;PCODE: $00000135 VOL: 0
;PCODE: $00000136 VOL: 0
;PCODE: $00000137 VOL: 0
;PCODE: $00000138 VOL: 0
; 0000 01E2 // Turn PD2 on
; 0000 01E3 // output &= 0b11111011;
; 0000 01E4 output &= 0b11110100;
;PCODE: $00000139 VOL: 0
;PCODE: $0000013A VOL: 0
; 0000 01E5 break;
;PCODE: $0000013B VOL: 0
; 0000 01E6 case 2:
;PCODE: $0000013C VOL: 0
;PCODE: $0000013D VOL: 0
;PCODE: $0000013E VOL: 0
;PCODE: $0000013F VOL: 0
; 0000 01E7 // Turn PD1 on
; 0000 01E8 output &= 0b11110010;
;PCODE: $00000140 VOL: 0
;PCODE: $00000141 VOL: 0
; 0000 01E9 break;
;PCODE: $00000142 VOL: 0
; 0000 01EA case 1:
;PCODE: $00000143 VOL: 0
;PCODE: $00000144 VOL: 0
;PCODE: $00000145 VOL: 0
;PCODE: $00000146 VOL: 0
; 0000 01EB // Turn PD0 on
; 0000 01EC output &= 0b11110001;
;PCODE: $00000147 VOL: 0
;PCODE: $00000148 VOL: 0
; 0000 01ED break;
;PCODE: $00000149 VOL: 0
; 0000 01EE }
;PCODE: $0000014A VOL: 0
; 0000 01EF 
; 0000 01F0 // Assign output to PORTC in order to select the desired display;
; 0000 01F1 PORTD = output;
;PCODE: $0000014B VOL: 0
;PCODE: $0000014C VOL: 0
; 0000 01F2 
; 0000 01F3 // Set PORTC pins to the corresponding digit
; 0000 01F4 PORTC = DIGITS[digit];
;PCODE: $0000014D VOL: 0
;PCODE: $0000014E VOL: 0
;PCODE: $0000014F VOL: 0
;PCODE: $00000150 VOL: 0
;PCODE: $00000151 VOL: 0
; 0000 01F5 
; 0000 01F6 // Add delay (10 us)
; 0000 01F7 // _display_us(10);
; 0000 01F8 }
;PCODE: $00000152 VOL: 0
;PCODE: $00000153 VOL: 0
;PCODE: $00000154 VOL: 0
;PCODE: $00000155 VOL: 0
;void UpdateTime(){
; 0000 01FB void UpdateTime(){
;PCODE: $00000156 VOL: 0
;PCODE: $00000157 VOL: 0
; 0000 01FC cnt_time += 1; //incrementare contor de timp
;PCODE: $00000158 VOL: 0
; 0000 01FD if(cnt_time != T_SEC) return;
;PCODE: $00000159 VOL: 0
;PCODE: $0000015A VOL: 0
;PCODE: $0000015B VOL: 0
;PCODE: $0000015C VOL: 0
; 0000 01FE 
; 0000 01FF cnt_time = 0; // se reseteaza contorul
;PCODE: $0000015D VOL: 0
;PCODE: $0000015E VOL: 0
; 0000 0200 S+=1;  //incrementeaza contor secunde
;PCODE: $0000015F VOL: 0
; 0000 0201 
; 0000 0202 if(S!=60) return;
;PCODE: $00000160 VOL: 0
;PCODE: $00000161 VOL: 0
;PCODE: $00000162 VOL: 0
;PCODE: $00000163 VOL: 0
; 0000 0203 S = 0;//se reseteaza nr de secunde
;PCODE: $00000164 VOL: 0
;PCODE: $00000165 VOL: 0
; 0000 0204 M += 1; //incrementeaza contor minute
;PCODE: $00000166 VOL: 0
; 0000 0205 
; 0000 0206 if(M!=60) return;
;PCODE: $00000167 VOL: 0
;PCODE: $00000168 VOL: 0
;PCODE: $00000169 VOL: 0
;PCODE: $0000016A VOL: 0
; 0000 0207 M = 0;
;PCODE: $0000016B VOL: 0
;PCODE: $0000016C VOL: 0
; 0000 0208 H += 1;
;PCODE: $0000016D VOL: 0
; 0000 0209 
; 0000 020A if(H!=24) return;
;PCODE: $0000016E VOL: 0
;PCODE: $0000016F VOL: 0
;PCODE: $00000170 VOL: 0
;PCODE: $00000171 VOL: 0
; 0000 020B H = 0;
;PCODE: $00000172 VOL: 0
;PCODE: $00000173 VOL: 0
; 0000 020C Z += 1;
;PCODE: $00000174 VOL: 0
; 0000 020D 
; 0000 020E if (Z == 7) Z = 0;
;PCODE: $00000175 VOL: 0
;PCODE: $00000176 VOL: 0
;PCODE: $00000177 VOL: 0
;PCODE: $00000178 VOL: 0
; 0000 020F return;
;PCODE: $00000179 VOL: 0
;PCODE: $0000017A VOL: 0
; 0000 0210 }
;PCODE: $0000017B VOL: 0
;void CLS()
; 0000 0213 {
;PCODE: $0000017C VOL: 0
;PCODE: $0000017D VOL: 0
; 0000 0214 char out;
; 0000 0215 
; 0000 0216 //exemplu
; 0000 0217 // Ziua 3, ora 8, min 6, sec 3
; 0000 0218 // 0x03080603
; 0000 0219 int now = (Z<<24) | (H<<16) | (M<<8) | S;
; 0000 021A 
; 0000 021B long int *adr = TABA[Q];
; 0000 021C char ready = 0;
; 0000 021D int i = 0;
; 0000 021E 
; 0000 021F while (!ready)
;PCODE: $0000017E VOL: 0
;PCODE: $0000017F VOL: 0
;PCODE: $00000180 VOL: 0
;PCODE: $00000181 VOL: 0
;PCODE: $00000182 VOL: 0
;PCODE: $00000183 VOL: 0
;	out -> R17
;	now -> R18,R19
;	*adr -> R20,R21
;	ready -> R16
;	i -> Y+6
;PCODE: $00000184 VOL: 0
;PCODE: $00000185 VOL: 0
;PCODE: $00000186 VOL: 0
;PCODE: $00000187 VOL: 0
;PCODE: $00000188 VOL: 0
;PCODE: $00000189 VOL: 0
;PCODE: $0000018A VOL: 0
;PCODE: $0000018B VOL: 0
;PCODE: $0000018C VOL: 0
;PCODE: $0000018D VOL: 0
;PCODE: $0000018E VOL: 0
;PCODE: $0000018F VOL: 0
;PCODE: $00000190 VOL: 0
;PCODE: $00000191 VOL: 0
;PCODE: $00000192 VOL: 0
;PCODE: $00000193 VOL: 0
;PCODE: $00000194 VOL: 0
;PCODE: $00000195 VOL: 0
;PCODE: $00000196 VOL: 0
;PCODE: $00000197 VOL: 0
;PCODE: $00000198 VOL: 0
;PCODE: $00000199 VOL: 0
;PCODE: $0000019A VOL: 0
;PCODE: $0000019B VOL: 0
;PCODE: $0000019C VOL: 0
;PCODE: $0000019D VOL: 0
;PCODE: $0000019E VOL: 0
;PCODE: $0000019F VOL: 0
; 0000 0220 {
; 0000 0221 if (now == adr[i]) {
;PCODE: $000001A0 VOL: 0
;PCODE: $000001A1 VOL: 0
;PCODE: $000001A2 VOL: 0
;PCODE: $000001A3 VOL: 0
;PCODE: $000001A4 VOL: 0
;PCODE: $000001A5 VOL: 0
;PCODE: $000001A6 VOL: 0
;PCODE: $000001A7 VOL: 0
;PCODE: $000001A8 VOL: 0
; 0000 0222 Q = adr[i + 1];
;PCODE: $000001A9 VOL: 0
;PCODE: $000001AA VOL: 0
;PCODE: $000001AB VOL: 0
;PCODE: $000001AC VOL: 0
;PCODE: $000001AD VOL: 0
;PCODE: $000001AE VOL: 0
; 0000 0223 ready = 1;  // ies din while
;PCODE: $000001AF VOL: 0
;PCODE: $000001B0 VOL: 0
; 0000 0224 }
; 0000 0225 else if (adr[i] == T) ready = 1;
;PCODE: $000001B1 VOL: 0
;PCODE: $000001B2 VOL: 0
;PCODE: $000001B3 VOL: 0
;PCODE: $000001B4 VOL: 0
;PCODE: $000001B5 VOL: 0
;PCODE: $000001B6 VOL: 0
;PCODE: $000001B7 VOL: 0
;PCODE: $000001B8 VOL: 0
;PCODE: $000001B9 VOL: 0
;PCODE: $000001BA VOL: 0
;PCODE: $000001BB VOL: 0
; 0000 0226 else i = i+2;
;PCODE: $000001BC VOL: 0
;PCODE: $000001BD VOL: 0
;PCODE: $000001BE VOL: 0
;PCODE: $000001BF VOL: 0
;PCODE: $000001C0 VOL: 0
; 0000 0227 }
;PCODE: $000001C1 VOL: 0
;PCODE: $000001C2 VOL: 0
;PCODE: $000001C3 VOL: 0
;PCODE: $000001C4 VOL: 0
; 0000 0228 
; 0000 0229 out = Tout[Q];
;PCODE: $000001C5 VOL: 0
;PCODE: $000001C6 VOL: 0
;PCODE: $000001C7 VOL: 0
;PCODE: $000001C8 VOL: 0
; 0000 022A }
;PCODE: $000001C9 VOL: 0
;PCODE: $000001CA VOL: 0
;PCODE: $000001CB VOL: 0
;PCODE: $000001CC VOL: 0
